<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HP goes FE</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://hikerpig.github.io/"/>
  <id>http://hikerpig.github.io/</id>
  
  <author>
    <name>Hikerpig</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前端 Log 小记</title>
    <link href="http://hikerpig.github.io/2017/07/29/2016-12-21-Enhanced-Client-Side-Console/"/>
    <id>http://hikerpig.github.io/2017/07/29/2016-12-21-Enhanced-Client-Side-Console/</id>
    <published>2017-07-29T05:40:50.000Z</published>
    <updated>2017-07-29T05:40:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>相信各位前端工程师们都经历过一个黑暗的场景。</p>
<img src="http://images-hikerpig.qiniudn.com/image/stack-or-gtfo.jpg" alt="undefined">
<p>(哎哟哎哟测试大人我什么也没说)</p>
<p>曾经有一个出现bug的页面出现在我面前，我没有珍惜，直到用户关掉页面了，才后悔莫及。</p>
<p>而且错误不能等到用户反馈了才去探究，最好有完备的收集和响应系统，积极的错误日志分析，使我们防患于未然。</p>
<h2 id="成熟的-saas-服务">成熟的 SaaS 服务</h2>
<p>选择还是挺多的，例如 <a href="http://trackjs.com/" target="_blank" rel="external">track.js</a>，<a href="https://sentry.io" target="_blank" rel="external">Sentry</a>，<a href="https://errorception.com/" target="_blank" rel="external">ErrorCeption</a>，<a href="https://www.loggly.com/" target="_blank" rel="external">Loggly</a>，<a href="https://airbrake.io/" target="_blank" rel="external">Airbrke</a>。都比较成熟，各家各有特色，集成相对简单。</p>
<h3 id="track.jstrackjs"><a href="http://trackjs.com/" target="_blank" rel="external">{track.js}</a></h3>
<p>鄙公司在使用的服务，十分好用，比起其他几个选项，只专注在前端错误日志，除了基本的记录、sourcemap支持以及错误栈追踪以外，提供的事件记录和时间轴功能，记录了所有网络请求以及用户操作(皆可配置开关)，能让你更好地重现异常发生的过程。十分推荐大家试试，试用期有30天，在自己的项目里先试试吧。</p>
<h3 id="sentrysentry"><a href="https://sentry.io" target="_blank" rel="external">Sentry</a></h3>
<p>有跨语言和多框架集成支持，前后端皆可用，有免费的社区版本。</p>
<p>值得一说的是浏览器端的库名字是<code>raven</code>，看了不得不为这个梗点个赞。</p>
<div class="figure">
<img src="http://www.30play.com/manage/editor/UploadFile/2014108143616129.jpg" alt="X-Men">
<p class="caption">X-Men</p>
</div>
<h2 id="错误栈追踪stack-trace">错误栈追踪(Stack Trace)</h2>
<p>如果不使用自带 parser 的服务而是自己实现前后功能，可能在发送到服务器之前，最好做一些处理，例如生成更可读的错误栈，会让你工作更加轻松。栈信息对于定位和调试错误是十分重要的。</p>
<h3 id="第三方库">第三方库</h3>
<h4 id="tracekit"><a href="https://github.com/csnover/TraceKit" target="_blank" rel="external">TraceKit</a></h4>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 先注册一下报告的行为回调</span></div><div class="line">TraceKit.report.subscribe(<span class="function"><span class="keyword">function</span> <span class="title">yourLogger</span>(<span class="params">errorReport</span>) </span>&#123;</div><div class="line">  <span class="comment">// 发送ajax请求到服务器端</span></div><div class="line">  <span class="comment">// 在 https://gist.github.com/4491219 上有个好例子</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 开始写程序</span></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">  <span class="comment">/*</span></div><div class="line"><span class="comment">   * your application code here</span></div><div class="line"><span class="comment">   *</span></div><div class="line"><span class="comment">   */</span></div><div class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'oops'</span>);</div><div class="line">&#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">  TraceKit.report(e); <span class="comment">//error with stack trace gets normalized and sent to subscriber</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="stacktrace.js"><a href="http://stacktracejs.com/" target="_blank" rel="external">stacktrace.js</a></h4>
<p>解析错误栈并且给出结构化表示，api 设计满足 Promise 规范。</p>
<p>官方给出的例子:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> callback = <span class="function"><span class="keyword">function</span>(<span class="params">stackframes</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> stringifiedStack = stackframes.map(<span class="function"><span class="keyword">function</span>(<span class="params">sf</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> sf.toString();</div><div class="line">  &#125;).join(<span class="string">'\n'</span>);</div><div class="line">  <span class="built_in">console</span>.log(stringifiedStack);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> errback = <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123; <span class="built_in">console</span>.log(err.message); &#125;;</div><div class="line"></div><div class="line"><span class="built_in">window</span>.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">msg, file, line, col, error</span>) </span>&#123;</div><div class="line">  <span class="comment">// callback is called with an Array[StackFrame]</span></div><div class="line">  StackTrace.fromError(error).then(callback).catch(errback);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="提升开发时console-log体验的轻量第三方库">提升开发时Console log体验的轻量第三方库</h3>
<h4 id="logdown"><a href="https://github.com/caiogondim/logdown.js" target="_blank" rel="external">Logdown</a></h4>
<p>node和浏览器端都可以使用的一个工具。</p>
<p>提供命名空间，并能分别开关各命名空间的log:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> uiLogger = <span class="keyword">new</span> Logdown(&#123;<span class="attr">prefix</span>: <span class="string">'MyApp:UI'</span>&#125;);</div><div class="line"><span class="keyword">var</span> networkServiceLogger = <span class="keyword">new</span> Logdown(&#123;<span class="attr">prefix</span>: <span class="string">'MyApp:Network'</span>&#125;);</div><div class="line"></div><div class="line">Logdown.disable(<span class="string">'MyApp:UI'</span>);</div><div class="line">Logdown.enable(<span class="string">'MyApp:Network'</span>);</div><div class="line">Logdown.disable(<span class="string">'MyApp:*'</span>); <span class="comment">// 支持通配符</span></div></pre></td></tr></table></figure>
<p>还支持 markdown 语法:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> logger = <span class="keyword">new</span> Logdown(&#123;<span class="attr">markdown</span>: <span class="literal">true</span>&#125;);</div><div class="line">logger.warn(<span class="string">'Log is *Awesome*'</span>);</div></pre></td></tr></table></figure>
<p>可以看看作者给的<a href="https://caiogondim.github.io/logdown.js/" target="_blank" rel="external">例子</a></p>
<img src="http://images-hikerpig.qiniudn.com/image/logdown.js.png" alt="undefined">
<h1 id="最后">最后</h1>
<p>错误日志收集完了记住要去看哟。</p>
<h1 id="参考">参考</h1>
<ul>
<li><a href="https://www.sitepoint.com/logging-errors-client-side-apps/" target="_blank" rel="external">Logging Errors in Client-Side Applications</a>: 基本上是原文</li>
<li>题图来自<a href="https://github.com/csnover/TraceKit" target="_blank" rel="external">TraceKit</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;相信各位前端工程师们都经历过一个黑暗的场景。&lt;/p&gt;
&lt;img src=&quot;http://images-hikerpig.qiniudn.com/image/stack-or-gtfo.jpg&quot; alt=&quot;undefined&quot;&gt;
&lt;p&gt;(哎哟哎哟测试大人我什么也没说)&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://hikerpig.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://hikerpig.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Engineering" scheme="http://hikerpig.github.io/tags/Engineering/"/>
    
  </entry>
  
  <entry>
    <title>[译] 使用重构件（Codemod）加速 JavaScript 开发</title>
    <link href="http://hikerpig.github.io/2016/06/30/2016-06-02-turbocharged-javascript-refactoring-with-codemods/"/>
    <id>http://hikerpig.github.io/2016/06/30/2016-06-02-turbocharged-javascript-refactoring-with-codemods/</id>
    <published>2016-06-29T16:00:00.000Z</published>
    <updated>2017-07-22T17:25:39.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>原文链接 : <a href="https://medium.com/airbnb-engineering/turbocharged-javascript-refactoring-with-codemods-b0cae8b326b9#.tjerodd52" target="_blank" rel="external">Turbocharged JavaScript refactoring with codemods</a></li>
<li>原文作者 : <a href="https://medium.com/u/e52389684329" target="_blank" rel="external">Joe Lencioni</a></li>
</ul>
<h3 id="使用重构件codemod加速-javascript-开发">使用重构件（Codemod）加速 JavaScript 开发</h3>
<p>在花园里耕耘乐趣无穷，但如果除草不勤，最后收获可能是一团揪心。漏掉一次除草本身可能并无大碍，但积少成多最后会毁掉整座花园。没有杂草的花园让维护工作神清气爽。这个道理对代码库也类似。</p>
<p>我通常讨厌除草，经常忘记这事的结果就是一团糟。谢天谢地在编程界有像 <a href="http://eslint.org/" target="_blank" rel="external">ESLint</a> 和 <a href="https://github.com/brigade/scss-lint" target="_blank" rel="external">SCSS-Lint</a> 这样的好东西提醒我们勤理代码。但是如果面对的是大段大段的历史代码，光是想想要手动调整成百十千万的空格和逗号，悲伤便逆流成河。</p>
<p>8年来有几百万行 JavaScript 代码进入 Airbnb 的版本控制系统中。同时，前端界风起云涌。新功能，新框架，甚至 JavaScript 本身都在快速进化。尽管遵循<a href="https://github.com/airbnb/javascript" target="_blank" rel="external">良好的代码风格</a>会让变革少些疼痛，但还是很容易累积出不再遵循最新“最佳实践”的巨大代码库。每一处代码风格的不一致都是一棵杂草，唯一归宿就是被铲掉，化作春泥更护花，好让开发团队保持高效。来看看我们花园现在的样子：</p>
<div class="figure">
<img src="http://ww1.sinaimg.cn/large/005SiNxygw1f3j83hmmrij30jk0dvjsn.jpg">

</div>
<p>我执着于增加团队效率，也深知保持一致性的代码能增速团队反馈和减少无效沟通。我们最近开始了一个整理代码的项目，准备把许多陈旧的 JavaScript 代码转化得符合我们的代码风格，亦使我们的代码检验器有更多用武之地。若全都手动完成，会是件十分无聊和耗时的苦差，所以我们借助工具帮我们自动化此工作。虽说使用 <em><code>eslint -fix</code></em> 是个不错的开始，但<a href="https://github.com/eslint/eslint/issues/5329" target="_blank" rel="external">它现在所能有限</a>。尽管他们<a href="https://twitter.com/geteslint/status/723909416957829122" target="_blank" rel="external">最近开始接受修复所有规则的PR</a>，也准备<a href="https://github.com/cst/cst" target="_blank" rel="external">构建 JavaScript 的具体语法树</a>，但等这些功能完成还需要些时间。感谢上苍我们发现了 Facebook 的 <a href="https://github.com/facebook/jscodeshift" target="_blank" rel="external">jscodeshift</a>，这是一个重构工具（协助大型代码库的自动化重构）。如果代码库是个花园，那么 jscodeshift 就像个除草机器人。</p>
<p>此工具将 JavaScript 解析为一棵 <a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree" target="_blank" rel="external">抽象语法树</a>，并在其上进行变换，然后输出符合指定代码风格的新 JavaScript 代码。转换过程是用 JavaScript 本身实现的，所以我们团队很乐意使用此工具。寻找或是创建转换代码能加速我们乏味的重构，让我们团队能够专注于更有意义的工作。</p>
<p>运行几个代码重构件后，我们的花园整洁了点：</p>
<div class="figure">
<img src="http://ww4.sinaimg.cn/large/a490147fjw1f3j9ybpgazj20je0flwfm.jpg">

</div>
<h3 id="策略">策略</h3>
<p>鉴于多数重构件能在一分钟内处理上千文件，我发现它是我打发主要工作的等待间隙（例如等代码审查）的不错选择。它帮我最大化提升了工作效率从而让我能在更大和更重要的项目中有所建树。</p>
<p>大规模重构主要面临四大挑战。沟通、正确性、代码审查以及冲突合并。我采取以下策略来应对这些挑战。</p>
<p>重构件不总是能产出我需要的结果，因此对其结果的审查和改动十分重要。以下命令在跑完重构件后很有用：</p>
<pre><code>git diff
git add --patch
git checkout --patch</code></pre>
<p>保持每个提交和 PR 在小的体量是好的做法，对于重构件也不例外。我通常一段时间内进行一类重构，减少代码审查和冲突合并的麻烦。我亦经常让重构件自动提交重构结果，而后若有必要，再手动清理。这样在衍合分支时解决冲突会轻松点，因为我可以使用</p>
<pre><code>git checkout --ours path/to/conflict</code></pre>
<p>然后在那个文件上再运行一次重构件，之后也不会弄乱我自己的手动提交。</p>
<p>有时重构件生成了很大的变动，我觉得在此情况下根据目录或文件名来分成数次提交或 PR 会比较好。例如，一个提交重构 .js 文件，另一个提交重构.jsx 文件。这样之后代码审查和冲突合并会相对轻松一点。谨遵 <a href="https://en.wikipedia.org/wiki/Unix_philosophy" target="_blank" rel="external">Unix 哲学</a>，分批进行文件重构简单到仅需调整 <em><code>find</code></em> 命令的参数：</p>
<pre><code>find app/assets/javascripts -name *.jsx -not -path */vendor/* | \
  xargs jscodeshift -t ~/path/to/transform.js</code></pre>
<p>为避免和别人的代码冲突，我通常在周五早上才推送我的重构件生成的提交，然后周一赶在大家开始工作之前进行衍合和合并。这样其他人周末放假前不被你的重构件阻碍，能好好整理自己的工作成果。</p>
<h3 id="我们用得顺手的重构件">我们用得顺手的重构件</h3>
<p>虽然此工具还比较新，已然有了一些实用的重构件。以下是一些我们成功上手了的。</p>
<h4 id="轻量级重构件">轻量级重构件</h4>
<p>以下是些用着不那么痛苦的，立刻上手感受成效。</p>
<p><a href="https://github.com/cpojer/js-codemod#arrow-function" target="_blank" rel="external"><strong>js-codemod/arrow-function</strong></a><strong>:</strong> 谨慎地把函数转为箭头函数</p>
<p>使用前:</p>
<pre><code>[1, 2, 3].map(function(x) {
  return x * x;
}.bind(this));</code></pre>
<p>使用后:</p>
<pre><code>[1, 2, 3].map(x =&gt; x * x);</code></pre>
<p><a href="https://github.com/cpojer/js-codemod#no-vars" target="_blank" rel="external"><strong>js-codemod/no-vars</strong></a><strong>:</strong> 将 <em><code>var'_ 安全转化为 _</code>const<code>_ 或 _</code>let`</em>。</p>
<p>使用前:</p>
<pre><code>var belong = &#39;anywhere&#39;;</code></pre>
<p>使用后:</p>
<pre><code>const belong = &#39;anywhere&#39;;</code></pre>
<p><a href="https://github.com/cpojer/js-codemod#object-shorthand" target="_blank" rel="external"><strong>js-codemod/object-shorthand</strong></a><strong>:</strong> 把对象字面量转为 ES6 的简写表示。</p>
<p>使用前:</p>
<pre><code>const things = {
  belong: belong,
  anywhere: function() {},
};</code></pre>
<p>使用后:</p>
<pre><code>const things = {
  belong,
  anywhere() {},
};</code></pre>
<p><a href="https://github.com/cpojer/js-codemod#unchain-variables" target="_blank" rel="external"><strong>js-codemod/unchain-variables</strong></a><strong>:</strong> 分离连续声明的变量。</p>
<p>使用前:</p>
<pre><code>const belong = &#39;anywhere&#39;, welcome = &#39;home&#39;;</code></pre>
<p>使用后:</p>
<pre><code>const belong = &#39;anywhere&#39;;
const welcome = &#39;home&#39;;</code></pre>
<p><a href="https://github.com/cpojer/js-codemod#unquote-properties" target="_blank" rel="external"><strong>js-codemod/unquote-properties</strong></a><strong>:</strong> 移除对象属性的引号。</p>
<p>使用前:</p>
<pre><code>const things = {
  &#39;belong&#39;: &#39;anywhere&#39;,
};</code></pre>
<p>使用后:</p>
<pre><code>const things = {
  belong: &#39;anywhere&#39;,
};</code></pre>
<h4 id="重量级重构件">重量级重构件</h4>
<p>以下重构件或是改动很多代码引发合并和冲突之痛，或是需要更多后续的手动更改以保证代码还能看得下去。</p>
<p><a href="https://github.com/reactjs/react-codemod#class" target="_blank" rel="external"><strong>react-codemod/class</strong></a><strong>:</strong> 把 <em><code>React.createClass</code></em> 转为 ES6 class 的实现。</p>
<p>此重构件在有 mixin 的时候不会变换，在类似于 <em><code>propTypes</code></em>、默认 props 和 initial state 定义这样的必要转换做得很好，还能将事件回调函数绑定到构造器上。</p>
<p>使用前:</p>
<pre><code>const BelongAnywhere = React.createClass({
  // ...
});</code></pre>
<p>使用后:</p>
<pre><code>class BelongAnywhere extends React.Component {
  // ...
}</code></pre>
<p><a href="https://github.com/reactjs/react-codemod#sort-comp" target="_blank" rel="external"><strong>react-codemod/sort-comp</strong></a><strong>:</strong> 根据 <a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/sort-comp.md" target="_blank" rel="external">ESLint react/sort-comp rule</a> 重新组织 React component 的方法声明顺序。</p>
<p>这个会调整大量代码，git 不会自动合并冲突。我觉得在使用此重构件前最好最好跟队友打个招呼，在不太容易发生冲突的时候（例如周末）进行重构。当我衍合此重构的提交且遇上冲突的时候，我会：</p>
<pre><code>git checkout --ours path/to/conflict</code></pre>
<p>然后再运行一次重构件。</p>
<p>使用前:</p>
<pre><code>class BelongAnywhere extends React.Component {
  render() {
    return &lt;div&gt;Belong Anywhere&lt;/div&gt;;
  }

  componentWillMount() {
      console.log(&#39;Welcome home&#39;);
    }
  }</code></pre>
<p>使用后:</p>
<pre><code>class BelongAnywhere extends React.Component {
  componentWillMount() {
    console.log(&#39;Welcome home&#39;);
  }

 render() {
    return &lt;div&gt;Belong Anywhere&lt;/div&gt;;
  }
}</code></pre>
<p><a href="https://github.com/cpojer/js-codemod#template-literals" target="_blank" rel="external"><strong>js-codemod/template-literals</strong></a><strong>:</strong> 把字符串的串联转换为字符串模板字面量表示。</p>
<p>因为我们多处用到字符串串联，而且这个重构件尽其所能把所有字符串都转成模板，我发现很多转换结果其实并不合理。我之所以这个重构件放到“重量级”列表里，是因为它会改动很多文件，而且之后我们还得进行大量的手动修改才能得到满意的结果。</p>
<p>使用前:</p>
<pre><code>const belong = &#39;anywhere &#39;+ welcomeHome;</code></pre>
<p>使用后:</p>
<pre><code>const belong = `anywhere ${welcomeHome}`;</code></pre>
<h3 id="资源">资源</h3>
<p>若你想写自己的重构件，或是看看它能做什么，可以看下下面的资源。</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=d0pOgY8__JM" target="_blank" rel="external">逐步改进复杂系统</a>：来自 Christoph Pojer 于 JSConf EU 2015 上关于 Facebook 的重构件的演讲。（亦可见<a href="https://medium.com/@cpojer/effective-javascript-codemods-5a6686bb46fb" target="_blank" rel="external">高效的 JavaScript 重构件</a>）。</li>
<li><a href="https://vramana.github.io/blog/2015/12/21/codemod-tutorial/" target="_blank" rel="external">如何写重构件</a>: 带你写一个把字符串串联转化为字符串模板字面量的重构件的教程。</li>
<li><a href="https://astexplorer.net/" target="_blank" rel="external">AST 探索</a>: 可查看由多种语法分析程序产生的 AST 的工具。好东西，可以查看你想转换的代码的 AST。</li>
<li><a href="https://medium.com/nfl-engineers/nfl-codemods-migrating-a-monolith-1e3363571707" target="_blank" rel="external">NFL ♥ C重构件: 海量代码迁移</a>: 关于 NFL 如何使用重构件的一个使用案例。</li>
<li><a href="https://github.com/reactjs/react-codemod" target="_blank" rel="external">react-codemod</a>: 一系列关于 React 的重构件。</li>
<li><a href="https://github.com/cpojer/js-codemod" target="_blank" rel="external">js-codemod</a>: 一系列常用的 JavaScript 重构件。</li>
</ul>
<h3 id="影响">影响</h3>
<p>在使用了一些现成的和我们自己写的并贡献给社区的重构件之后，我们的旧代码质量获得很大的提升。我不费吹灰之力便重构了40000行代码，将旧代码调整至符合 ES6 代码风格。花园焕然一新，我们之后的工作也更有效率和乐趣。</p>
<p>使用已有的重构件仅是牛刀小试，只有在你拿起键盘写出自己的重构件时，真正的能量才会释放。无论是对代码风格重构，或是对失效 API 的调整，重构件都能大显身手，你可以尽情想象发挥。这些技术值得学习投入，能省下你和使用你的项目使用者很多时间精力。</p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;原文链接 : &lt;a href=&quot;https://medium.com/airbnb-engineering/turbocharged-javascript-refactoring-with-codemods-b0cae8b326b9#.tjerodd52&quot; ta
    
    </summary>
    
      <category term="工具" scheme="http://hikerpig.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Javascript" scheme="http://hikerpig.github.io/tags/Javascript/"/>
    
      <category term="前端" scheme="http://hikerpig.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Engineering" scheme="http://hikerpig.github.io/tags/Engineering/"/>
    
  </entry>
  
  <entry>
    <title>[译] Javascript 姿势提升简略</title>
    <link href="http://hikerpig.github.io/2016/04/28/2016-04-28-%E8%AF%91-Javascript-%E5%A7%BF%E5%8A%BF%E6%8F%90%E5%8D%87%E7%AE%80%E7%95%A5/"/>
    <id>http://hikerpig.github.io/2016/04/28/2016-04-28-译-Javascript-姿势提升简略/</id>
    <published>2016-04-28T03:21:18.000Z</published>
    <updated>2016-04-28T03:21:18.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>原文链接 : <a href="http://developer.telerik.com/featured/leveling-up-your-javascript/" target="_blank" rel="external">Leveling Up Your JavaScript</a></li>
<li>原文作者 : <a href="http://developer.telerik.com/author/rcamden/" target="_blank" rel="external">Raymond Camden</a></li>
</ul>
<p>JavaScript 是一门入门容易，但是相当难以精通的语言。可现今一些文章总假设你已经精通了它。</p>
<p>我从 1995 年 JavaScript 还以 LiveScript 名字出现的时候就开始用它了，但后来逐渐从前端开发撤回服务器的安全怀抱中，直到五年前才重拾。很高兴看到如今的浏览器更加的强大和易于调试。但 JavaScript 已经演变得越来越复杂且难以精通了。不过最近我终于得出结论，我并不需要_精通_ Javascript，只需要比以前更进一步就好。能成为一个“好”的 JavaScript 开发者我便觉欣慰。</p>
<p>以下是我发现的一些_实用_的 JavaScript 小技巧: <a href="#组织代码">组织代码</a>; <a href="#代码检验(Linting)">代码检验</a>; <a href="#测试">测试</a>; 以及 <a href="#浏览器开发者工具">使用开发者工具</a>。里面有几条对有经验的 JavaScript 开发者来说可能很显而易见，但是语言初学者很容易养成坏习惯。这些技巧提高了我的技术水平，同时也为我的用户创造了更好的体验。_这_难道不是我们最大的目标么。</p>
<blockquote>
<p>你可在此处<a href="http://developer.telerik.com/wp-content/uploads/2016/01/code.zip" target="_blank" rel="external">下载</a>本文的样例代码。</p>
</blockquote>
<h2 id="组织代码">组织代码</h2>
<p>JavaScript 初学者总是不可避免地在他们的 HTML 页面里写上一大坨代码。开始的时候都是很简单的，例如使用 jQuery 给一个表单输入自动加上焦点，然后要加上表单验证，然后又要加上一些市场上走俏的模态框组件——就是那些阻止用户往下阅读内容好让他们在 Facebook 上给网站点赞的东西。经过这些七七八八的功能迭代后你的一个文件里 HTML 标签和 JavaScript 都有了几百行。</p>
<p>别再继续这种乱七八糟的方式了。这个技巧太简单了我都不好意思单独把它列出来，但大家还_真的_很难拒绝这种把代码一坨扔上页面的偷懒做法。还请各位务必避之如瘟疫。养成好习惯：在开始的时候就先创建好一个空的 JavaScript 文件，然后用 script 标签引入它。这样一来，之后的交互与其他客户端功能代码就可以直接填入先前准备好的空文件里去了。</p>
<p>把 JavaScript 从 HTML 页面中剥离以后（干净多了是不是？），下一个问题就是关于这些代码的组织形式了。这几百行 JavaScript 也许功能没啥问题，但是几个月后，一旦你开始想调试或是改点东西，你可能特么找不到某个函数在哪了。</p>
<p>若仅仅把代码从 HTML 中剥离到一个单独文件中是不够的，那还能怎么办呢？</p>
<h3 id="框架">框架！</h3>
<p>显然解决方案是框架。把所有东西用 AngularJS，或 Ember，或 React 或其他几百个框架中某一个写一遍。哼哧哼哧地把整个网站重写为一个单页应用，用上 MVC 什么的。</p>
<p>或者根本不需要。当然了，别误会我，在编写应用的时候我喜欢用 Angular，但是一个“应用”和一个页面的交互复杂度是有区别的。一个用上 Ajax 技术的产品目录页和 Gmail 也是有区别的 - 起码几十万行代码的区别。那么，如果不走框架这条路的话，还有什么选择呢？</p>
<h3 id="设计模式">设计模式</h3>
<p>设计模式是对“这是过去人们解决问题的一个方法”这句话的高级说法。Addy Osmani 写过一本关于此的很好的书，<a href="http://addyosmani.com/resources/essentialjsdesignpatterns/book/" target="_blank" rel="external">学习 JavaScript 设计模式</a>，可以免费下载阅读。我推荐这本书。但是我对它（以及类似的关于此议题的讨论）有点小看法，因为最后你们写的代码可能变成这样:</p>
<pre><code>var c = new Car();
c.startEngine();
c.drive();
c.soNotRealistic();</code></pre>
<p>对我来说，设计模式在抽象层面上是有意义的，但是在_实际工作中_，没有什么用。在实际项目的环境下，挑选并应用设计模式是件很困难的事情。</p>
<h4 id="模块">模块</h4>
<p>在所有我看过的设计模式中，我觉得模块模式是最简单也是最容易应用到现有代码里的。</p>
<p>纵而览之，模块模式就是一系列代码之外加了个包装。你抽取出一系列功能相关的代码扔到一个模块里，决定需要暴露的部分，也可以把一个模块里的代码放到不同的文件里。然后建立一个易于在项目之间共享的代码黑匣。</p>
<p>看看这个简单的例子。此处的语法乍看可能有点奇怪，起码我一开始是这样觉得的。我们先从“包装”部分开始看，然后我再解释其余部分。</p>
<div class="figure">
<img src="http://ww4.sinaimg.cn/large/9b5c8bd8jw1f0zumg7z7gj20kp05ojru.jpg">

</div>
<p>模块模式的包装。</p>
<p>只有我一个人被这些括号搞晕了么？我搞不明白这里是干嘛的，这还是在我懂 JavaScript 的前提下。其实这里如果从里往外看，就清晰很多。</p>
<div class="figure">
<img src="http://ww2.sinaimg.cn/large/9b5c8bd8jw1f0zuncbxnuj20m805lgly.jpg">

</div>
<p>模块的内部只是个普通的函数。</p>
<p>从一个简单的函数开始，在其内部定义该模块的实际需要提供的代码。</p>
<div class="figure">
<img src="http://ww1.sinaimg.cn/large/9b5c8bd8jw1f0zunvmhafj20m805ot94.jpg">

</div>
<p>圆括号使得这个函数自动执行。</p>
<p>最后的圆括号会让该函数立即执行。我们在函数里返回了什么，模块就是什么。此时我们这里还是空的。不过此时上图高亮的部分还_不是_合法的 JavaScript。那么，怎样让它变得合法呢？</p>
<div class="figure">
<img src="http://ww4.sinaimg.cn/large/9b5c8bd8jw1f0zuoenvzjj20m805mdg9.jpg">

</div>
<p>外边的圆括号开始发功了。</p>
<p>在<code>function() { }()</code> 外的圆括号使得此处成为合法JavaScript。你要是不信我，就打开开发者工具的控制台自己输入看看。</p>
<p>这样就是我们一开始看到的。</p>
<div class="figure">
<img src="http://ww1.sinaimg.cn/large/9b5c8bd8jw1f0zuotyvzej20m808ngm7.jpg">

</div>
<p>返回值被赋给一个变量。</p>
<p>最后一件事是把返回值赋给一个变量。尽管我自己完全懂得这里，但每次我看见这种代码我都得暂停一秒钟来提醒自己这是什么鬼。说来也不怕羞，我在编辑器里存着这段空模块代码随时快手粘贴。</p>
<p>当我们终于征服了这坨诡异的语法之后，真正的模块模式究竟长啥样呢？</p>
<pre><code>var counterModule = (function() {
  var counter = 0;

  return {
    incrementCounter: function () {
      return counter++;
    },
    resetCounter: function () {
      console.log(&quot;counter value prior to reset: &quot; + counter );
      counter = 0;
    }
  };

}());</code></pre>
<p>这段代码创建了一个叫做 <code>counterModule</code> 的模块。它有两个函数，<code>incrementCounter</code> 和 <code>resetCounter</code>。可以这样使用它们：</p>
<pre><code>console.log(counterModule.getCounter()); //0
counterModule.incrementCounter();
console.log(counterModule.getCounter()); //1
counterModule.resetCounter();
console.log(counterModule.getCounter()); //0</code></pre>
<p>主要的思想就是把 <code>counterModule</code> 里的代码好好地封装起来。封装是计算机科学基础概念，将来 JavaScript 还会提供更简单的封装方法，不过就现在来说，我觉得模块模式已是个超级简单和使用的组织代码方案。</p>
<h4 id="一个实用的模块案例">一个实用的模块案例</h4>
<p>吐槽完网上看到的样例（例如上面那个 Car 的例子）。我们现在需要编写一个符合实际场景需求的简单代码。限于本文篇幅，我会写得尽量简单，但会贴合你在遇到实际 web 项目时的情况。</p>
<p>假设你的网游公司愣天堂 (任粉莫喷)，在用户要创建游戏人物的时候需要一个注册页面。你需要一个可以让用户选择名字的表单。构建名字的规则有点诡异：</p>
<ul>
<li>必须以大写字母开头</li>
<li>长度不小于2</li>
<li>允许空格，但是不能有标点</li>
<li>不能有“敏感”词汇</li>
</ul>
<p>先写下这个超简单的表单。</p>
<pre><code>&lt;html&gt;
  &lt;head&gt;

  &lt;/head&gt;

  &lt;body&gt;

    &lt;p&gt;Text would be here to describe the rules...&lt;/p&gt;

    &lt;form&gt;
      &lt;input type=&quot;text&quot; placeholder=&quot;Identifer&quot;&gt;
      &lt;input type=&quot;submit&quot; value=&quot;Register Identifer.&quot;&gt;
    &lt;/form&gt;
    &lt;script src=&quot;app.js&quot;&gt;&lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;</code></pre>
<p>除了我描述的输入框，表单里还有个提交按钮。然后我加了些有关上面提到的规则的说明，先尽量保持精简。让我们来看看代码。</p>
<pre><code>var badWords = [&quot;kitten&quot;,&quot;puppy&quot;,&quot;beer&quot;];
function hasBadWords(s) {
  for(var i=0; i &lt; badwords.length; i++) {
    if(s.indexof(badwords[i]) &gt;= 0) return true;
  }
  return false;
}

function validIdentifier(s) {
  //是否为空
  if(s === &quot;&quot;) return false;
  //至少两个字符
  if(s.length === 1) return false;
  //必须以大写字母开头
  if(s.charAt(0) !== s.charAt(0).toUpperCase()) return false;
  //只允许字母和空格
  if(/[^a-z ]/i.test(s)) return false;
  //没有敏感词
  if(hasBadWords(s)) return false;
  return true;
}

document.getElementById(&quot;submitButton&quot;).addEventListener(&quot;click&quot;, function(e) {

  var identifier = document.getElementById(&quot;identifer&quot;).value;

  if(validIdentifier(identifier)) {
    return true;
  } else { console.log(&#39;false&#39;);
    e.preventDefault();
    return false;
  }
});</code></pre>
<p>从代码底部开始，你看到我写了点基本的获取页面元素的代码（没错伙计们这里我没有用 jQuery）然后监听 button 上的点击事件。拿到用户输入的用户名字段然后传给验证函数。验证的内容也就是我之前描述的那些。这里代码还没有_太_乱，不过随着之后验证逻辑的增长和页面交互逻辑的增加，代码会越来越难以维护。所以我们把这里重写为模块吧。</p>
<p>首先，创建 game.js 文件并在 index.html 中使用 script 标签引入它。然后把验证逻辑移到一个模块里。</p>
<pre><code>var gameModule = (function() {

  var badWords = [&quot;kitten&quot;,&quot;puppy&quot;,&quot;beer&quot;];

  function hasBadWords(s) {
    for(var i=0; i &lt; badwords.length; i++) {
      if(s.indexof(badwords[i]) &gt;= 0) return true;
    }
    return false;
  }

  function validIdentifier(s) {
    //是否为空
    if(s === &quot;&quot;) return false;
    //至少两个字符
    if(s.length === 1) return false;
    //必须以大写字母开头
    if(s.charAt(0) !== s.charAt(0).toUpperCase()) return false;
    //只允许字母和空格
    if(/[^a-z ]/i.test(s)) return false;
    //没有敏感词
    if(hasBadWords(s)) return false;
    return true;
  }

  return {
    valid:validIdentifier
  }

}());</code></pre>
<p>现在的代码和之前相比没有翻天覆地的差别，只不过是被封装成了一个有一个 <code>valid</code> 接口的 <code>gameModule</code> 变量。接下来我们来看看 app.js 文件。</p>
<pre><code>document.getElementById(&quot;submitButton&quot;).addEventListener(&quot;click&quot;, function(e) {

  var identifier = document.getElementById(&quot;identifer&quot;).value;

  if(gameModule.valid(identifier)) {
    return true;
  } else { console.log(&#39;false&#39;);
    e.preventDefault();
    return false;
  }
});</code></pre>
<p>看看我们的 DOM 监听函数里少了多少代码。所有的验证逻辑（两个函数和一个敏感词列表）被安全地移到了模块里后，这里的代码就更好维护了。如果你的编辑器支持，你在此处还能有模块方法名的代码补全。</p>
<p>模块化不是什么高深的东西，但它使我们的代码_更干净_，<em>更简单</em> ，这绝对是件好事。</p>
<h2 id="代码检验linting">代码检验(Linting)</h2>
<p>简单给初闻者解释下，代码检验表示使用最佳实践和一些避免出错的规则对代码进行检查。很高大上对不对？这么好的东西，我以前却以为只有挑剔过头的开发者才会考虑这个。当然了，我期望自己写出超棒的代码，但我也需要腾出时间玩游戏。就算我的代码够不上某些高大上的完美标准，但它能好好工作我就能满意了。</p>
<p>然而…</p>
<p>记不记得你有多少次重命名了个函数然后提醒自己之后一定会改？</p>
<p>记不记得你有多少次创建了个有两个形参的函数，其实最后只用了一个？</p>
<p>记不记得你有多少次写过多少蠢代码？我说的是那些根本不能工作的，类似我最爱的 <code>fuction</code> 和 <code>functon</code>。</p>
<p>代码检验就是这时候站出来帮你的！除了我之外大家都知道，代码检验不只有风格的最佳实践，还包含语法和基本的逻辑检验。还有一个让我从“等我有时间一定或做的” 跳到“我会虔诚地遵循它” 的原因，那就是几乎所有现代编辑器都支持此功能。我目前用的编辑器（ Sublime, Brackets 和 Visual Studio Code）都支持代码实时检验和反馈。</p>
<p>举个例子，以下是 Visual Studio Code 对我一段很挫的代码的提示。当然了，我是故意写得很挫的。</p>
<div class="figure">
<img src="http://ww4.sinaimg.cn/large/9b5c8bd8jw1f0zupgeoxdj20m80d1q40.jpg">

</div>
<p>Visual Studio Code 代码检验。</p>
<p>上图中，你能看到 Visual Studio Code <strike>抱怨</strike>我代码中的几个错误。Visual Studio Code 的代码检验器，和大多数检验器一样，可配置你关心的检验规则以及对其中“错误”（必须修正）和“警告”(别偷懒啊，总要修复的)的定义。</p>
<p>如果你不想安装任何东西，也不想折腾编辑器，另一种好方法是使用<a href="http://jshint.com" target="_blank" rel="external">JSHint.com</a>在线检验代码。JSHint 差不多是最流行的检验器，它基于另一个检验器 JSLint (谁说它们长得像来着？)。JSHint 的诞生一部分原因是由于 JSLint 太过严格。你可以直接在编辑器里或是通过命令行使用 JSHint，最简单的体验方法是在它的网站上试试。</p>
<div class="figure">
<img src="http://ww1.sinaimg.cn/large/9b5c8bd8jw1f0zuppot76j20m804w0t8.jpg">

</div>
<p>JSHint 网站。</p>
<p>乍看可能不太明显，其实左边是在一个在线代码编辑器。右边的是一份对左边代码的检验报告。要看到检验效果，最简单方式是在代码里随便写错点什么。我这里把 <code>main</code> 函数名改成了 <code>main2</code>。</p>
<pre><code>function main2() {
  return &#39;Hello, World!&#39;;
}

main();</code></pre>
<p>马上，网页就对此给我报了两个错误。注意了，这并不是语法错误。代码在语法上是完全没问题的，但是 JSHint 发现了你可能忽视了的问题所在（当然了，这里代码只有5行，但想象下一个大文件里函数定义和调用之间隔了好多行的时候）。</p>
<div class="figure">
<img src="http://ww4.sinaimg.cn/large/9b5c8bd8jw1f0zuq1qvjvj209t070wei.jpg">

</div>
<p>JSHint 错误。</p>
<p>来个更真实的例子如何？以下的代码（嗯现在我_是_用了 jQuery），我写了点简单的 JavaScript 做表单验证。都是些鸡毛蒜皮的东西，不过今天几乎一半的 JavaScript 代码做的都是这些事（哦哦当然还有创建弹出框然后问你要不要“赞”这个网站。真特么爱死这些了）。这些代码可以在 demo_jshint 文件夹的 app_orig.js 中找到。</p>
<pre><code>function validAge(x) {
  return $.isNumeric(x) &amp;&amp; x &gt;= 1;
}

function invalidEmail(e) {
  return e.indexOf(&quot;@&quot;) == -1;
}

$(document).ready(function() {

  $(&quot;#saveForm&quot;).on(&quot;submit&quot;, function(e) {
    e.preventDefault();

    var name = $(&quot;#name&quot;).val();
    var age = $(&quot;#age&quot;).val();
    var email = $(&quot;#email&quot;).val();

    badForm = false;

    if(name == &quot;&quot;) badForm = true;
    if(age == &quot;&quot;) badForm = true;
    if(!$.isNumeric(age) || age &lt;= 0) badForm = true;
    if(email == &quot;&quot;) badForm = true;
    if(invalidemail(email)) badForm = true;

    console.log(badform);
    if (badform) alert(&#39;Bad Form!&#39;);
    else {
      // do something on good
    }
  });
});</code></pre>
<p>开始是两个辅助验证的函数（对年龄和 email）。然后是 <code>document.ready</code> 代码块里对表单提交的监听。获取表单中三个字段的值，检查是否为空（或是无效输入），若表单无效就弹出警告，否则继续（在我们的例子里，什么也没发生，表单没变化）。</p>
<p>扔到 JSHint 上看看发生了啥：</p>
<div class="figure">
<img src="http://ww3.sinaimg.cn/large/9b5c8bd8jw1f0zuqkjapdj20b90s5q3x.jpg">

</div>
<p>JSHint 对我们样例代码的报错。</p>
<p>哇塞好多东西！看起来是类似的问题出现了多次。我开始用检验器的时候这种情况挺常见。我并没有弄出很多种错误，而仅仅是同种错误的重复。第一个非常简单—— 检查相等时使用三等号替代双等号。简单来说就是用更严格的标准检测空字符串。先修复这个(demo_jshint/app_mod1.js)。</p>
<pre><code>function validAge(x) {
  return $.isNumeric(x) &amp;&amp; x &gt;= 1;
}

function invalidEmail(e) {
  return e.indexOf(&quot;@&quot;) == -1;
}

$(document).ready(function() {

  $(&quot;#saveForm&quot;).on(&quot;submit&quot;, function(e) {
    e.preventDefault();

    var name = $(&quot;#name&quot;).val();
    var age = $(&quot;#age&quot;).val();
    var email = $(&quot;#email&quot;).val();

    badForm = false;

    if(name == &quot;&quot;) badForm = true;
    if(age == &quot;&quot;) badForm = true;
    if(!$.isNumeric(age) || age &lt;= 0) badForm = true;
    if(email == &quot;&quot;) badForm = true;
    if(invalidemail(email)) badForm = true;

    console.log(badform);
    if (badform) alert(&#39;Bad Form!&#39;);
    else {
      // do something on good
    }
  });
});</code></pre>
<p>JSHint 报告变成了:</p>
<div class="figure">
<img src="http://ww2.sinaimg.cn/large/9b5c8bd8jw1f0zur1n2y4j20am0lb0t8.jpg">

</div>
<p>JSHint 对我们样例代码的报错。</p>
<p>算是解决了。下一个错误类型是“未声明变量”。看着有点诡异。如果使用 jQuery 的话，你知道<code>$</code> 是存在的。<code>badForm</code> 的问题就更简单点——我忘记用 <code>var</code> 声明它了。那我们怎么解决<code>$</code>的问题呢？JSHint 提供了对代码规则检验方法的配置。在代码里加上一个注释以后，我们告诉 JSHint <code>$</code> 变量是作为全局变量可以放心使用。接下来我们补上这个注释，并且加上丢失的 <code>var</code> 声明（demo_jshint/app_mod2.js）。</p>
<pre><code>/* globals $ */
function validAge(x) {
  return $.isNumeric(x) &amp;&amp; x &gt;= 1;
}

function invalidEmail(e) {
  return e.indexOf(&quot;@&quot;) == -1;
}

$(document).ready(function() {

  $(&quot;#saveForm&quot;).on(&quot;submit&quot;, function(e) {
    e.preventDefault();

    var name = $(&quot;#name&quot;).val();
    var age = $(&quot;#age&quot;).val();
    var email = $(&quot;#email&quot;).val();

    var badForm = false;

    if(name == &quot;&quot;) badForm = true;
    if(age == &quot;&quot;) badForm = true;
    if(!$.isNumeric(age) || age &lt;= 0) badForm = true;
    if(email == &quot;&quot;) badForm = true;
    if(invalidemail(email)) badForm = true;

    console.log(badform);
    if (badform) alert(&#39;Bad Form!&#39;);
    else {
      // do something on good
    }
  });
});</code></pre>
<p>JSHint 报告变成了:</p>
<div class="figure">
<img src="http://ww4.sinaimg.cn/large/9b5c8bd8jw1f0zurgx350j209204gwed.jpg">

</div>
<p>JSHint 对我们样例代码的报错。</p>
<p>哇哦！就快结束了！最后一个问题恰好的展示了 JSHint 在提示最佳代码风格实践和指出错误以外的用途。这里我忘了写过一个处理年龄验证的函数。你看我创建了 <code>validAge</code>，但是在表单验证代码区域没使用它。也许我该删了这个函数 —— 反正也只有一行，但我觉得留下来更好——以免以后验证逻辑越来越复杂。以下就是完整的代码了(demo_jshint/app.js)。</p>
<pre><code>/* globals $ */
function validAge(x) {
  return $.isNumeric(x) &amp;&amp; x &gt;= 1;
}

function invalidEmail(e) {
  return e.indexOf(&quot;@&quot;) == -1;
}

$(document).ready(function() {

  $(&quot;#saveForm&quot;).on(&quot;submit&quot;, function(e) {
    e.preventDefault();

    var name = $(&quot;#name&quot;).val();
    var age = $(&quot;#age&quot;).val();
    var email = $(&quot;#email&quot;).val();

    var badForm = false;

    if(name === &quot;&quot;) badForm = true;
    if(age === &quot;&quot;) badForm = true;
    if(!validAge(age)) badForm = true;
    if(email === &quot;&quot;) badForm = true;
    if(invalidEmail(email)) badForm = true;

    console.log(badForm);
    if(badForm) alert(&#39;Bad Form!&#39;);
    else {
      //do something on good
    }
  });
});</code></pre>
<p>最终版本“通过”了 JSHint 的测试。虽然实际上并不完美。注意到我两个检验函数一个叫 <code>validAge</code> 一个叫 <code>invalidEmail</code> ，一个返回肯定一个返回否定。更好的做法是保持语义一致性。还有每次这个验证函数运行的时候，jQuery 需要获取DOM 中的三个元素，其实它们只需要被获取一次。我应该在表单提交回调函数外创建这些变量，每次验证的时候重复使用。如我所言，JSHint 不是完美的，但代码最终版本绝对比第一版要好很多，我的修改也没有花多少时间。</p>
<p>不同用途的代码检验器有 JavaScript(<a href="http://www.jslint.com" target="_blank" rel="external">JSLint</a>和 <a href="http://www.jshint.com" target="_blank" rel="external">JSHint</a>)，HTML(<a href="http://htmlhint.com/" target="_blank" rel="external">HTMLHint</a>和 <a href="https://validator.w3.org/" target="_blank" rel="external">W3C Validator</a>)和CSS (<a href="http://csslint.net/" target="_blank" rel="external">CSSLint</a>)。如果编辑器支持，而你还是个“前端潮人”，还可以用 Grunt 和 Gulp 工具对这些进行自动化。</p>
<h2 id="测试">测试</h2>
<p>我不写测试。</p>
<p>没错，我话就撂这儿了。世界不会停止转动。不过，在开发客户端项目时，我其实_是_写测试的（好啦实际是我_尝试_去写测试），但是我的主要工作写博客，和各种功能的样例代码。这些代码只为验证概念而非投入生产环境使用，因此不写测试没什么大不了的。其实，在我成为布道者和不做“实际”工作之前，我也是敢这么放话的，不写测试的借口和不使用代码检验器一样。不过一些给检验器加分的因素放在测试上也很好用。</p>
<p>首先——许多编辑器会为你自动生成测试代码。例如在 Brackets 中，可以使用 <a href="https://github.com/dschaffe/brackets-xunit" target="_blank" rel="external">xunit</a> 扩展。借助它你只要在 JavaScript 文件上调出右键菜单就能生成测试代码（支持多种流行测试框架格式）。</p>
<div class="figure">
<img src="http://ww1.sinaimg.cn/large/9b5c8bd8jw1f0zus4jz8sj20m80hymy4.jpg">

</div>
<p>xunit 创建的测试。</p>
<p>该扩展基于现存代码去生成测试代码。生成的测试代码只是个模板，你需要自己去填写具体内容，这避免了一些无聊的重复劳动。</p>
<div class="figure">
<img src="http://ww2.sinaimg.cn/large/9b5c8bd8jw1f0zuthjkyxj20m80hxjtd.jpg">

</div>
<p>xunit 创建的测试。</p>
<p>完成了测试细节的填充后，该扩展会帮你自动执行测试。都到了这份上了，不写代码基本上就只是懒了。</p>
<div class="figure">
<img src="http://ww2.sinaimg.cn/large/9b5c8bd8jw1f0zutuzzmij20m80l50we.jpg">

</div>
<p>测试报告。</p>
<p>你也许听过 TDD (测试驱动开发)。说的是在写具体代码之前先把单元测试写好。本质上是测试主导你的开发。写下代码并看它通过测试的时候，这些通过的测试能让你确保自己没有走错路。</p>
<p>我觉得这个想法不错，不过让所有人都这么做的确是有点困难。我们干脆先从简单点的开始。想象下你手上有一些据你所知功能正常的代码，然后你发现了个 bug。在修复它之前，你可以创建一个测试去检验出此 bug，修复 bug，然后跑跑测试，确保此后相同的 bug _不会_再次出现。如我所言，这不是最理想的实践，但也能算是朝着以后在开发所有阶段实践测试的一个过渡。</p>
<p>我用我写的一个精简数字显示的函数作为 bug 的例子。109203可以精简为109K。更大的例如2190290这样的数可精简为2M。看下代码然后我会说说 bug。</p>
<pre><code>var formatterModule = (function() {

  function fnum(x) {
    if(isNaN(x)) return x;

    if(x &lt; 9999) {
      return x;
    }

    if(x &lt; 1000000) {
      return Math.round(x/1000) + &quot;K&quot;;
    }
    if(x &lt; 10000000) {
      return (x/1000000).toFixed(2) + &quot;M&quot;;
    }

    if(x &lt; 1000000000) {
      return Math.round((x/1000000)) + &quot;M&quot;;
    }

    if(x &lt; 1000000000000) {
      return Math.round((x/1000000000)) + &quot;B&quot;;
    }

    return &quot;1T+&quot;;
  }

  return {
    fnum:fnum
  }

}());</code></pre>
<p>你马上看出问题了？还是放弃了？当输入9999的时候，会返回10K。尽管此精简可能有用，但代码对于所有小于10K的数字应该一视同仁，都返回它们的原始值。这个修正很简单，我们正好当作添加测试的机会。关于测试框架我选择 <a href="http://jasmine.github.io/" target="_blank" rel="external">Jasmine</a>。Jasmine 的测试易于编写和运行。最快的使用方法是下载这个库。解压后你会发现 SpecRunner.html 文件。此文件负责引入我们的代码，引入测试，而后运行测试和生成漂亮的报告。它依赖于压缩包中的 lib 文件夹，你一开始可以把 SpecRunner 和 lib 文件夹一起复制到你的服务器某处。</p>
<p>打开 SpecRunner.html 你会看到。</p>
<pre><code>&lt;!-- include source files here... --&gt;
script tags here...

&lt;!-- include spec files here... --&gt;
more script tags here...</code></pre>
<p>在第一个注释下你需要删除已有的代码然后加上一个 script 标签引入你的代码。如果下载了此文的代码，你可以在 demo4 文件夹里找到 formatter.js 文件。之后你要加一个 script 标签引入测试代码。你可能之前没见过 Jasmine，但你看看这个测试代码，_非常_易读，新手也能懂。</p>
<pre><code>describe(&quot;It can format numbers nicely&quot;, function() {

  it(&quot;takes 9999 and returns 9999&quot;, function() {
    expect(9999).toBe(formatterModule.fnum(9999));
  });

});</code></pre>
<p>我的测试说的是当9999作为输入时应该返回9999。在浏览器里打开 SpecRunner.html 你就能看到错误报告。</p>
<div class="figure">
<img src="http://ww4.sinaimg.cn/large/9b5c8bd8jw1f0zuu5bbhaj20m80e1q61.jpg">

</div>
<p>测试失败的报告。</p>
<p>修复起来很简单。把条件里的数字从9999增到10000:</p>
<pre><code>if(x &lt; 10000) {
  return x;
}</code></pre>
<p>不论何时再跑测试你能看到一片欢乐。</p>
<div class="figure">
<img src="http://ww2.sinaimg.cn/large/9b5c8bd8jw1f0zuuh4xj8j20m804y74k.jpg">

</div>
<p>测试成功的报告。</p>
<p>你估计能想出一些相关测试完善这套测试。通常来说，积极地添加测试以覆盖你代码的各种可能使用场景没有任何不妥。关于日期和时间的牛库 <a href="http://momentjs.com/" target="_blank" rel="external">Moment.js</a>，不是我骗你，有超过五万七千多个测试。你真没看错，就是几万个。</p>
<p>JavaScript 测试框架的其他选择有 <a href="https://qunitjs.com/" target="_blank" rel="external">QUnit</a>和 <a href="http://mochajs.org/" target="_blank" rel="external">Mocha</a>。和代码检验一样，你能使用 Grunt 之类的工具自动化测试，甚至可以往全栈靠一点，使用 <a href="http://www.seleniumhq.org/" target="_blank" rel="external">Selenium</a> 测试浏览器。</p>
<h2 id="浏览器开发者工具">浏览器开发者工具</h2>
<p>我提到的最后一个工具在浏览器里——开发者工具。你能找到许多关于此的文章、演讲和视频，我亦不需赘言。在今天所说的所有内容中，这一条我认为应该是 web 开发者的<strong>必需知识</strong>。你可以写出不能用的代码，可以不是什么都懂，但起码还有开发者工具帮你找出错误所在，然后你只需要 google 一下问题就能解决了。</p>
<p>再多提一个建议，你不该把自己吊在一个浏览器的开发者工具上。几年前我在鼓捣 App Cache （没错我就是爱自虐），碰上了个只在 Chrome 下出现的问题。当时开着开发者工具，但是没啥用。我灵机一动用 Firefox 打开我的代码，使用它的工具调试，然后我<strong>立刻</strong>就发现了问题所在。Firefox 列出的关于请求的信息比 Chrome 多。我用了一次这个工具立马解决了问题（好吧其实这是胡诌的，Firefox 的确显出问题所在不过我修复问题也用了好些时间）。如果你卡在某个问题上，不如试试打开其他浏览器看看错误报告有没有多说些什么。</p>
<p>万一万一你真从没_见_过开发者工具，以下有些主流浏览器工具阅览指南和极好的详细教程。</p>
<h3 id="google-chrome">Google Chrome</h3>
<p>点击浏览器右上角的汉堡菜单图标，选择“更多工具” -&gt; “开发者工具”。也可以用键盘快捷键打开，例如在 OSX 下快捷键是 <code>CMD+SHIFT+C</code>。关于谷歌的开发者工具文档可到 <a href="https://developer.chrome.com/devtools" target="_blank" rel="external">Chrome 开发者工具纵览</a>寻找。</p>
<h3 id="mozilla-firefox">Mozilla Firefox</h3>
<p>在主菜单的“工具”栏里，选择 “Web 开发者” -&gt; “切换工具箱”。Firefox 工具栏很酷，在同一菜单下，有许多快速打开开发者工具命令。详情请见 <a href="https://developer.mozilla.org/en-US/docs/Tools" target="_blank" rel="external">Firefox 开发者工具</a></p>
<h3 id="apple-safari-传说中用来看-apple-keynotes-的浏览器">Apple Safari (传说中用来看 Apple keynotes 的浏览器)</h3>
<p>你得先开启“开发”菜单才能使用开发者工具。进入 Safari 偏好设置，选择“高级”，选中“在菜单栏中显示’开发’菜单”。然后就能从“开发菜单”里通过“显示 Web 检查器”（或者其下的其他三个菜单项）打开工具。详情见<a href="https://developer.apple.com/library/safari/documentation/AppleApplications/Conceptual/Safari_Developer_Guide/Introduction/Introduction.html" target="_blank" rel="external">关于 Safari Web 检查器</a>。</p>
<h3 id="internet-explorer">Internet Explorer</h3>
<p>点击浏览器右上角的设置按钮或按下键盘 F12键打开开发者工具。详情见<a href="https://msdn.microsoft.com/library/bg182326%28v=vs.85%29" target="_blank" rel="external">使用 F12 开发者工具</a>。</p>
<h2 id="更多学习">更多学习</h2>
<p>有时候感觉像我们这些做开发的，工作就从来没有完成的时候。你知道在这篇文章写作期间有13个新的 JavaScript 框架发布了么？讲真！以下是最后几个让你学习并且跟上潮流的建议，尽量跟上。</p>
<p>学习方面，我选择专注于 <a href="http://developer.mozilla.org" target="_blank" rel="external">Mozilla Developer Network</a>(你要是准备 google 什么，最好加上 “mdn” 作为前缀)，<a href="http://www.codeschool.com" target="_blank" rel="external">CodeSchool</a> (一个商业的编程学习视频网站，内容还不错), 和 <a href="https://www.khanacademy.org/" target="_blank" rel="external">Khan Academy</a>。特别要说下 Mozilla 开发者网络(MDN)，多年来我以为它只有 Netscape/Firefox 知识而忽视了它，蠢死了我。</p>
<p>另一建议是多读代码！你们中许多人都用过 jQuery，但你有打开它的源码看看它的实现么？读别人的代码是一个很好的学习技巧的和方法的途径。还有一个听起来可能有点恐怖，不过我真的强烈建议你分享自己的代码。不光是多了双雪亮的眼睛（或者成千上万双）来审视你的代码，你也许也能帮助其他的人。几年前我看见一个初级程序员分享他的代码，虽然里面有些菜鸟级的错误，但也有一些超棒的技巧。</p>
<p>为获取最新资讯，我订阅了 <a href="http://cooperpress.com" target="_blank" rel="external">Cooper Press</a> 发行的一系列周报。有 HTML 的，JavaScript 的，Node 的和移动开发(Mobile) 和其他一系列。信息可能会淹没你，尽你所能阅读就行。当我看到某个新发布的工具有我_并不_需要的 XXX 功能的时候，我也不用去学它。我只要记住“诶哟有个工具有 XXX 功能”，以后我需要这个功能的时候再去学习。</p>
]]></content>
    
    <summary type="html">
    
      成为一个更好的 Javascript 开发者。代码组织，Linting，测试。
    
    </summary>
    
      <category term="前端" scheme="http://hikerpig.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Javascript" scheme="http://hikerpig.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Test FileReader methods</title>
    <link href="http://hikerpig.github.io/2015/07/11/2015-07-11-Test-FileReader-methods/"/>
    <id>http://hikerpig.github.io/2015/07/11/2015-07-11-Test-FileReader-methods/</id>
    <published>2015-07-11T06:46:58.000Z</published>
    <updated>2015-07-11T06:46:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近一个需求，需要用浏览器读取图片在前端缩略显示并且根据文件信息排序。</p>
<p>最近jsperf挂了, V2还在开发不太好用, 现在这里存个档。</p>
<h2 id="使用benchmark.js测试性能">使用Benchmark.js测试性能</h2>
<p>写一个小页面测试两种方法速度:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> suite = <span class="literal">null</span>;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">readFile</span>(<span class="params">file, method, deferred</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> fr = <span class="keyword">new</span> FileReader();</div><div class="line">    fr[method](file);</div><div class="line">    fr.onloadend = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      deferred.resolve();</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">runSuite</span>(<span class="params">file</span>) </span>&#123;</div><div class="line">    suite = <span class="keyword">new</span> Benchmark.Suite(&#123;</div><div class="line">      name: <span class="string">'FileReader perf'</span></div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    suite</div><div class="line">      .add(<span class="string">'FileReader.readAsArrayBuffer'</span>, &#123;</div><div class="line">        defer: <span class="literal">true</span>,</div><div class="line">        fn: <span class="function"><span class="keyword">function</span>(<span class="params">deferred</span>) </span>&#123;</div><div class="line">          readFile(file, <span class="string">'readAsArrayBuffer'</span>, deferred);</div><div class="line">        &#125;</div><div class="line">      &#125;)</div><div class="line">      .add(<span class="string">'FileReader.readAsDataURL'</span>, &#123;</div><div class="line">        defer: <span class="literal">true</span>,</div><div class="line">        fn: <span class="function"><span class="keyword">function</span>(<span class="params">deferred</span>) </span>&#123;</div><div class="line">          readFile(file, <span class="string">'readAsDataURL'</span>, deferred);</div><div class="line">        &#125;</div><div class="line">      &#125;)</div><div class="line">      .on(<span class="string">'complete'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'completed'</span>);</div><div class="line">        <span class="keyword">this</span>.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">bench</span>) </span>&#123;</div><div class="line">          <span class="built_in">console</span>.log(<span class="string">'Bench: '</span>, bench.name);</div><div class="line">          <span class="built_in">console</span>.log(<span class="string">'Hz: '</span>, bench.hz);</div><div class="line">        &#125;);</div><div class="line">      &#125;)</div><div class="line">      .run();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">onFileChage</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> file = e.target.files[<span class="number">0</span>];</div><div class="line">    runSuite(file);</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'fileinput'</span>).addEventListener(<span class="string">'change'</span>, onFileChage);</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<h2 id="结果">结果</h2>
<p>在我的MBP上测试:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">== Firefox 39.0 ==</div><div class="line"></div><div class="line">&quot;Bench: &quot; &quot;FileReader.readAsArrayBuffer&quot;</div><div class="line">&quot;Hz: &quot; 2852.075550774104</div><div class="line">&quot;Bench: &quot; &quot;FileReader.readAsDataURL&quot;</div><div class="line">&quot;Hz: &quot; 967.485735798381</div><div class="line"></div><div class="line">== Chrome 43.0 ==</div><div class="line"></div><div class="line">Bench:  FileReader.readAsArrayBuffer</div><div class="line">Hz:  221.9625071172418</div><div class="line">Bench:  FileReader.readAsDataURL</div><div class="line">Hz:  206.2738933937363</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      测试FileReader两个方法的速度
    
    </summary>
    
      <category term="前端" scheme="http://hikerpig.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Test" scheme="http://hikerpig.github.io/tags/Test/"/>
    
  </entry>
  
  <entry>
    <title>使用Coffeetags在VIM中显示coffee文件代码结构</title>
    <link href="http://hikerpig.github.io/2015/07/02/2015-01-28-%E4%BD%BF%E7%94%A8Coffeetags%E5%9C%A8VIM%E4%B8%AD%E6%98%BE%E7%A4%BAcoffee%E6%96%87%E4%BB%B6%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%84/"/>
    <id>http://hikerpig.github.io/2015/07/02/2015-01-28-使用Coffeetags在VIM中显示coffee文件代码结构/</id>
    <published>2015-07-02T02:56:18.000Z</published>
    <updated>2015-07-02T02:56:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>VIM的插件<a href="https://github.com/majutsushi/tagbar" target="_blank" rel="external">Tagbar</a>可以在侧边栏显示当前代码结构，不过Tagbar使用的ctags不支持coffeescript。</p>
<p>不过我们可以使用ruby版本的<a href="https://github.com/lukaszkorecki/CoffeeTags" target="_blank" rel="external">CoffeeTags</a>生成tags。</p>
<p>首先:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ [sudo] gem install CoffeeTags</div></pre></td></tr></table></figure>
<p>然后只要在~/.vimrc里加上下面几行配置。(参考<a href="https://github.com/lukaszkorecki/CoffeeTags" target="_blank" rel="external">CoffeeTags项目自带的vim插件</a>)</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> <span class="built_in">executable</span>(<span class="string">'coffeetags'</span>)</div><div class="line">  <span class="keyword">let</span> <span class="variable">g:tagbar_type_coffee</span> = &#123;</div><div class="line">    \ <span class="string">'ctagsbin'</span> : <span class="string">'coffeetags'</span>,</div><div class="line">    \ <span class="string">'ctagsargs'</span> : <span class="string">''</span>,</div><div class="line">    \ <span class="string">'kinds'</span> : [</div><div class="line">      \ <span class="string">'c:classes'</span>,</div><div class="line">      \ <span class="string">'m:methods'</span>,</div><div class="line">      \ <span class="string">'a:attributes'</span>,</div><div class="line">      \ <span class="string">'f:functions'</span>,</div><div class="line">      \ <span class="string">'v:variables'</span>,</div><div class="line">      \ <span class="string">'p:prototypes'</span>,</div><div class="line">      \ <span class="string">'o:object'</span>,</div><div class="line">      \ <span class="string">'b:blocks'</span></div><div class="line">    \ ],</div><div class="line">    \ <span class="string">'sro'</span> : <span class="string">"."</span>,</div><div class="line">    \ <span class="string">'kind2scope'</span> : &#123;</div><div class="line">      \ <span class="string">'f'</span> : <span class="string">'function'</span>,</div><div class="line">      \ <span class="string">'o'</span> : <span class="string">'object'</span>,</div><div class="line">    \ &#125;</div><div class="line">  \ &#125;</div><div class="line"><span class="keyword">endif</span></div></pre></td></tr></table></figure>
<p>就可以浏览清晰的coffee结构啦。</p>
<img src="http://images-hikerpig.qiniudn.com/image/coffeetags_tagbar.jpg" alt="undefined">
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;VIM的插件&lt;a href=&quot;https://github.com/majutsushi/tagbar&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Tagbar&lt;/a&gt;可以在侧边栏显示当前代码结构，不过Tagbar使用的ctags不支持coffeescr
    
    </summary>
    
    
      <category term="Coffeescript" scheme="http://hikerpig.github.io/tags/Coffeescript/"/>
    
      <category term="Vim" scheme="http://hikerpig.github.io/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>使用python编写vim脚本 对齐赋值语句</title>
    <link href="http://hikerpig.github.io/2015/05/21/2015-04-16-Align-your-assignment-sentence-using-Python-in-Vim/"/>
    <id>http://hikerpig.github.io/2015/05/21/2015-04-16-Align-your-assignment-sentence-using-Python-in-Vim/</id>
    <published>2015-05-21T02:20:57.000Z</published>
    <updated>2015-05-21T02:20:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>JSer们，不管是前后端，文件头的dependency部分堆积了一群犬牙交错的require语句的时候，内心有没有过一个冲动把它们全都捋一遍全对齐了！各种foramtter给平日的眼净心静贡献了不少力量，不过我印象中ST,VIM,Webstorm好像都没有这么个插件，干脆自己写一个吧。</p>
<h3 id="需求">需求</h3>
<ul>
<li>以等号对齐require语句</li>
</ul>
<h3 id="附加需求">附加需求</h3>
<ul>
<li>以等号或冒号对齐语句</li>
</ul>
<p>平时VIM用的比较多，先下手这个。</p>
<p>VIM有自己强大的DSL插件语言vimscript， 不过各种东西的学习曲线真的是… ( %&gt;_&lt;% )，折腾了一下发现最关键的正则模块我没搞清楚。</p>
<p>想想这个需求很简单，也不需要跟编辑器做很多交互，所以还是用一个顺手的语言实现吧。</p>
<p>VIM具有lua, tcl, perl, ruby, python的编程接口，我就决定用python了，具体接口内容可以看文档:</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">:<span class="keyword">help</span> if_pyth.txt</div></pre></td></tr></table></figure>
<p>比较关键的几个对象是:</p>
<ul>
<li><code>vim.current.buffer</code> 当前缓冲区(也可以理解是存在内存里的当前编辑文件内容)</li>
<li><code>vim.current.buffer.mark</code> 获取当前缓冲区的某个mark信息, 下面我使用的mark(‘&lt;’)和mark(‘&gt;’)是比较特殊的,上一次visual selection的起止位置</li>
<li><code>vim.current.window.cursor</code> 当前窗口下输入光标所在位置</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> exists(<span class="string">"g:loaded_require_formatter"</span>)</div><div class="line">  finish</div><div class="line">endif</div><div class="line">let g:loaded_require_formatter = <span class="number">1</span></div><div class="line"></div><div class="line"><span class="string">"Function: :format</span></div><div class="line"><span class="string">"</span>Desc: align the require statement</div><div class="line"><span class="string">"</span></div><div class="line"><span class="string">func! s:format()</span></div><div class="line"><span class="string">python &lt;&lt; EOF</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">import vim</span></div><div class="line"><span class="string">import re</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string"># prepare</span></div><div class="line"><span class="string">buffer = vim.current.buffer</span></div><div class="line"><span class="string">require_pattern = re.compile(r'(?P&lt;left&gt;\s*[\w\d_]+\s?)=\s*require(?P&lt;right&gt;[\w\d\"\'\s\(\)\-\/]+)')</span></div><div class="line"><span class="string">assign_pattern = re.compile(r'(?P&lt;left&gt;\s*[\w\d_]+\s?)[=:]\s*(?P&lt;right&gt;[\w\d\"\'\s\(\)\-\/]+)')</span></div><div class="line"><span class="string">g_pattern = require_pattern</span></div><div class="line"><span class="string">g_matches = []</span></div><div class="line"><span class="string">g_seperator = '='</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">vst = 0</span></div><div class="line"><span class="string">vend = 0</span></div><div class="line"><span class="string">start_mark = buffer.mark('&lt;')</span></div><div class="line"><span class="string">end_mark = buffer.mark('&gt;')</span></div><div class="line"><span class="string">if start_mark:</span></div><div class="line"><span class="string">  vst = start_mark[0] - 1</span></div><div class="line"><span class="string">if end_mark:</span></div><div class="line"><span class="string">  vst = end_mark[0]</span></div><div class="line"><span class="string">cursor = vim.current.window.cursor</span></div><div class="line"><span class="string">cend = cursor[0]</span></div><div class="line"><span class="string">lines = buffer[0:]</span></div><div class="line"><span class="string">g_start_line = 0</span></div><div class="line"><span class="string">if vst and vend:</span></div><div class="line"><span class="string">  if vend == cend:</span></div><div class="line"><span class="string">    lines = buffer[vst:vend]</span></div><div class="line"><span class="string">    g_start_line = vst</span></div><div class="line"><span class="string">    g_pattern = assign_pattern</span></div><div class="line"><span class="string">    g_seperator = re.compile('[=:]')</span></div><div class="line"><span class="string">    #print 'vstart is', vst</span></div><div class="line"><span class="string">    #print 'vend is', vend</span></div><div class="line"><span class="string">    #print lines</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">def get_formated_line(text, left_len, seperator='='):</span></div><div class="line"><span class="string">    "</span><span class="string">""</span></div><div class="line">    :text: &#123;str&#125;</div><div class="line">    :left_len: &#123;int&#125;</div><div class="line">    :returns: &#123;str&#125;</div><div class="line"></div><div class="line">    <span class="string">"""</span></div><div class="line"><span class="string">    if hasattr(seperator, 'match'):</span></div><div class="line"><span class="string">      match = seperator.search(text)</span></div><div class="line"><span class="string">      if match:</span></div><div class="line"><span class="string">        epos = match.start()</span></div><div class="line"><span class="string">      else:</span></div><div class="line"><span class="string">        return text</span></div><div class="line"><span class="string">    else:</span></div><div class="line"><span class="string">      epos = text.find(seperator)</span></div><div class="line"><span class="string">    left_str = text[0:epos]</span></div><div class="line"><span class="string">    remained = text[epos:]</span></div><div class="line"><span class="string">    short_of_len = left_len - len(left_str)</span></div><div class="line"><span class="string">    if short_of_len &gt; 0:</span></div><div class="line"><span class="string">        to_append = []</span></div><div class="line"><span class="string">        for i in range(0, short_of_len):</span></div><div class="line"><span class="string">            to_append.append(' ')</span></div><div class="line"><span class="string">        to_append = ''.join(to_append)</span></div><div class="line"><span class="string">        text = left_str + to_append + remained</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">    return text</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">def start(lines):</span></div><div class="line"><span class="string">    max_left_len = 0</span></div><div class="line"><span class="string">    matched_linenos = []</span></div><div class="line"><span class="string">    for i, line in enumerate(lines):</span></div><div class="line"><span class="string">        matches = g_pattern.match(line)</span></div><div class="line"><span class="string">        if matches:</span></div><div class="line"><span class="string">            matched_linenos.append(i)</span></div><div class="line"><span class="string">            g_matches.append(matches)</span></div><div class="line"><span class="string">            gp_dict = matches.groupdict()</span></div><div class="line"><span class="string">            left = gp_dict.get('left')</span></div><div class="line"><span class="string">            if not left[-1] == ' ':</span></div><div class="line"><span class="string">              left += ' '</span></div><div class="line"><span class="string">            left_len = len(left)</span></div><div class="line"><span class="string">            max_left_len = max(max_left_len, left_len)</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">    for i in matched_linenos:</span></div><div class="line"><span class="string">        line = lines[i]</span></div><div class="line"><span class="string">        fl = get_formated_line(line, max_left_len, seperator=g_seperator)</span></div><div class="line"><span class="string">        #print "formed_line is ", fl</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">        # replace the line</span></div><div class="line"><span class="string">        real_lineno = i + g_start_line</span></div><div class="line"><span class="string">        del buffer[real_lineno]</span></div><div class="line"><span class="string">        buffer.append(fl, real_lineno)</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string"># start</span></div><div class="line"><span class="string">try:</span></div><div class="line"><span class="string">  start(lines)</span></div><div class="line"><span class="string">except Exception as exp:</span></div><div class="line"><span class="string">  print exp</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">EOF</span></div><div class="line"><span class="string">endfunc</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">" change this map if it conflicts with others</span></div><div class="line"><span class="string">map &lt;C-e&gt; :echo &lt;SID&gt;format()&lt;CR&gt;</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">" 处于visual模式的时候会报range not allowed的错,</span></div><div class="line"><span class="string">" vmap的时候先退出v模式"</span></div><div class="line"><span class="string">vmap &lt;C-e&gt; &lt;Esc&gt;:echo &lt;SID&gt;format()&lt;CR&gt;</span></div></pre></td></tr></table></figure>
<p>这样在normal和visual模式下都可以轻松对齐了。</p>
<h2 id="参考文章">参考文章</h2>
<ul>
<li><a href="http://hi.baidu.com/bluebanboom/item/439c23626237072769105b29" target="_blank" rel="external">Python in Vim</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JSer们，不管是前后端，文件头的dependency部分堆积了一群犬牙交错的require语句的时候，内心有没有过一个冲动把它们全都捋一遍全对齐了！各种foramtter给平日的眼净心静贡献了不少力量，不过我印象中ST,VIM,Webstorm好像都没有这么个插件，干脆自
    
    </summary>
    
      <category term="玩具" scheme="http://hikerpig.github.io/categories/%E7%8E%A9%E5%85%B7/"/>
    
    
      <category term="VIM" scheme="http://hikerpig.github.io/tags/VIM/"/>
    
  </entry>
  
  <entry>
    <title>用Tagbar在VIM中查看scss文件代码结构</title>
    <link href="http://hikerpig.github.io/2015/02/05/2015-02-05-show-scss-code-outline-with-Tagbar/"/>
    <id>http://hikerpig.github.io/2015/02/05/2015-02-05-show-scss-code-outline-with-Tagbar/</id>
    <published>2015-02-05T09:27:37.000Z</published>
    <updated>2015-02-05T09:27:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>在<code>~/.ctags</code>里加上这几行定义下scss文件的规则:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">--langdef=scss</div><div class="line">--langmap=scss:.scss</div><div class="line">--regex-scss=/^[ \t]*([^\t &#123;&#125;][^&#123;&#125;]&#123;1,100&#125;)(\t| )*\&#123;/| \1/d,definition/</div><div class="line">--regex-scss=/^[@]mixin ([^ ()]+).*/\1/m,mixin/</div><div class="line">--regex-scss=/^[@]function ([^ ()]+).*/\1/f,function/&#125;</div><div class="line">--regex-scss=/^\$([A-Za-z0-9._-]+)\s?:.*/\1/v,variable/&#125;</div></pre></td></tr></table></figure>
<p>在<code>~/.vimrc</code>里加上这几行(前提是VIM有安装Tagbar插件哦)</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> <span class="variable">g:tagbar_type_scss</span> = &#123;</div><div class="line">  \ <span class="string">'ctagsbin'</span>     : <span class="string">'ctags'</span>,</div><div class="line">  \ <span class="string">'ctagstype'</span>     : <span class="string">'scss'</span>,</div><div class="line">  \ <span class="string">'kinds'</span>     : [</div><div class="line">      \ <span class="string">'d:definition'</span>,</div><div class="line">      \ <span class="string">'f:functions'</span>,</div><div class="line">      \ <span class="string">'m:mixins'</span>,</div><div class="line">      \ <span class="string">'v:variables'</span>,</div><div class="line">  \ ],</div><div class="line">\ &#125;</div></pre></td></tr></table></figure>
<p>写正则真是越来越好玩了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在&lt;code&gt;~/.ctags&lt;/code&gt;里加上这几行定义下scss文件的规则:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div
    
    </summary>
    
      <category term="前端" scheme="http://hikerpig.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="VIM" scheme="http://hikerpig.github.io/tags/VIM/"/>
    
      <category term="CSS" scheme="http://hikerpig.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>从今开始用Casperjs来暴力签到吧</title>
    <link href="http://hikerpig.github.io/2015/02/05/2014-04-02-%E4%BB%8E%E4%BB%8A%E5%BC%80%E5%A7%8B%E7%94%A8Casperjs%E6%9D%A5%E6%9A%B4%E5%8A%9B%E7%AD%BE%E5%88%B0%E5%90%A7/"/>
    <id>http://hikerpig.github.io/2015/02/05/2014-04-02-从今开始用Casperjs来暴力签到吧/</id>
    <published>2015-02-05T04:08:06.000Z</published>
    <updated>2015-02-05T04:08:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>前几天室友捶头顿足的对我吼：“杀千刀的今天竟然忘记虾米签到了啊啊啊！！！老娘累计了一百多天！！！！还要花钱去买补签卡啊尼玛！！！！！”</p>
<p>团队项目里最近开始使用的测试框架<a href="" title="http://www.casperjs.org">Casperjs</a>，有了这个基于PhantomJS的Headless UI测试工具包，哼哼哼，机器手点点点。</p>
<p>俗话说，有补签的签到都是耍流氓，没补签的都是暴君。来来来！兄弟姐妹们！黑喂狗！切克闹！我们的目标是！</p>
<h2 id="消灭虾米的罪恶补签卡">消灭虾米的罪恶补签卡</h2>
<p>问问谷歌，找到<a href="" title="http://panyongzheng.iteye.com/blog/1947900">一篇总结用法的文章</a>，把里面提到的沪江自动签到例子看看，只要稍加观察虾米网站的主页以稍加改写，困扰小伙伴们多日的漏签问题就能解决了。</p>
<p>casperjs支持用coffeescript书写用例。</p>
<p>废话结束，上代码：</p>
<script src="//gist.github.com/10013696.js?file=qiandao_casper.coffee"></script>
<p>当然了，在使用这段脚本之前，安装casper</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g casper</div></pre></td></tr></table></figure>
<p>然后就可以</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">- casperjs xiami_checkin.js</div><div class="line">为账户****纯洁的马赛克***签到ing</div><div class="line">为账户****纯洁的马赛克***签到ing</div><div class="line">登录成功</div><div class="line">执行登录后的其它操作</div><div class="line">签到成功！*********</div><div class="line">登录成功</div><div class="line">执行登录后的其它操作</div><div class="line">签到成功！*********</div></pre></td></tr></table></figure>
<p>有了这神秘机器手的照顾，小伙伴们从此奔跑在美丽的夕阳下，再也不用担心没刷卡没签到没积分了。</p>
<p>更多用法请参照<a href="" title="http://docs.casperjs.org/en/latest">Casper文档</a>。</p>
<h2 id="文艺版的虾米破解">文艺版的虾米破解</h2>
<p>谷歌还给搜出了<a href="" title="https://github.com/isombyt/XiaQian">虾签</a>这个项目，想法还是很好的，用用户提供的账号登录以后记下cookie值，再模拟一下api发送。</p>
<p>内外两道谁能撑得久，还是得看虾米工程师的脸色啊。静待虾米4月8与淘宝账号的打通，到时候再走着瞧。</p>
<h1 id="更新下">更新下</h1>
<p>果然虾米后来主页结构小小改版，原本的脚本就不太好用了，果然还是得随时追踪下运行情况。请看接下来的这篇<a href="!--￼3--">用node-schedule跑脚本</a>来实现加强版的定时签到。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前几天室友捶头顿足的对我吼：“杀千刀的今天竟然忘记虾米签到了啊啊啊！！！老娘累计了一百多天！！！！还要花钱去买补签卡啊尼玛！！！！！”&lt;/p&gt;
&lt;p&gt;团队项目里最近开始使用的测试框架&lt;a href=&quot;&quot; title=&quot;http://www.casperjs.org&quot;&gt;Cas
    
    </summary>
    
      <category term="玩具" scheme="http://hikerpig.github.io/categories/%E7%8E%A9%E5%85%B7/"/>
    
    
      <category term="自动化测试" scheme="http://hikerpig.github.io/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Coffeescript小角落，和javascript混写</title>
    <link href="http://hikerpig.github.io/2015/02/05/2014-04-22-Coffeescript%E5%B0%8F%E8%A7%92%E8%90%BD%EF%BC%8C%E5%92%8Cjavascript%E6%B7%B7%E5%86%99/"/>
    <id>http://hikerpig.github.io/2015/02/05/2014-04-22-Coffeescript小角落，和javascript混写/</id>
    <published>2015-02-05T02:13:32.000Z</published>
    <updated>2015-02-05T02:13:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>在<a href="https://donatstudios.com/CoffeeScript-Madness" target="_blank" rel="external">coffeescript-madness</a>中提到了用coffee的<code>literal</code>来在函数内部强制生成局部变量，防止对外层变量的意外修改，例如coffee代码：</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">y = <span class="number">0</span></div><div class="line"><span class="function"><span class="title">test</span> = <span class="params">(x)</span> -&gt;</span></div><div class="line">  `<span class="javascript"><span class="keyword">var</span> y</span>`</div><div class="line">  y = <span class="number">10</span></div><div class="line">  x + y</div></pre></td></tr></table></figure>
<p>会生成:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> test, y;</div><div class="line"></div><div class="line">y = <span class="number">0</span>;</div><div class="line"></div><div class="line">test = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> y;</div><div class="line">  y = <span class="number">10</span>;</div><div class="line">  <span class="keyword">return</span> x + y;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>反引号内的内容会被直接打印到输出代码中，并且自动补全一个分号结尾。</p>
<p>在生产实践中是不会用这种歪门邪道的，就当知道了一个跟编译器玩捉迷藏的方法好了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在&lt;a href=&quot;https://donatstudios.com/CoffeeScript-Madness&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;coffeescript-madness&lt;/a&gt;中提到了用coffee的&lt;code&gt;literal
    
    </summary>
    
      <category term="前端" scheme="http://hikerpig.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Coffeescript" scheme="http://hikerpig.github.io/tags/Coffeescript/"/>
    
  </entry>
  
  <entry>
    <title>在Jekyll博客里优雅地嵌入Github Gist</title>
    <link href="http://hikerpig.github.io/2015/01/28/2014-04-08-%E5%9C%A8Jekyll%E5%8D%9A%E5%AE%A2%E9%87%8C%E4%BC%98%E9%9B%85%E5%9C%B0%E5%B5%8C%E5%85%A5Github-Gist/"/>
    <id>http://hikerpig.github.io/2015/01/28/2014-04-08-在Jekyll博客里优雅地嵌入Github-Gist/</id>
    <published>2015-01-28T04:12:03.000Z</published>
    <updated>2015-01-28T04:12:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>Gist 是 Github 一个Snippet托管平台，也是全球秀代码和吵架的好地方。</p>
<p>例如我的一个虾米签到gist，官方提示的嵌入写法是这样的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script src=&quot;https://gist.github.com/hikerpig/10013696.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>可以在markdown文档里直接插入这一句，jekyll把文章转成静态网页，用户打开后会加载。</p>
<p>不过这同步的script载入方式存在一点问题：</p>
<ol style="list-style-type: decimal">
<li><p>如果因为众所周知的某些时不时出现的“网络原因”导致此script载入失败，之后的文章内容都会停止加载的。这不，Github今天又撞墙了，以前在博客里贴的gist都挂掉了。</p></li>
<li><p>即便gist会加载成功，也有可能因为速度慢而阻碍完整文章的显示速度。</p></li>
</ol>
<p>因此，我需要一种优雅地处理gist载入失败的策略。</p>
<p>如果你不存在第1点问题，那么只要给<code>script</code>标签加上一个异步加载的属性就行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script src=&quot;https://gist.github.com/hikerpig/10013696.js&quot; async&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>否则，就得多做点工作。</p>
<h2 id="jekyll内建模板支持">Jekyll内建模板支持</h2>
<p><a href="http://jekyllrb.com/docs/templates/#gist" target="_blank" rel="external">Jekyll文档</a>里说明，使用Liquid的gist标签便可插入Github Gist内容。</p>
<p>在文章里需要使用的时候，用Liquid标签包裹起来:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;% raw %&#125;</div><div class="line">&#123;% gist 10013696 %&#125; 载入该gist id对应的代码片段</div><div class="line">&#123;% gist 10013696 xiami_casper.coffee %&#125; 自定义gist显示的文件名</div><div class="line">&#123;% gist hikerpig/10013696 xiami_casper.coffee %&#125;  私有gist</div><div class="line">&#123;% endraw %&#125;</div></pre></td></tr></table></figure>
<p>看看<a href="https://github.com/jekyll/jekyll/blob/master/lib/jekyll/tags/gist.rb" target="_blank" rel="external">Jekyll源码里关于gist标签</a>的实现, 发现它其实，就是帮我们减少了手写script标签的苦活。在html页面中加入script标签。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">gist_script_tag</span><span class="params">(gist_id, filename = <span class="literal">nil</span>)</span></span></div><div class="line">  <span class="keyword">if</span> filename.empty?</div><div class="line">    <span class="string">"&lt;script src=\"https://gist.github.com/<span class="subst">#&#123;gist_id&#125;</span>.js\"&gt; &lt;/script&gt;"</span></div><div class="line">  <span class="keyword">else</span></div><div class="line">    <span class="string">"&lt;script src=\"https://gist.github.com/<span class="subst">#&#123;gist_id&#125;</span>.js?file=<span class="subst">#&#123;filename&#125;</span>\"&gt; &lt;/script&gt;"</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>其实还是没法解决第1个问题.</p>
<h2 id="jekyll插件">Jekyll插件</h2>
<p><a href="http://brandontilley.com/2011/01/31/gist-tag-for-jekyll.html" target="_blank" rel="external">这篇文章</a>描述的插件扩展了Jekyll的gist标签。首先在_plugins文件夹里添加gist_tag.rb文件:</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">require</span> <span class="string">'cgi'</span></div><div class="line"><span class="keyword">require</span> <span class="string">'digest/md5'</span></div><div class="line"><span class="keyword">require</span> <span class="string">'net/https'</span></div><div class="line"><span class="keyword">require</span> <span class="string">'uri'</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">module</span> <span class="title">Jekyll</span></span></div><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">GistTag</span> &lt; Liquid::Tag</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(tag_name, text, token)</span></span></div><div class="line">      <span class="keyword">super</span></div><div class="line">      @text           = text</div><div class="line">      @cache_disabled = <span class="literal">false</span></div><div class="line">      @cache_folder   = File.expand_path <span class="string">"../_gist_cache"</span>, File.dirname(__FILE_<span class="number">_</span>)</div><div class="line">    <span class="keyword">end</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">render</span><span class="params">(context)</span></span></div><div class="line">      <span class="keyword">if</span> parts = @text.match(<span class="regexp">/([\d]*) (.*)/</span>)</div><div class="line">        gist, file = parts[<span class="number">1</span>].strip, parts[<span class="number">2</span>].strip</div><div class="line">        script_url = script_url_for gist, file</div><div class="line">        code       = get_cached_gist(gist, file) <span class="params">||</span> get_gist_from_web(gist, file)</div><div class="line">        html_output_for script_url, code</div><div class="line">      <span class="keyword">else</span></div><div class="line">        <span class="string">""</span></div><div class="line">      <span class="keyword">end</span></div><div class="line">    <span class="keyword">end</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">html_output_for</span><span class="params">(script_url, code)</span></span></div><div class="line">      code = CGI.escapeHTML code</div><div class="line">      <span class="string">"&lt;script src='<span class="subst">#&#123;script_url&#125;</span>'&gt;&lt;/script&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;<span class="subst">#&#123;code&#125;</span>&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;"</span></div><div class="line">    <span class="keyword">end</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">script_url_for</span><span class="params">(gist_id, filename)</span></span></div><div class="line">      <span class="string">"https://gist.github.com/<span class="subst">#&#123;gist_id&#125;</span>.js?file=<span class="subst">#&#123;filename&#125;</span>"</span></div><div class="line">    <span class="keyword">end</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_gist_url_for</span><span class="params">(gist, file)</span></span></div><div class="line">      <span class="string">"https://gist.github.com/raw/<span class="subst">#&#123;gist&#125;</span>/<span class="subst">#&#123;file&#125;</span>"</span></div><div class="line">    <span class="keyword">end</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cache</span><span class="params">(gist, file, data)</span></span></div><div class="line">      cache_file = get_cache_file_for gist, file</div><div class="line">      File.open(cache_file, <span class="string">"w"</span>) <span class="keyword">do</span> <span class="params">|io|</span></div><div class="line">        io.write data</div><div class="line">      <span class="keyword">end</span></div><div class="line">    <span class="keyword">end</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_cached_gist</span><span class="params">(gist, file)</span></span></div><div class="line">      <span class="keyword">return</span> <span class="literal">nil</span> <span class="keyword">if</span> @cache_disabled</div><div class="line">      cache_file = get_cache_file_for gist, file</div><div class="line">      File.read cache_file <span class="keyword">if</span> File.exist? cache_file</div><div class="line">    <span class="keyword">end</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_cache_file_for</span><span class="params">(gist, file)</span></span></div><div class="line">      bad_chars = <span class="regexp">/[^a-zA-Z0-9\-_.]/</span></div><div class="line">      gist      = gist.gsub bad_chars, <span class="string">''</span></div><div class="line">      file      = file.gsub bad_chars, <span class="string">''</span></div><div class="line">      md5       = Digest::MD5.hexdigest <span class="string">"<span class="subst">#&#123;gist&#125;</span>-<span class="subst">#&#123;file&#125;</span>"</span></div><div class="line">      File.join @cache_folder, <span class="string">"<span class="subst">#&#123;gist&#125;</span>-<span class="subst">#&#123;file&#125;</span>-<span class="subst">#&#123;md5&#125;</span>.cache"</span></div><div class="line">    <span class="keyword">end</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_gist_from_web</span><span class="params">(gist, file)</span></span></div><div class="line">      gist_url          = get_gist_url_for gist, file</div><div class="line">      raw_uri           = URI.parse gist_url</div><div class="line">      https             = Net::HTTP.new raw_uri.host, raw_uri.port</div><div class="line">      https.use_ssl     = <span class="literal">true</span></div><div class="line">      https.verify_mode = OpenSSL::SSL::VERIFY_NONE</div><div class="line">      request           = Net::HTTP::Get.new raw_uri.request_uri</div><div class="line">      data              = https.request request</div><div class="line">      data              = data.body</div><div class="line">      cache gist, file, data <span class="keyword">unless</span> @cache_disabled</div><div class="line">      data</div><div class="line">    <span class="keyword">end</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">GistTagNoCache</span> &lt; GistTag</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(tag_name, text, token)</span></span></div><div class="line">      <span class="keyword">super</span></div><div class="line">      @cache_disabled = <span class="literal">true</span></div><div class="line">    <span class="keyword">end</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">Liquid::Template.register_tag(<span class="string">'gist'</span>, Jekyll::GistTag)</div><div class="line">Liquid::Template.register_tag(<span class="string">'gistnocache'</span>, Jekyll::GistTagNoCache)</div></pre></td></tr></table></figure>
<p>在每一次jekyll build的时候都去_gist_cache文件夹检查gist id是否有对应的缓存内容，没有的话会下载并保存，且在页面内添加<code>noscript</code>标签显示gist全内容，这样一来使用不支持javascript的设备也能看得到gist内容。</p>
<h2 id="js前端实现法">JS前端实现法</h2>
<p>JS界的合照狂人Ben Nadel大叔的<a href="http://www.bennadel.com/blog/2312-Loading-GitHub-Gists-After-The-Page-Content-Has-Loaded.htm" target="_blank" rel="external">Loading GitHub Gists After The Page Content Has Loaded</a>采取了另一种方法:</p>
<p>静态文档中用一个placeholder填在gist应该出现的位置，使用jQuery.ajax读取gist内容，数据获取完毕以后再使用document.write写到文档里。如此的前端异步载入方式可以减少后台程序生成静态页面的大小。</p>
<p>其实还是没法解决第1个问题.</p>
<h2 id="参考文章">参考文章</h2>
<ul>
<li><a href="">http://brandontilley.com/2011/01/31/gist-tag-for-jekyll.html</a></li>
<li><a href="">http://www.bennadel.com/blog/2312-Loading-GitHub-Gists-After-The-Page-Content-Has-Loaded.htm</a></li>
<li><a href="http://stackoverflow.com/questions/2082723/how-do-you-manage-your-gists-on-github" target="_blank" rel="external"></a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Gist 是 Github 一个Snippet托管平台，也是全球秀代码和吵架的好地方。&lt;/p&gt;
&lt;p&gt;例如我的一个虾米签到gist，官方提示的嵌入写法是这样的：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class
    
    </summary>
    
      <category term="Meta_Blog" scheme="http://hikerpig.github.io/categories/Meta-Blog/"/>
    
    
      <category term="Jekyll" scheme="http://hikerpig.github.io/tags/Jekyll/"/>
    
      <category term="Github" scheme="http://hikerpig.github.io/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>正则也可以很好玩</title>
    <link href="http://hikerpig.github.io/2015/01/28/2014-04-29-%E6%AD%A3%E5%88%99%E4%B9%9F%E5%8F%AF%E4%BB%A5%E5%BE%88%E5%A5%BD%E7%8E%A9/"/>
    <id>http://hikerpig.github.io/2015/01/28/2014-04-29-正则也可以很好玩/</id>
    <published>2015-01-28T04:12:03.000Z</published>
    <updated>2017-07-24T08:39:03.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="正则填字游戏game"><a href="http://regexcrossword.com/" target="_blank" rel="external">正则填字游戏</a></h2>
<h2 id="debuggexdebuggex"><a href="https://www.debuggex.com" target="_blank" rel="external">Debuggex</a></h2>
<p>可视化正则匹配过程, 用于调试十分方便</p>
<img src="http://images-hikerpig.qiniudn.com/image/debuggex.png" alt="undefined">
<h2 id="regexperregexper"><a href="http://www.regexper.com/" target="_blank" rel="external">regexper</a></h2>
<p>一个把javascript正则表达式转换成图表的工具网站。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;正则填字游戏game&quot;&gt;&lt;a href=&quot;http://regexcrossword.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;正则填字游戏&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id=&quot;debuggexdebuggex&quot;&gt;&lt;a href=&quot;h
    
    </summary>
    
    
      <category term="Toys" scheme="http://hikerpig.github.io/tags/Toys/"/>
    
  </entry>
  
  <entry>
    <title>用node schedule简单地实现定时跑脚本功能</title>
    <link href="http://hikerpig.github.io/2015/01/28/2014-04-21-%E7%94%A8node-schedule%E7%AE%80%E5%8D%95%E5%9C%B0%E5%AE%9E%E7%8E%B0%E5%AE%9A%E6%97%B6%E8%B7%91%E8%84%9A%E6%9C%AC%E5%8A%9F%E8%83%BD/"/>
    <id>http://hikerpig.github.io/2015/01/28/2014-04-21-用node-schedule简单地实现定时跑脚本功能/</id>
    <published>2015-01-28T04:09:59.000Z</published>
    <updated>2015-01-28T04:09:59.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="" title="https://github.com/mattpat/node-schedule">node-schedule</a>是一个用node实现的任务调度系统，比起不太好配置的crontab，用来管理同用javascript写的定时脚本实在是再合适不过。</p>
<p>以下是为之前的<a href="!--￼2--">虾米签到脚本</a>写的task runner:</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">schedule = <span class="built_in">require</span> <span class="string">'node-schedule'</span></div><div class="line">process = <span class="built_in">require</span> <span class="string">'child_process'</span></div><div class="line">fs = <span class="built_in">require</span> <span class="string">'fs'</span></div><div class="line"></div><div class="line">log = <span class="literal">null</span></div><div class="line"></div><div class="line">rule = <span class="keyword">new</span> schedule.RecurrenceRule()</div><div class="line"></div><div class="line"><span class="keyword">if</span> process.env <span class="keyword">is</span> <span class="string">'development'</span></div><div class="line">  rule.second = <span class="number">1</span> <span class="comment"># 每隔一分钟，测试用</span></div><div class="line"><span class="keyword">else</span></div><div class="line">  rule.hour = <span class="number">1</span> <span class="comment"># 凌晨1点签到</span></div><div class="line"></div><div class="line"><span class="comment"># 写入log文件中</span></div><div class="line"><span class="function"><span class="title">writeLog</span> = <span class="params">(text)</span>-&gt;</span></div><div class="line">  log = fs.createWriteStream(<span class="string">'log.txt'</span>, &#123;<span class="string">'flags'</span>: <span class="string">'a'</span>, encoding: <span class="string">'utf-8'</span>&#125;)</div><div class="line">  log.end(text)</div><div class="line"></div><div class="line"><span class="function"><span class="title">run</span> = <span class="params">()</span>-&gt;</span></div><div class="line">  child = process.spawn <span class="string">'casperjs'</span>, [<span class="string">'xiami_casper.coffee'</span>]</div><div class="line"></div><div class="line">  child.stdout.<span class="literal">on</span>(<span class="string">'data'</span>, <span class="function"><span class="params">(data)</span>-&gt;</span></div><div class="line">    text = <span class="keyword">new</span> Date() + data.toString()</div><div class="line">    writeLog(text)</div><div class="line">    <span class="built_in">console</span>.log text</div><div class="line">  )</div><div class="line"></div><div class="line">  child.stdout.<span class="literal">on</span>(<span class="string">'end'</span>, <span class="function"><span class="params">()</span>-&gt;</span></div><div class="line">    writeLog(<span class="string">"Run job on <span class="subst">#&#123;<span class="keyword">new</span> Date().toString()&#125;</span>"</span>)</div><div class="line">  )</div><div class="line"></div><div class="line">  child.<span class="literal">on</span> <span class="string">'error'</span>, <span class="function"><span class="params">()</span>-&gt;</span></div><div class="line">    <span class="built_in">console</span>.log arguments</div><div class="line"></div><div class="line">job = schedule.scheduleJob(rule, <span class="function"><span class="params">()</span>-&gt;</span></div><div class="line">  run()</div><div class="line">)</div></pre></td></tr></table></figure>
<p>上传到vps上，用forever来启动runner长时间运行：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">forever start -c coffee schedule_runner.coffee</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;&quot; title=&quot;https://github.com/mattpat/node-schedule&quot;&gt;node-schedule&lt;/a&gt;是一个用node实现的任务调度系统，比起不太好配置的crontab，用来管理同用javascript写的定时脚本实在是再
    
    </summary>
    
      <category term="玩具" scheme="http://hikerpig.github.io/categories/%E7%8E%A9%E5%85%B7/"/>
    
    
      <category term="Node" scheme="http://hikerpig.github.io/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>放过Pygments,让Prism来给Jekyll博客加上代码高亮</title>
    <link href="http://hikerpig.github.io/2015/01/28/2014-03-31-%E6%94%BE%E8%BF%87Pygments/"/>
    <id>http://hikerpig.github.io/2015/01/28/2014-03-31-放过Pygments/</id>
    <published>2015-01-28T04:09:59.000Z</published>
    <updated>2015-01-28T04:09:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>jekyll目前至少支持Redcarpet和RDiscount以及kramadown几种类markdown引擎，</p>
<ul>
<li><p>rdiscount 是基于C实现的 markdown 引擎 discount 的ruby调用，优点不用说也知道就是快。缺点是扩展性差(不过要扩展的功能也能通过jekyll的插件来实现)，关于discount的语法可以去看看<a href="http://www.pell.portland.or.us/~orc/Code/discount" target="_blank" rel="external">discount主页</a>或者<a href="http://baige5117.github.io/blog/rdiscount.html" target="_blank" rel="external">国内的一篇介绍</a>。</p></li>
<li><p>Redcarpet 就是大家喜闻乐见的Github Flavored Markdown, 有个好东家, 基于ruby实现，易于扩展，插件也貌似比较多。</p></li>
</ul>
<p>kramadown没有了解，不过估计应该像前两者一样都支持Fenced code block, 我选择的是Redcarpet, 在用一对三个反引号包裹代码块上附加的文本会被认为是代码高亮的提示，输出html的时候它会被转为class属性。</p>
<p>例如：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">'测试code block'</span>);</div></pre></td></tr></table></figure>
<p>输出结果为:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;pre&gt;</div><div class="line">  &lt;code class=&quot;js&quot;&gt;</div><div class="line">    console.log(&apos;测试code block&apos;);</div><div class="line">  &lt;/code&gt;</div><div class="line">&lt;/pre&gt;</div></pre></td></tr></table></figure>
<h2 id="后端的处理">后端的处理</h2>
<p>首先在jekyll的站点设置文件<code>_config.yml</code>里关闭pygment:</p>
<pre><code>pygment:  false</code></pre>
<h2 id="前端的处理">## 前端的处理</h2>
<h3 id="css">CSS</h3>
<p>Prism内置多种主题都挺好看，我选择了prism-okaidia的样式文件。</p>
<p>Prism在处理完高亮的时候，是根据代码块的<code>language-*</code>类名来选择对应语言的语法的。难道我们写文章的时候还要在每个高亮文法前都加上这个后缀么？No no，因为我们是懒人，绝对没门。因此在让Prism执行高亮之前，我们还得做一些小小的处理:</p>
<h3 id="javascript">javascript</h3>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">_prismHandler = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  $(<span class="string">'code'</span>).not(<span class="string">'[class*="language-"]'</span>).addClass(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> _lang = $(<span class="keyword">this</span>).attr(<span class="string">'class'</span>)  || <span class="string">'markup'</span>; <span class="comment">// 默认为markdown语法</span></div><div class="line">    _lang = _lang.replace(<span class="regexp">/(language|lang)+\-/gi</span>, <span class="string">''</span>);</div><div class="line">    <span class="keyword">return</span> <span class="string">'language-'</span> + (Prism.languages.hasOwnProperty(_lang) ? _lang : <span class="string">'markup'</span>);</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  Prism.highlightAll();</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>激动人心的时刻到来了：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  _prismHandler();</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h1 id="为什么折腾">为什么折腾</h1>
<p>除了因为作为菜鸟前端的局限外(感觉自己捅自己好轻松啊),折腾一番的好处当然就是，把代码高亮的任务转移给了客户端，每次重新生成网站的时候速度就xiu xiu xiu地上去了。</p>
<p>选择Prism是因为当初看<a href="https://developer.mozilla.org" target="_blank" rel="external">MDN</a>教程的时候觉得代码块的配色实在是太美丽（因为作者也是个美丽的程序媛？）, 等宽字体Consolas非常舒适。</p>
<p>不过说起来Prism好段时间没有更新，对于语言的支持也不是很完善（当然它有不错的<a href="http://prismjs.com/extending.html" target="_blank" rel="external">扩展机制</a>，你完全可以自己写一个语言的关键词定义)。如果哪天折腾之魂又出现了的话，可以尝试下用<a href="http://highlightjs.org/" target="_blank" rel="external">Highlight</a>，目前支持51种语言和20多种主题配色，官网也有方便的自定义包下载，让你在学习新语言的时候也能够满足漂漂亮亮地晒漂亮代码的需求（高手们真的care这个事情么= =）。</p>
<h1 id="补充一下">补充一下</h1>
<h2 id="prism-的不足">Prism 的不足</h2>
<p>这个项目的维护得不是很频繁，试用了一下除了html、javascript、css以外的几种语言，感觉结果都不是特别精确，请看我的更新文章。</p>
<h1 id="参考文章">参考文章</h1>
<ul>
<li><a href="http://www.pell.portland.or.us/~orc/Code/discount" target="_blank" rel="external">discount主页</a> discount 跟标准markdown的区别</li>
<li><a href="http://baige5117.github.io/blog/rdiscount.html" target="_blank" rel="external">discount_brief</a> 国内的一篇介绍文章</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;jekyll目前至少支持Redcarpet和RDiscount以及kramadown几种类markdown引擎，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;rdiscount 是基于C实现的 markdown 引擎 discount 的ruby调用，优点不用说也知道就是快。缺点是扩展
    
    </summary>
    
      <category term="工具" scheme="http://hikerpig.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="jekyll" scheme="http://hikerpig.github.io/tags/jekyll/"/>
    
      <category term="外貌协会" scheme="http://hikerpig.github.io/tags/%E5%A4%96%E8%B2%8C%E5%8D%8F%E4%BC%9A/"/>
    
      <category term="折腾" scheme="http://hikerpig.github.io/tags/%E6%8A%98%E8%85%BE/"/>
    
  </entry>
  
  <entry>
    <title>用 ssh reverse tunnel 调用远程服务器的剪切板使用</title>
    <link href="http://hikerpig.github.io/2015/01/28/2014-04-10-%E7%94%A8ssh-reverse-tunnel%E8%B0%83%E7%94%A8%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%89%AA%E5%88%87%E6%9D%BF%E4%BD%BF%E7%94%A8/"/>
    <id>http://hikerpig.github.io/2015/01/28/2014-04-10-用ssh-reverse-tunnel调用远程服务器的剪切板使用/</id>
    <published>2015-01-28T04:09:59.000Z</published>
    <updated>2015-01-28T04:09:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>用ssh在远程服务器上工作的时候看着vim的满屏代码，突然怎么都没办法复制下来（其实鼠标还是可以用的，不过如果内容多到跨屏那就呵呵呵了），真是急死人，万能的google啊帮助我吧。</p>
<h1 id="在本机上要做的事">在本机上要做的事</h1>
<p>先用netcat建立一个剪贴板服务在后台运行：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">PORT=5566</div><div class="line"><span class="keyword">while</span> : ;<span class="keyword">do</span> nc -l localhost <span class="variable">$PORT</span> | pbcopy ; <span class="keyword">done</span> &amp;</div></pre></td></tr></table></figure>
<p>现在这两个命令的效果是一样的了：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> <span class="string">"剪贴板"</span> | pbcopy</div><div class="line"><span class="built_in">echo</span> <span class="string">"剪贴板"</span> | nc localhost 5566</div></pre></td></tr></table></figure>
<p>然后我们在ssh的时候加上反向代理参数:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 表明当前ssh会话所有向远程服务器B的5566端口发送的信息都会转到本机A的5566端口上</span></div><div class="line">ssh user@remote-server.com -R 5566:localhost:5566</div></pre></td></tr></table></figure>
<p>现在在ssh会话中尝试下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat test_file.txt | nc -v localhost 5566</div></pre></td></tr></table></figure>
<p>然后ctrl + v 试试，哈哈。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Connection to localhost 5566 port [tcp/*] succeeded!</div></pre></td></tr></table></figure>
<p>去掉-v(verbose)选项可以让一切在默默中进行。</p>
<p>我整理出一个脚本，运行这个脚本就能搞出一个能偷用剪贴板的ssh会话了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">PORT=5566</div><div class="line">ssh_server=<span class="string">'ubuntu@crmdev'</span></div><div class="line"></div><div class="line"><span class="comment"># using mac</span></div><div class="line"><span class="keyword">if</span> [[ -n `<span class="built_in">which</span> pbcopy` ]]; <span class="keyword">then</span></div><div class="line">  <span class="built_in">echo</span> <span class="string">"@Mac"</span></div><div class="line">  copy_command=<span class="string">'pbcopy'</span></div><div class="line"><span class="keyword">elif</span> [[ -n `<span class="built_in">which</span> xsel` ]]; <span class="keyword">then</span></div><div class="line">  <span class="built_in">echo</span> <span class="string">"you can use xsel on ubuntu"</span></div><div class="line">  copy_command=<span class="string">'xsel'</span></div><div class="line"><span class="keyword">else</span></div><div class="line">  <span class="built_in">echo</span> <span class="string">"you don't have clipboard utility"</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line">existed=`ps | grep nc | grep <span class="variable">$PORT</span>`</div><div class="line"></div><div class="line"><span class="comment"># start a netcat server</span></div><div class="line"><span class="keyword">if</span> [[ -n <span class="variable">$existed</span> ]]; <span class="keyword">then</span></div><div class="line">  <span class="built_in">echo</span> <span class="string">"nc <span class="variable">$PORT</span> already existed"</span></div><div class="line"><span class="keyword">else</span></div><div class="line">  <span class="built_in">echo</span> <span class="string">"nc <span class="variable">$PORT</span> does not exist"</span></div><div class="line">  <span class="keyword">if</span> [[ -n <span class="variable">$copy_command</span> ]]; <span class="keyword">then</span></div><div class="line">    <span class="keyword">while</span> : ;<span class="keyword">do</span> nc -l localhost <span class="variable">$PORT</span> | <span class="variable">$copy_command</span> ; <span class="keyword">done</span> &amp;</div><div class="line">  <span class="keyword">fi</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="comment"># ssh the server</span></div><div class="line"><span class="keyword">if</span> [[ -n <span class="variable">$copy_command</span> ]]; <span class="keyword">then</span></div><div class="line">  ssh -R <span class="variable">$PORT</span>:localhost:<span class="variable">$PORT</span> <span class="variable">$ssh_server</span></div><div class="line"><span class="keyword">else</span></div><div class="line">  ssh <span class="variable">$ssh_server</span></div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure>
<h2 id="其他方法">其他方法</h2>
<p>还有一个方法是<a href="https://defuse.ca/blog/clipboard-over-ssh-with-vim" target="_blank" rel="external">开启ssh的X11Forwarding选项</a>，还没试过。</p>
<h1 id="在远程服务器需要做的事">在远程服务器需要做的事</h1>
<p>使用vim编辑的时候，为了使用系统剪贴板并传到5566端口上，需要覆盖下我们在vim里的复制键位映射：</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">vmap</span> <span class="comment">"+y ::w !nc localhost 5566&lt;CR&gt;</span></div></pre></td></tr></table></figure>
<p>其中<code>'&lt;,'&gt;</code>对应的是在Vim的Visual模式下选中的文本，使用<code>!nc</code>调用shell中的<code>nc</code>程序，便可以转发选中内容。</p>
<p>离鼠标依赖又远了一点。</p>
<h1 id="参考文章">参考文章</h1>
<ul>
<li><a href="http://gistflow.com/posts/934-copy-from-a-remote-server-to-the-local-mac-clipboard" class="uri" target="_blank" rel="external">http://gistflow.com/posts/934-copy-from-a-remote-server-to-the-local-mac-clipboard</a></li>
<li><a href="http://evolvingweb.ca/blog/exposing-your-clipboard-over-ssh" target="_blank" rel="external">exposing-your-clipboard-over-ssh</a></li>
<li><a href="http://superuser.com/questions/407888/synchronize-pasteboard-between-remote-tmux-session-and-local-mac-os-pasteboard" target="_blank" rel="external">synchronize-pasteboard-between-remote-tmux-session-and-local-mac-os-pasteboard</a></li>
<li><a href="http://benninger.ca/posts/vim-use-selected-text-as-input-to-a-shell-command/" target="_blank" rel="external">vim-use-selected-text-as-input-to-a-shell-command</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用ssh在远程服务器上工作的时候看着vim的满屏代码，突然怎么都没办法复制下来（其实鼠标还是可以用的，不过如果内容多到跨屏那就呵呵呵了），真是急死人，万能的google啊帮助我吧。&lt;/p&gt;
&lt;h1 id=&quot;在本机上要做的事&quot;&gt;在本机上要做的事&lt;/h1&gt;
&lt;p&gt;先用netca
    
    </summary>
    
      <category term="Tips" scheme="http://hikerpig.github.io/categories/Tips/"/>
    
    
      <category term="Vim" scheme="http://hikerpig.github.io/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>让oh-my-zsh的git插件飞起来</title>
    <link href="http://hikerpig.github.io/2015/01/28/2014-04-04-%E8%AE%A9oh-my-zsh%E7%9A%84gitfast%E6%8F%92%E4%BB%B6%E6%8B%AF%E6%95%91%E4%BD%A0/"/>
    <id>http://hikerpig.github.io/2015/01/28/2014-04-04-让oh-my-zsh的gitfast插件拯救你/</id>
    <published>2015-01-28T04:09:59.000Z</published>
    <updated>2015-01-28T04:09:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>作为一个伪文艺程序员，在ubuntu上使用zsh搭配OMG的插件oh-my-zsh，小日子曾经过的滋滋润润，各种auto-completion让我基本上爱上Tab键了。后来换了台旧MBP，每次跑到项目文件夹下<code>git checkout feat (tab)</code>就傻了，出去泡一杯咖啡回来shell还在哼哧哼哧地忙活着，分分钟有种再手贱&lt;tab&gt;就剁掉的冲动。</p>
<p><a href="http://marc-abramowitz.com/archives/2012/04/10/fix-for-oh-my-zsh-git-svn-prompt-slowness/comment-page-1/" target="_blank" rel="external">有位仁兄</a>找到了问题的解决方法，原来作恶的是<code>~/.oh-my-zsh/lib/git.zsh</code>中的<code>git_prompt_info()</code> 调用的<code>parse_git_dirty()</code>函数。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># get the name of the branch we are on</span></div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">git_prompt_info</span></span>() &#123;</div><div class="line">  <span class="keyword">if</span> [[ <span class="string">"<span class="variable">$(git config --get oh-my-zsh.hide-status)</span>"</span> != <span class="string">"1"</span> ]]; <span class="keyword">then</span></div><div class="line">    ref=$(<span class="built_in">command</span> git symbolic-ref HEAD 2&gt; /dev/null) || \</div><div class="line">    ref=$(<span class="built_in">command</span> git rev-parse --short HEAD 2&gt; /dev/null) || <span class="built_in">return</span></div><div class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$ZSH_THEME_GIT_PROMPT_PREFIX</span><span class="variable">$&#123;ref#refs/heads/&#125;</span><span class="variable">$(parse_git_dirty)</span><span class="variable">$ZSH_THEME_GIT_PROMPT_SUFFIX</span>"</span></div><div class="line">  <span class="keyword">fi</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment"># Checks if working tree is dirty</span></div><div class="line"><span class="function"><span class="title">parse_git_dirty</span></span>() &#123;</div><div class="line">  <span class="built_in">local</span> SUBMODULE_SYNTAX=<span class="string">''</span></div><div class="line">  <span class="built_in">local</span> GIT_STATUS=<span class="string">''</span></div><div class="line">  <span class="built_in">local</span> CLEAN_MESSAGE=<span class="string">'nothing to commit (working directory clean)'</span></div><div class="line">  <span class="keyword">if</span> [[ <span class="string">"<span class="variable">$(command git config --get oh-my-zsh.hide-status)</span>"</span> != <span class="string">"1"</span> ]]; <span class="keyword">then</span></div><div class="line">    <span class="keyword">if</span> [[ <span class="variable">$POST_1_7_2_GIT</span> -gt 0 ]]; <span class="keyword">then</span></div><div class="line">          SUBMODULE_SYNTAX=<span class="string">"--ignore-submodules=dirty"</span></div><div class="line">    <span class="keyword">fi</span></div><div class="line">    <span class="keyword">if</span> [[ <span class="string">"<span class="variable">$DISABLE_UNTRACKED_FILES_DIRTY</span>"</span> == <span class="string">"true"</span> ]]; <span class="keyword">then</span></div><div class="line">        GIT_STATUS=$(<span class="built_in">command</span> git status -s <span class="variable">$&#123;SUBMODULE_SYNTAX&#125;</span> -uno 2&gt; /dev/null | tail -n1)</div><div class="line">    <span class="keyword">else</span></div><div class="line">        GIT_STATUS=$(<span class="built_in">command</span> git status -s <span class="variable">$&#123;SUBMODULE_SYNTAX&#125;</span> 2&gt; /dev/null | tail -n1)</div><div class="line">    <span class="keyword">fi</span></div><div class="line">    <span class="keyword">if</span> [[ -n <span class="variable">$GIT_STATUS</span> ]]; <span class="keyword">then</span></div><div class="line">      <span class="built_in">echo</span> <span class="string">"<span class="variable">$ZSH_THEME_GIT_PROMPT_DIRTY</span>"</span></div><div class="line">    <span class="keyword">else</span></div><div class="line">      <span class="built_in">echo</span> <span class="string">"<span class="variable">$ZSH_THEME_GIT_PROMPT_CLEAN</span>"</span></div><div class="line">    <span class="keyword">fi</span></div><div class="line">  <span class="keyword">else</span></div><div class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$ZSH_THEME_GIT_PROMPT_CLEAN</span>"</span></div><div class="line">  <span class="keyword">fi</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>他贴出的gist是这样的：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">git_prompt_info</span></span>() &#123;</div><div class="line">  ref=$(git symbolic-ref HEAD 2&gt; /dev/null) || <span class="built_in">return</span></div><div class="line">  <span class="built_in">echo</span> <span class="string">"<span class="variable">$ZSH_THEME_GIT_PROMPT_PREFIX</span><span class="variable">$&#123;ref#refs/heads/&#125;</span><span class="variable">$ZSH_THEME_GIT_PROMPT_SUFFIX</span>"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其实sf上早有人问过这问题，解决方案也早已存在于oh-my-zsh的标配插件中了。直接在<code>~/.zshrc</code>中修改下调用插件就好</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">plugins=(gitfast) <span class="comment"># 原来是git</span></div></pre></td></tr></table></figure>
<p>看看<code>.oh-my-zsh/plugins/gitfast.plugin.zsh</code>里的写法</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">dir=$(dirname <span class="variable">$0</span>)</div><div class="line"><span class="built_in">source</span> <span class="variable">$dir</span>/../git/git.plugin.zsh</div><div class="line"><span class="built_in">source</span> <span class="variable">$dir</span>/git-prompt.sh</div><div class="line"></div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">git_prompt_info</span></span>() &#123;</div><div class="line">  dirty=<span class="string">"<span class="variable">$(parse_git_dirty)</span>"</span></div><div class="line">  __git_ps1 <span class="string">"<span class="variable">$&#123;ZSH_THEME_GIT_PROMPT_PREFIX//\%/%%&#125;</span>%s<span class="variable">$&#123;dirty//\%/%%&#125;</span><span class="variable">$&#123;ZSH_THEME_GIT_PROMPT_SUFFIX//\%/%%&#125;</span>"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>没有了<code>parse_git_dirty</code>，我们就看不到zsh 中git repo名字旁边提示当前分支是否dirty的小勾勾“✔”和小叉叉“✗”，但是人生体验流畅了不只十个数量级啊。比起肆意的人生，OOXX算什么呢！！！（话题没有跑偏没有跑偏(;¬_¬) ）</p>
<p>从此&lt;tab&gt;键又能肆意飞翔了。</p>
]]></content>
    
    <summary type="html">
    
      让oh-my-zsh的git插件飞起来
    
    </summary>
    
      <category term="Tips" scheme="http://hikerpig.github.io/categories/Tips/"/>
    
    
      <category term="Git" scheme="http://hikerpig.github.io/tags/Git/"/>
    
      <category term="zsh" scheme="http://hikerpig.github.io/tags/zsh/"/>
    
  </entry>
  
  <entry>
    <title>Lodash和Underscore的小小区别</title>
    <link href="http://hikerpig.github.io/2015/01/28/2014-03-16-Lodash%E5%92%8CUnderscore%E7%9A%84%E5%B0%8F%E5%B0%8F%E5%8C%BA%E5%88%AB/"/>
    <id>http://hikerpig.github.io/2015/01/28/2014-03-16-Lodash和Underscore的小小区别/</id>
    <published>2015-01-28T04:09:59.000Z</published>
    <updated>2015-01-28T04:09:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前在项目小重构的时候想试试号称Underscore继承者的Lodash，无痛迁移，而且新的API也很好用，这几天调一个bug的时候却发现<code>_.each</code>的结果怎么都不对。</p>
<p>翻Lodash 文档才发现人家都明明白白地写了：</p>
<blockquote>
<p>_.forEach(collection, [callback=identity], [thisArg])</p>
<p>Iterates over elements of a collection, executing the callback for each element. The callback is bound to thisArg and invoked with three arguments; (value, index|key, collection). Callbacks may exit iteration early by explicitly returning false.</p>
</blockquote>
<p>这一点跟Underscore使用的原生JS不太一样。</p>
<p>其实也只有callback的返回值是false的时候遍历才会停止，我们一般手写JS代码单纯地用<code>forEach</code>遍历数组的时候使用<code>return</code>也只是想进入对下个元素的处理，不会给返回值赋什么意义，于是函数的返回值为undefined。所以用Lodash一直也没有什么问题。</p>
<p>但是在项目里你要用Coffeescript，保不准就呵呵了：</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">segments = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</div><div class="line">lessThanThree = <span class="literal">true</span></div><div class="line">_.each segments, <span class="function"><span class="params">(seg, index)</span> -&gt;</span></div><div class="line">	<span class="built_in">console</span>.log seg</div><div class="line">    <span class="keyword">if</span> index &gt; <span class="number">2</span></div><div class="line">    	lessThanThree = <span class="literal">false</span></div><div class="line"></div><div class="line"><span class="comment"># 在Underscore下输出是</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">4</span></div><div class="line"></div><div class="line"><span class="comment"># Lodash下输出是</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">3</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      从Lodash迁移到Underscore时候要小心的小小差异
    
    </summary>
    
      <category term="前端" scheme="http://hikerpig.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Javascript" scheme="http://hikerpig.github.io/tags/Javascript/"/>
    
      <category term="Coffeescript" scheme="http://hikerpig.github.io/tags/Coffeescript/"/>
    
  </entry>
  
  <entry>
    <title>用Sass搞定Flat风格的图标长投影</title>
    <link href="http://hikerpig.github.io/2015/01/26/2015-01-26-%E7%94%A8Sass%E6%90%9E%E5%AE%9AFlat%E9%A3%8E%E6%A0%BC%E7%9A%84%E5%9B%BE%E6%A0%87%E9%95%BF%E6%8A%95%E5%BD%B1/"/>
    <id>http://hikerpig.github.io/2015/01/26/2015-01-26-用Sass搞定Flat风格的图标长投影/</id>
    <published>2015-01-25T16:00:00.000Z</published>
    <updated>2017-07-22T17:26:09.000Z</updated>
    
    <content type="html"><![CDATA[<div class="figure">
<img src="http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2015/01/1421924364kpHbb6e.png" alt="Hello">
<p class="caption">Hello</p>
</div>
<p>让我们来学习<a href="" title="http://www.sitepoint.com/ultimate-long-shadow-sass-mixin">Hugo Giraudel老师</a>的这篇文章</p>
<p>亲爱的童鞋们如果过去两年没有长眠不醒的话一定知道这个<a href="" title="http://www.hongkiat.com/blog/long-shadow-design/">长长的投影</a>的故事(2015应该是Material Design的时代了,长江后浪推前浪啊消费者是残酷的掩面嘤嘤嘤…)</p>
<p>咳咳咳…总之，用长投影给文字引来全场目光还是相当靠谱的。</p>
<p>用图片或者SVG实现都OK，但是绝对没有用CSS指挥浏览器感觉有成就感啊。</p>
<p>不过手写这个的话真的是要你命，浪费时间，现在捡起Sass，用15行代码打造智能投影新时代..新时代..时代..代..</p>
<h2 id="先确定api">先确定API</h2>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.foo</span> &#123;</div><div class="line">    <span class="attribute">box-shadow</span>: long-shadow(<span class="variable">$args</span>...);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.bar</span> &#123;</div><div class="line">    <span class="attribute">text-shadow</span>: long-shadow(<span class="variable">$args</span>...);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>box-shadow</code>跟<code>text-shadow</code>区别在于前者有一个跟模糊有关的参数(不过这里也没用到…), 说到文字阴影, IE 10+支持它的模糊哦酷不酷炫!我真的不是在骗你哟!</p>
<p>我们这个函数需要几个参数：</p>
<ul>
<li>投影方向</li>
<li>投影长度</li>
<li>投影颜色</li>
<li>投影是否需要渐隐效果(默认是false)</li>
<li>需要计算的投影层数</li>
</ul>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// 纯扁平已经out啦,长长的影子是我滴爱</span></div><div class="line"><span class="comment">/// 支持 `box-shadow` 和 `text-shadow`.</span></div><div class="line"><span class="comment">/// `cos` 和 `sin` 函数可以用Compass或者其他库支持(SassyMath之类，要不然看下面链接也行)</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// @author Hugo Giraudel</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// @link https://unindented.org/articles/trigonometry-in-sass/ 用Sass实现三角函数 `cos` 和 `sin`</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// @param &#123;Direction&#125; $direction</span></div><div class="line"><span class="comment">///     投影方向，可以是角度也可以是方向的关键字</span></div><div class="line"><span class="comment">/// @param &#123;Length&#125; $length</span></div><div class="line"><span class="comment">///     投影长度</span></div><div class="line"><span class="comment">/// @param &#123;Color&#125; $color</span></div><div class="line"><span class="comment">///     投影颜色</span></div><div class="line"><span class="comment">/// @param &#123;Bool | Color&#125; $fade [false]</span></div><div class="line"><span class="comment">///     投影是否需要变化:</span></div><div class="line"><span class="comment">///     - `false` means no fading, shadow is `$color`</span></div><div class="line"><span class="comment">///     - `true`  means fading from `$color` to transparent</span></div><div class="line"><span class="comment">///     - a color means fading from `$color` to `$fade`</span></div><div class="line"><span class="comment">/// @param &#123;Number&#125; $shadow-count [100]</span></div><div class="line"><span class="comment">///     需要计算的投影层数</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// @return &#123;List&#125; - List of shadows</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// @require &#123;function&#125; Compass/helpers/math/cos</span></div><div class="line"><span class="comment">///     http://compass-style.org/reference/compass/helpers/math/#cos</span></div><div class="line"><span class="comment">/// @require &#123;function&#125; Compass/helpers/math/sin</span></div><div class="line"><span class="comment">///     http://compass-style.org/reference/compass/helpers/math/#sin</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// @example scss - 用法</span></div><div class="line"><span class="comment">/// .foo &#123;</span></div><div class="line"><span class="comment">///   text-shadow: long-shadow(42deg, 1em, #16a085);</span></div><div class="line"><span class="comment">/// &#125;</span></div><div class="line"><span class="comment">/// .bar &#123;</span></div><div class="line"><span class="comment">///   box-shadow: long-shadow(to top left, 150px, hotpink, tomato);</span></div><div class="line"><span class="comment">/// &#125;</span></div><div class="line">@function long-shadow(<span class="variable">$direction</span>, <span class="variable">$length</span>, <span class="variable">$color</span>, <span class="variable">$fade</span>: false, <span class="variable">$shadow-count</span>: 100) &#123;&#125;</div></pre></td></tr></table></figure>
<h2 id="开始code">开始code</h2>
<p>转换一下<code>$direction</code>这个参数, 定义一个map让我们可以用关键字映射角度。</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$conversion-map</span>: (</div><div class="line">  to top: <span class="number">180deg</span>,</div><div class="line">  to top right: <span class="number">135deg</span>,</div><div class="line">  to right top: <span class="number">135deg</span>,</div><div class="line">  to right: <span class="number">90deg</span>,</div><div class="line">  to bottom right: <span class="number">45deg</span>,</div><div class="line">  to right bottom: <span class="number">45deg</span>,</div><div class="line">  to bottom: <span class="number">0deg</span>,</div><div class="line">  to bottom left: <span class="number">315deg</span>,</div><div class="line">  to left bottom: <span class="number">315deg</span>,</div><div class="line">  to left: <span class="number">270deg</span>,</div><div class="line">  to left top: <span class="number">225deg</span>,</div><div class="line">  to top left: <span class="number">225deg</span></div><div class="line">);</div><div class="line"></div><div class="line">@<span class="keyword">if</span> map-has-key(<span class="variable">$conversion-map</span>, <span class="variable">$direction</span>) &#123;</div><div class="line">  <span class="variable">$direction</span>: map-get(<span class="variable">$conversion-map</span>, <span class="variable">$direction</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后我们就只剩下一件事要做了（节奏有点快啊(｡◕ˇ∀ˇ◕）)）：从1循环到<code>$shadow-count</code>这么多次, 每次做出一层阴影。</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ...</span></div><div class="line"></div><div class="line"><span class="variable">$shadows</span>: ();</div><div class="line"></div><div class="line">@<span class="keyword">for</span> <span class="variable">$i</span> from 1 through <span class="variable">$shadow-count</span> &#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line"></div><div class="line">  <span class="variable">$shadow</span>: ...;</div><div class="line">  <span class="variable">$shadows</span>: append(<span class="variable">$shadows</span>, <span class="variable">$shadow</span>, <span class="string">'comma'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">@return <span class="variable">$shadows</span>;</div></pre></td></tr></table></figure>
<p>来来来看下$shadow怎么算。非常非常简单哟就两个三角函数哟。用角度的正弦值算出X轴位移，用余弦值算出Y轴位移。</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$x</span>: sin(<span class="number">0deg</span> + <span class="variable">$direction</span>) * (<span class="variable">$i</span> * <span class="variable">$length</span> / <span class="variable">$shadow-count</span>);</div><div class="line"><span class="variable">$y</span>: cos(<span class="number">0deg</span> + <span class="variable">$direction</span>) * (<span class="variable">$i</span> * <span class="variable">$length</span> / <span class="variable">$shadow-count</span>);</div></pre></td></tr></table></figure>
<p>这里用<code>0deg</code>和<code>$direction</code>相加的用意在于使得结果自动转化为前者的单位表示, 就是说<code>$direction</code>是渐变或者弧度也没关系，会自动转换成角度(deg)。</p>
<p>颜色的话事就比较多了，根据<code>$fade</code>的不同有三种情况, 如果<code>$fade</code>是:</p>
<ul>
<li><code>false</code>， 那么输出就是<code>$color</code></li>
<li><code>true</code>， 那么输出是从<code>$color</code>到透明的一个中间值</li>
<li>一个颜色, 那么输出就是<code>$color</code>到<code>$fade</code>的一个中间值</li>
</ul>
<p>除了第一种情况，我们在每次循环中都要重新计算颜色.</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// If `$fade` is `false`</span></div><div class="line"><span class="variable">$current-color</span>: <span class="variable">$color</span>;</div><div class="line"></div><div class="line"><span class="comment">// If `$fade` is a color</span></div><div class="line">@<span class="keyword">if</span> type-of(<span class="variable">$fade</span>) == <span class="string">'color'</span> &#123;</div><div class="line">  <span class="variable">$current-color</span>: mix(<span class="variable">$fade</span>, <span class="variable">$color</span>, (<span class="variable">$i</span> / <span class="variable">$shadow-count</span> * <span class="number">100</span>);</div><div class="line"><span class="comment">// If `$fade` is `true`</span></div><div class="line">)&#125; @<span class="keyword">else</span> if <span class="variable">$fade</span> &#123;</div><div class="line">  <span class="variable">$current-color</span>: rgba(<span class="variable">$color</span>, <span class="number">1</span> - <span class="variable">$i</span> / <span class="variable">$shadow-count</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样一层的<code>$shadow</code>就算出来了。</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$shadow</span>: <span class="variable">$x</span> <span class="variable">$y</span> <span class="number">0</span> <span class="variable">$current-color</span>;</div></pre></td></tr></table></figure>
<h2 id="完成版函数">完成版函数</h2>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">@function long-shadow(<span class="variable">$direction</span>, <span class="variable">$length</span>, <span class="variable">$color</span>, <span class="variable">$fade</span>: false, <span class="variable">$shadow-count</span>: 100) &#123;</div><div class="line">  <span class="variable">$shadows</span>: ();</div><div class="line">  <span class="variable">$conversion-map</span>: (</div><div class="line">    to top: <span class="number">180deg</span>,</div><div class="line">    to top right: <span class="number">135deg</span>,</div><div class="line">    to right top: <span class="number">135deg</span>,</div><div class="line">    to right: <span class="number">90deg</span>,</div><div class="line">    to bottom right: <span class="number">45deg</span>,</div><div class="line">    to right bottom: <span class="number">45deg</span>,</div><div class="line">    to bottom: <span class="number">0deg</span>,</div><div class="line">    to bottom left: <span class="number">315deg</span>,</div><div class="line">    to left bottom: <span class="number">315deg</span>,</div><div class="line">    to left: <span class="number">270deg</span>,</div><div class="line">    to left top: <span class="number">225deg</span>,</div><div class="line">    to top left: <span class="number">225deg</span></div><div class="line">  );</div><div class="line"></div><div class="line">  @<span class="keyword">if</span> map-has-key(<span class="variable">$conversion-map</span>, <span class="variable">$direction</span>) &#123;</div><div class="line">    <span class="variable">$direction</span>: map-get(<span class="variable">$conversion-map</span>, <span class="variable">$direction</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @<span class="keyword">for</span> <span class="variable">$i</span> from 1 through <span class="variable">$shadow-count</span> &#123;</div><div class="line">    <span class="variable">$current-step</span>: (<span class="variable">$i</span> * <span class="variable">$length</span> / <span class="variable">$shadow-count</span>);</div><div class="line">    <span class="variable">$current-color</span>: if(not <span class="variable">$fade</span>, <span class="variable">$color</span>, if(type-of(<span class="variable">$fade</span>) == <span class="string">'color'</span>,  mix(<span class="variable">$fade</span>, <span class="variable">$color</span>, (<span class="variable">$i</span> / <span class="variable">$shadow-count</span> * <span class="number">100</span>)), rgba(<span class="variable">$color</span>, <span class="number">1</span> - <span class="variable">$i</span> / <span class="variable">$shadow-count</span>)));</div><div class="line"></div><div class="line">    <span class="variable">$shadows</span>: append(<span class="variable">$shadows</span>, (sin(<span class="number">0deg</span> + <span class="variable">$direction</span>) * <span class="variable">$current-step</span>) (cos(<span class="number">0deg</span> + <span class="variable">$direction</span>) * <span class="variable">$current-step</span>) <span class="number">0</span> <span class="variable">$current-color</span>, <span class="string">'comma'</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @return <span class="variable">$shadows</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="举几个栗子">举几个栗子</h2>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.foo</span> &#123;</div><div class="line">  <span class="attribute">text-shadow</span>: long-shadow(</div><div class="line">    // Shadow should have an angle of <span class="number">42</span> degrees</div><div class="line">    <span class="variable">$direction</span>: <span class="number">42deg</span>,</div><div class="line">    // Shadow should be contain within a <span class="number">100</span>x100 box</div><div class="line">    <span class="variable">$length</span>: <span class="number">100px</span>,</div><div class="line">    // Shadow should start this color</div><div class="line">    <span class="variable">$color</span>: <span class="number">#16a085</span>,</div><div class="line">    // To finish this color</div><div class="line">    <span class="variable">$fade</span>: <span class="number">#1abc9c</span></div><div class="line">  );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<div class="figure">
<img src="http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2015/01/1421924364kpHbb6e.png" alt="Hello">
<p class="caption">Hello</p>
</div>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.bar</span> &#123;</div><div class="line">  <span class="attribute">box-shadow</span>: long-shadow(</div><div class="line">    // Shadow should go to bottom right (<span class="number">45deg</span>)</div><div class="line">    <span class="variable">$direction</span>: to left,</div><div class="line">    // With a length of <span class="number">15em</span></div><div class="line">    <span class="variable">$length</span>: <span class="number">15em</span>,</div><div class="line">    // From this color</div><div class="line">    <span class="variable">$color</span>: <span class="number">#2980b9</span>,</div><div class="line">    // To this color</div><div class="line">    <span class="variable">$fade</span>: <span class="number">#e67e22</span></div><div class="line">  );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<div class="figure">
<img src="http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2015/01/1421924374uo6625L.png" alt="example 2">
<p class="caption">example 2</p>
</div>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.baz</span> &#123;</div><div class="line">  <span class="attribute">box-shadow</span>: long-shadow(</div><div class="line">    // Shadow should have an angle of <span class="number">25deg</span></div><div class="line">    <span class="variable">$direction</span>: -<span class="number">125deg</span>,</div><div class="line">    // Spread on <span class="number">120px</span></div><div class="line">    <span class="variable">$length</span>: <span class="number">120px</span>,</div><div class="line">    // From this color</div><div class="line">    <span class="variable">$color</span>: <span class="number">#8e44ad</span>,</div><div class="line">    // To transparent</div><div class="line">    <span class="variable">$fade</span>: true,</div><div class="line">    // With only <span class="number">10</span> shadows</div><div class="line">    <span class="variable">$shadow-count</span>: <span class="number">10</span></div><div class="line">  )</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<div class="figure">
<img src="http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2015/01/1421924369ECeMqZF.png" alt="example 3">
<p class="caption">example 3</p>
</div>
<p>最后可以去看看<a href="" title="http://codepen.io/SitePoint/pen/bNWXdQ">这个pen</a>。</p>
<h2 id="参考文章">参考文章</h2>
<ul>
<li><a href="" title="http://www.sitepoint.com/ultimate-long-shadow-sass-mixin">The Ultimate Long-shadow Sass Mixin</a></li>
</ul>
<p>[img_ex_3]: (http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2015/01/1421924369ECeMqZF.png)</p>
]]></content>
    
    <summary type="html">
    
      15行开启投影新时代
    
    </summary>
    
      <category term="前端" scheme="http://hikerpig.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="sass" scheme="http://hikerpig.github.io/tags/sass/"/>
    
  </entry>
  
  <entry>
    <title>git hook中的$GIT_DIR</title>
    <link href="http://hikerpig.github.io/2014/03/23/2014-03-23-git-hook%E4%B8%AD%E7%9A%84$GIT_DIR%E5%8F%98%E9%87%8F/"/>
    <id>http://hikerpig.github.io/2014/03/23/2014-03-23-git-hook中的$GIT_DIR变量/</id>
    <published>2014-03-23T02:09:12.000Z</published>
    <updated>2015-01-28T04:09:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>一直使用githook post-update来部署我的jekyll博客，每次push到远程git仓库的时候，在vps上的生产目录会自动更新和重新生成页面和静态资源， post-update文件是这样的：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/usr/zsh</span></div><div class="line"></div><div class="line">branchName=$(git rev-parse --symbolic --abbrev-ref <span class="variable">$1</span>)</div><div class="line">HOME=/home/******</div><div class="line">BLOG_DIR=<span class="variable">$HOME</span>/*******</div><div class="line"></div><div class="line"><span class="built_in">cd</span> <span class="variable">$BLOG_DIR</span></div><div class="line">git pull origin <span class="variable">$branchName</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> [ <span class="variable">$branchName</span> = <span class="string">"master"</span> ]; <span class="keyword">then</span></div><div class="line">  [ -s <span class="variable">$HOME</span>/.nvm/nvm.sh ] &amp;&amp; . <span class="variable">$HOME</span>/.nvm/nvm.sh <span class="comment"># This loads NVM</span></div><div class="line">  <span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$HOME</span>/.rvm/bin <span class="comment"># Add RVM to PATH for scripting</span></div><div class="line">  nvm use 113</div><div class="line">  <span class="variable">$HOME</span>/.rvm/bin/rvm use ruby-2.0.0</div><div class="line">  jekyll build</div><div class="line">  make front</div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="built_in">exec</span> git update-server-info</div></pre></td></tr></table></figure>
<p>但是执行的时候会出现一个奇怪的问题：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Counting objects: 5, <span class="keyword">done</span>.</div><div class="line">Delta compression using up to 4 threads.</div><div class="line">Compressing objects: 100% (3/3), <span class="keyword">done</span>.</div><div class="line">Writing objects: 100% (3/3), 281 bytes | 0 bytes/s, <span class="keyword">done</span>.</div><div class="line">Total 3 (delta 2), reused 0 (delta 0)</div><div class="line">remote: fatal: Not a git repository: <span class="string">'.'</span></div><div class="line">...</div></pre></td></tr></table></figure>
<p>最后的这一句表示出错了，而且git pull也没有正确进行。</p>
<p>有人在<a href="" title="http://stackoverflow.com/questions/4043609/getting-fatal-not-a-git-repository-when-using-post-update-hook-to-execut">这个问题</a>中谈到解决方法，改进的部分在这里：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> <span class="variable">$BLOG_DIR</span> || <span class="built_in">exit</span></div><div class="line"><span class="built_in">unset</span> GIT_DIR</div><div class="line">git pull origin <span class="variable">$branchName</span></div></pre></td></tr></table></figure>
<p>之后果然就可以正确地pull代码了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一直使用githook post-update来部署我的jekyll博客，每次push到远程git仓库的时候，在vps上的生产目录会自动更新和重新生成页面和静态资源， post-update文件是这样的：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;
    
    </summary>
    
      <category term="工具" scheme="http://hikerpig.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Git" scheme="http://hikerpig.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>git小技巧七七八八</title>
    <link href="http://hikerpig.github.io/2014/03/21/2014-03-21-git%E5%B0%8F%E6%8A%80%E5%B7%A7%E4%B8%83%E4%B8%83%E5%85%AB%E5%85%AB/"/>
    <id>http://hikerpig.github.io/2014/03/21/2014-03-21-git小技巧七七八八/</id>
    <published>2014-03-21T02:09:12.000Z</published>
    <updated>2017-08-05T07:10:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="利用git-rev-parse">利用git rev-parse</h2>
<p>刚来公司的时候，电脑上的项目运行环境还没有搭配好，一些前端的改动只能推到测试服务器上才能看见效果。因此在开发的时候要频繁地切换和合并开发分支到与测试环境的部署相关联的测试分支上,频繁地手敲命令checkout -&gt; pull -&gt; 等代码p…pu…pul…pulled-&gt; merge-&gt; oh conflict!-&gt; fix conflict -&gt; push -&gt; checkout 然后才查看页面继续开发。 前面的各种点点点急刹人,于是我写了个小脚本,省下了敲分支名的时间:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line">cur_branch=`git rev-parse --abbrev-ref HEAD`</div><div class="line">git checkout develop &amp;&amp; git pull &amp;&amp; git merge <span class="variable">$cur_branch</span> &amp;&amp; git push origin &amp;&amp; git checkout <span class="variable">$cur_branch</span></div></pre></td></tr></table></figure>
<p>更多命令参数用 <code>man</code> 或者看<a href="https://git-scm.com/docs/git-rev-parse" target="_blank" rel="external">git-scm 中相关内容</a>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;利用git-rev-parse&quot;&gt;利用git rev-parse&lt;/h2&gt;
&lt;p&gt;刚来公司的时候，电脑上的项目运行环境还没有搭配好，一些前端的改动只能推到测试服务器上才能看见效果。因此在开发的时候要频繁地切换和合并开发分支到与测试环境的部署相关联的测试分支上,频繁
    
    </summary>
    
      <category term="Tips" scheme="http://hikerpig.github.io/categories/Tips/"/>
    
    
      <category term="git" scheme="http://hikerpig.github.io/tags/git/"/>
    
      <category term="tip" scheme="http://hikerpig.github.io/tags/tip/"/>
    
  </entry>
  
  <entry>
    <title>Web开发国内常用源</title>
    <link href="http://hikerpig.github.io/2013/12/14/2014-03-26-web%E5%BC%80%E5%8F%91%E5%9B%BD%E5%86%85%E5%B8%B8%E7%94%A8%E6%BA%90/"/>
    <id>http://hikerpig.github.io/2013/12/14/2014-03-26-web开发国内常用源/</id>
    <published>2013-12-14T02:09:12.000Z</published>
    <updated>2015-02-05T04:09:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>国内配置开发环境的时候经常会要用到的这几个源, thanks to G*F*W ，我们自行get找国内镜像的能力:</p>
<h3 id="python-pypi-pip">Python PyPI (pip)</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ nano ~/.pip/pip.conf</div></pre></td></tr></table></figure>
<p>添加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[global]</div><div class="line">index-url = http://pypi.douban.com/simple</div></pre></td></tr></table></figure>
<h3 id="node-npm">Node NPM</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ nano ~/.npmrc</div></pre></td></tr></table></figure>
<p>添加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">registry = http://registry.cnpmjs.org</div></pre></td></tr></table></figure>
<blockquote>
<p><a href="http://cnpmjs.org/" target="_blank" rel="external">CNPM的源</a></p>
</blockquote>
<h3 id="rvm-and-ruby-gem">RVM and Ruby gem</h3>
<h5 id="rvm">RVM</h5>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sed -i .bak <span class="string">'s!cache.ruby-lang.org/pub/ruby!ruby.taobao.org/mirrors/ruby!'</span> <span class="variable">$rvm_path</span>/config/db</div></pre></td></tr></table></figure>
<h5 id="ruby-gem">Ruby Gem</h5>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ gem sources --remove https://rubygems.org/</div><div class="line">$ gem sources -a http://ruby.taobao.org/</div></pre></td></tr></table></figure>
<blockquote>
<p><a href="http://ruby.taobao.org/" target="_blank" rel="external">淘宝源</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;国内配置开发环境的时候经常会要用到的这几个源, thanks to G*F*W ，我们自行get找国内镜像的能力:&lt;/p&gt;
&lt;h3 id=&quot;python-pypi-pip&quot;&gt;Python PyPI (pip)&lt;/h3&gt;
&lt;figure class=&quot;highlight ba
    
    </summary>
    
      <category term="资源" scheme="http://hikerpig.github.io/categories/%E8%B5%84%E6%BA%90/"/>
    
    
      <category term="NPM" scheme="http://hikerpig.github.io/tags/NPM/"/>
    
  </entry>
  
</feed>
