<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HP goes FE</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://hikerpig.github.io/"/>
  <updated>2018-07-31T06:17:08.508Z</updated>
  <id>http://hikerpig.github.io/</id>
  
  <author>
    <name>Hikerpig</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Goodbye My Santa Monica Dream 🎵</title>
    <link href="http://hikerpig.github.io/2018/07/31/2018-07-31-Goodbye%20My%20Santa%20Monica%20Dream/"/>
    <id>http://hikerpig.github.io/2018/07/31/2018-07-31-Goodbye My Santa Monica Dream/</id>
    <published>2018-07-31T05:55:22.273Z</published>
    <updated>2018-07-31T06:17:08.508Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=30496500&amp;auto=1&amp;height=66"></iframe><p>从《Life is strange》的原声带中发现的瑰宝，来自澳大利亚的兄妹组合 <a href="https://music.douban.com/musician/100215/" target="_blank" rel="noopener">Angus &amp; Julia Stone</a> 的一首略显忧伤的曲子，他俩前几年的曲风，小清新中带着些许迷幻。</p><p>原曲使用 Open D 调弦，变调夹 3 品，感谢 <a href="http://www.goliathguitartutorials.com" target="_blank" rel="noopener">Goliath Guitar</a> 在 <a href="https://www.youtube.com/watch?v=sOJMMpdWScM" target="_blank" rel="noopener">Youtube 上的教程</a>，讲解详细，也给出了还原度几乎 100% 的伴奏谱子。pdf 谱例可以<a href="http://www.goliathguitartutorials.com/santa-monica-dream.html" target="_blank" rel="noopener">去这里下载</a>。</p><img src="//images-hikerpig.oss-cn-beijing.aliyuncs.com/image/tabs/santa_monica_dream_-_angus_and_julia.jpg" alt="undefined">]]></content>
    
    <summary type="html">
    
      
      
        &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;amp
      
    
    </summary>
    
      <category term="杂记" scheme="http://hikerpig.github.io/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="吉他" scheme="http://hikerpig.github.io/tags/%E5%90%89%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>Try Rust WebAssembly</title>
    <link href="http://hikerpig.github.io/2018/07/07/2018-05-03-Try-Rust-Webassemly/"/>
    <id>http://hikerpig.github.io/2018/07/07/2018-05-03-Try-Rust-Webassemly/</id>
    <published>2018-07-07T15:09:32.282Z</published>
    <updated>2018-07-07T15:09:32.282Z</updated>
    
    <content type="html"><![CDATA[<p>在公司项目里的一个小角落，尝试使用 Rust + WebAssembly 加速应用里部分计算</p><h2 id="选择">选择</h2><p>首先要分清项目里 WebAssembly 的定位</p><ol type="1"><li>应用主体：完成绝大多数逻辑，JS 只作为加载入口和少部分事件绑定桥梁</li><li>工具库：分担一些复杂和耗时的计算，由 JS 决定什么时候调用 wasm 模块函数，通常情况下，由 JS 管理 wasm 的线性内存</li></ol><p>此次小 Demo 属于第 2 种情况</p><h3 id="选择-rust-target">选择 Rust Target</h3><p>rust 支持 <code>wasm32-unknown-unknown</code> 和 <code>wasm32-unknown-emscripten</code> 两种编译目标，后者除了wasm 外，还生成了 emscripten 风格的 JS 作为入口，与 asm.js 的调用风格统一。不过会添加好些运行时代码，与 wasm 之间也隔着一层封装。基于上一项的选择，我们选择前者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rustup target add wasm32-unknown-unknown</span><br></pre></td></tr></table></figure><h1 id="webassembly-考量">WebAssembly 考量</h1><h2 id="数据类型问题">数据类型问题</h2><p>WebAssembly 当前只支持几种<a href="https://developer.mozilla.org/en-US/docs/WebAssembly/Understanding_the_text_format#Signatures_and_parameters" target="_blank" rel="noopener">有限的数字类型</a>，i32/i64/f32/f64，JS 与之交互时，除了 number 以外的值都要有序列化/反序列化处理。</p><h3 id="字符串">字符串</h3><p>可使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/TextEncoder" target="_blank" rel="noopener">TextEncoder/TextDecoder</a> 将 JS 字符串序列化为 utf-8 字节流，在 Rust 端先将字节流解析为字符串，再使用。</p><h3 id="数组">数组</h3><p>JS 直接操作 wasm 示例的内存，将数组数据写入，调用 wasm 方法时，将数组起始的指针以及数组长度作为参数。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rust 部分</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">unsafe</span> <span class="function"><span class="keyword">fn</span> <span class="title">load_image_data</span></span>(in_image_ptr: *<span class="keyword">mut</span> <span class="built_in">u8</span>, width: <span class="built_in">i32</span>, height: <span class="built_in">i32</span>) -\&gt; *<span class="keyword">const</span> <span class="built_in">u8</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> arr_len = (width * height * <span class="number">4</span>) <span class="keyword">as</span> <span class="built_in">usize</span>;</span><br><span class="line">  <span class="keyword">let</span> in_image_data = <span class="built_in">Vec</span>::from_raw_parts(in_image_ptr, arr_len, arr_len);</span><br><span class="line">  <span class="keyword">return</span> in_image_data.as_ptr();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// js 部分</span></span><br><span class="line"><span class="keyword">const</span> ctx = canvas.getContext(<span class="string">'2d'</span>)</span><br><span class="line"><span class="keyword">const</span> imageData = ctx.getImageData(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">50</span>)</span><br><span class="line"><span class="keyword">const</span> imgDataVecPtr = copyJsArrayToRust(<span class="keyword">this</span>.instanceExports, imageData.data)</span><br><span class="line">wasmExports.load_image_data(imgDataVecPtr, <span class="number">100</span>, <span class="number">50</span>)</span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><h2 id="上代码">上代码</h2><h3 id="rust-端">Rust 端</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.rs</span></span><br><span class="line"><span class="keyword">use</span> std::&#123;mem&#125;;</span><br><span class="line"><span class="keyword">use</span> std::ffi::CString;</span><br><span class="line"><span class="keyword">use</span> std::os::raw::&#123;c_char&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> &#123;</span><br><span class="line">  <span class="function"><span class="keyword">fn</span> <span class="title">clog</span></span>(ptr: *<span class="keyword">const</span> <span class="built_in">u8</span>, number: <span class="built_in">usize</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">js_log</span></span>(s: <span class="built_in">String</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="keyword">mut</span> _s = s.clone();</span><br><span class="line">  <span class="keyword">unsafe</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> m = _s.as_mut_vec().as_mut_ptr();</span><br><span class="line">  clog(m <span class="keyword">as</span> *<span class="keyword">const</span> <span class="built_in">u8</span>, _s.len());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[no_mangle]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">alloc</span></span>(size: <span class="built_in">usize</span>) -&gt; *<span class="keyword">const</span> <span class="built_in">u8</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> buf = <span class="built_in">Vec</span>::with_capacity(size);</span><br><span class="line">  <span class="keyword">let</span> ptr = buf.as_ptr();</span><br><span class="line">  mem::forget(buf); <span class="comment">// 让 rust 放弃对此段内存的控制权，此函数结束后该段内存对于 rust 来说是泄漏的状态，分配和管理权交给 JS</span></span><br><span class="line">  <span class="keyword">return</span> ptr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[no_mangle]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">log_something</span></span>(text_ptr: *<span class="keyword">mut</span> c_char) -&gt; *<span class="keyword">const</span> <span class="built_in">u8</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> text = CString::from_raw(text_ptr).into_string().unwrap();</span><br><span class="line">  js_log(text);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;&#125;  <span class="comment">// 留一个 main 确保 rust 能正常编译</span></span><br></pre></td></tr></table></figure><h3 id="js-端">JS 端</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// wasm-util.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> ModuleExports &#123;</span><br><span class="line">  memory: WebAssembly.Memory</span><br><span class="line">  alloc(len: <span class="built_in">number</span>): WasmMemPtr</span><br><span class="line">  log_something(text_ptr: <span class="built_in">number</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">loadWebAssembly</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">ModuleExports</span>&gt;(<span class="params">input: <span class="built_in">string</span>, imports: <span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Fetch the file and compile it</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> fetch(input).then(<span class="function"><span class="params">response</span> =&gt;</span> response.arrayBuffer())</span><br><span class="line">  .then(<span class="function"><span class="params">buffer</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Create the imports for the module, including the</span></span><br><span class="line">    <span class="comment">// standard dynamic library imports</span></span><br><span class="line">    imports = imports || &#123;&#125;</span><br><span class="line">    imports.env = imports.env || &#123;&#125;</span><br><span class="line">    <span class="keyword">if</span> (!imports.env.memory) &#123;</span><br><span class="line">  imports.env.memory = <span class="keyword">new</span> WebAssembly.Memory(&#123; initial: <span class="number">1</span> &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create the instance.</span></span><br><span class="line">    <span class="keyword">return</span> WebAssembly.instantiate(buffer, imports)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">copyJsStringToRust</span>(<span class="params"><span class="built_in">module</span>: ModuleExports, str: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> utf8Encoder = <span class="keyword">new</span> TextEncoder()</span><br><span class="line">  <span class="keyword">const</span> string_buffer = utf8Encoder.encode(str)</span><br><span class="line">  <span class="keyword">const</span> len = string_buffer.length</span><br><span class="line">  <span class="keyword">const</span> ptr = <span class="built_in">module</span>.alloc(len + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> memory = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(<span class="built_in">module</span>.memory.buffer, ptr)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    memory[i] = string_buffer[i]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  memory[len] = <span class="number">0</span> <span class="comment">// cstring end</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ptr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">decodeRustString</span>(<span class="params"><span class="built_in">module</span>: ModuleExports, ptr: WasmMemPtr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> collectCString = <span class="function"><span class="keyword">function</span>*(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> memory = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(<span class="built_in">module</span>.memory.buffer)</span><br><span class="line">  <span class="keyword">while</span> (memory[ptr] !== <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (memory[ptr] === <span class="literal">undefined</span>) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Tried to read undef mem'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">yield</span> memory[ptr]</span><br><span class="line">    ptr += <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> buffer_as_u8 = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(collectCString())</span><br><span class="line">  <span class="keyword">const</span> utf8Decoder = <span class="keyword">new</span> TextDecoder()</span><br><span class="line">  <span class="keyword">const</span> buffer_as_utf8 = utf8Decoder.decode(buffer_as_u8)</span><br><span class="line">  <span class="keyword">return</span> buffer_as_utf8</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">copyJsArrayToRust</span>(<span class="params">exports: ModuleExports, arr: <span class="built_in">number</span>[] | <span class="built_in">Uint8ClampedArray</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; memory, alloc &#125; = exports</span><br><span class="line">  <span class="keyword">const</span> rVecPtr = alloc(arr.length)</span><br><span class="line">  <span class="keyword">const</span> asBytes = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(memory.buffer, rVecPtr, arr.length)</span><br><span class="line">  asBytes.set(arr)</span><br><span class="line">  <span class="keyword">return</span> rVecPtr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>demo.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;copyJsStringToRust, decodeRustString&#125; <span class="keyword">from</span> <span class="string">'./wasm-util'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> importObj = &#123;</span><br><span class="line">  env: &#123;</span><br><span class="line">    clog: <span class="function">(<span class="params">ptr: WasmMemPtr, <span class="built_in">number</span>: <span class="built_in">number</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> str = decodeRustString(<span class="keyword">this</span>.rut.instanceExports, ptr)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"[rust] "</span> + str)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">loadWebAssembly(<span class="string">'demo.wasm'</span>).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> strPtr = copyJsStringToRust(wasmExports, <span class="string">'Heyhey you you'</span>)</span><br><span class="line">  wasmExports.log_something(strPtr)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// '[rust] Heyhey you you'</span></span><br></pre></td></tr></table></figure><h2 id="编译-wasm">编译 WASM</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo rustc --release --target=wasm32-unknown-unknown</span><br></pre></td></tr></table></figure><h2 id="wasm-瘦身">WASM 瘦身</h2><p>参见<a href="https://rust-lang-nursery.github.io/rust-wasm/game-of-life/code-size.html" title="WASM 瘦身" target="_blank" rel="noopener">此文</a></p><h3 id="cargo.toml-中一些设定">Cargo.toml 中一些设定</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[profile.release]</span><br><span class="line">debug = false</span><br><span class="line">lto = true</span><br></pre></td></tr></table></figure><h1 id="例子">例子</h1><ul><li><a href="https://www.hellorust.com/demos/" target="_blank" rel="noopener">Hello Rust</a></li><li>https://arkada38.github.io/2017/12/04/rust-wasm-string-to-uppercase/</li><li>https://stackoverflow.com/questions/49014610/passing-a-javascript-string-to-a-rust-function-compiled-to-webassembly</li><li><a href="https://kripken.github.io/blog/binaryen/2018/04/18/rust-emscripten.html" target="_blank" rel="noopener">Small WebAssembly Binaries with Rust + Emscripten</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在公司项目里的一个小角落，尝试使用 Rust + WebAssembly 加速应用里部分计算&lt;/p&gt;
&lt;h2 id=&quot;选择&quot;&gt;选择&lt;/h2&gt;
&lt;p&gt;首先要分清项目里 WebAssembly 的定位&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;应用主体：完成绝大多数逻辑，JS
      
    
    </summary>
    
      <category term="前端" scheme="http://hikerpig.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="WebAssembly" scheme="http://hikerpig.github.io/tags/WebAssembly/"/>
    
      <category term="Rust" scheme="http://hikerpig.github.io/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>Vuex 模块动态注册的一些实践经验</title>
    <link href="http://hikerpig.github.io/2018/07/07/2018-07-03-Vuex-Dynamic-Module-Hints/"/>
    <id>http://hikerpig.github.io/2018/07/07/2018-07-03-Vuex-Dynamic-Module-Hints/</id>
    <published>2018-07-07T15:09:32.282Z</published>
    <updated>2018-07-09T05:11:19.268Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>构建大型 SPA 应用时，代码分割和懒加载是比较常用的优化手段，在 Vue 生态下，使用 vue-router 很容易实现组件的懒加载。</p><p>但应用里除了组件，还有庞大的业务逻辑，这部分如何分割和懒加载比较合适呢？</p><p>使用 Vuex 管理状态的话，其提供了方法 <code>registerModule</code> 用于<a href="https://vuex.vuejs.org/guide/modules.html#dynamic-module-registration" target="_blank" rel="noopener">动态注册</a> Module。</p><p>因此某个页面独有的业务逻辑和状态管理，在初始化全局 store 的时候可以不用引入，之后在该页面路由组件中再引入和注册 Vuex 模块。</p><h1 id="简单的示例">简单的示例</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PageA = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'./views/PageA.js'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'/page-a'</span>, <span class="attr">component</span>: PageA &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>简单的 Vuex 模块：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store/modules/page-a.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> VUEX_NS = <span class="string">'page-a'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  namespaced: <span class="literal">true</span>,</span><br><span class="line">  state() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      inventory: &#123;</span><br><span class="line">        list: []</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  getters: &#123;</span><br><span class="line">    inventoryList(state) &#123;</span><br><span class="line">      <span class="keyword">return</span> state.inventory.list</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实践时遭遇了几个问题：</p><h2 id="问题-1服务器客户端-在尚未注册-module-时调用其下的-actionmutation-vuex-因找不到对应函数而出错">问题 1：服务器/客户端 在尚未注册 Module 时，调用其下的 action/mutation ，Vuex 因找不到对应函数而出错</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// views/PageA.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> PAGE_A_MODULE, &#123; VUEX_NS &#125; <span class="keyword">from</span> <span class="string">'store/modules/page-a'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'PageA'</span>,</span><br><span class="line">  beforeCreate() &#123;</span><br><span class="line">    <span class="keyword">this</span>.$store.registerModule(VUEX_NS, PAGE_A_MODULE)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.$store.dispatch(<span class="string">`<span class="subst">$&#123;VUEX_NS&#125;</span>/fetchInventory`</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="考虑服务器端预取数据注入给客户端的时候">考虑服务器端预取数据注入给客户端的时候</h3><p>客户（浏览器）端初始化代码，在初始化 router 之前，给 Vuex 全局 store 注入数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// entry-client.js</span></span><br><span class="line">store.replaceState(<span class="built_in">window</span>.__INITIAL_STATE__)</span><br></pre></td></tr></table></figure><p>此处的 <code>__INITIAL_STATE__</code> 是 Vue SSR 提供的一个功能，使得浏览器端可以复用服务器端已经预取过的数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在所有预取钩子(preFetch hook) resolve 后，</span></span><br><span class="line"><span class="comment">// 我们的 store 现在已经填充入渲染应用程序所需的状态。</span></span><br><span class="line"><span class="comment">// 当我们将状态附加到上下文，</span></span><br><span class="line"><span class="comment">// 并且 `template` 选项用于 renderer 时，</span></span><br><span class="line"><span class="comment">// 状态将自动序列化为 `window.__INITIAL_STATE__`，并注入 HTML。</span></span><br><span class="line">context.state = store.state</span><br></pre></td></tr></table></figure><p>此处的 <code>asyncData</code> 与 <a href="https://ssr.vuejs.org/zh/guide/data.html#%E6%95%B0%E6%8D%AE%E9%A2%84%E5%8F%96%E5%AD%98%E5%82%A8%E5%AE%B9%E5%99%A8-data-store" target="_blank" rel="noopener">Vue SSR 文档中的例子</a>类似，与 Nuxt.js 中的同名函数用法略有不同。</p><p><code>prepareVuex</code> 为自定义的组件钩子函数，会先于 asyncData 调用，具体过程之后探讨。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> export default &#123;</span><br><span class="line">   name: 'PageA',</span><br><span class="line"><span class="deletion">-  beforeCreate() &#123;</span></span><br><span class="line"><span class="deletion">-    this.$store.registerModule(VUEX_NS, PAGE_A_MODULE)</span></span><br><span class="line"><span class="deletion">-    return this.$store.dispatch(`$&#123;VUEX_NS&#125;/fetchInventory`)</span></span><br><span class="line"><span class="addition">+  prepareVuex(&#123; store &#125;) &#123;</span></span><br><span class="line"><span class="addition">+    store.registerModule(VUEX_NS, PAGE_A_MODULE)</span></span><br><span class="line"><span class="addition">+  &#125;,</span></span><br><span class="line"><span class="addition">+  asyncData(&#123; store &#125;) &#123;</span></span><br><span class="line"><span class="addition">+    return store.dispatch(`$&#123;VUEX_NS&#125;/fetchInventory`)</span></span><br><span class="line">   &#125;,</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>此时会遇见</p><h2 id="问题2-客户端没有用上服务器端预取的数据">问题2: 客户端没有用上服务器端预取的数据</h2><p>解决方式：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> export default &#123;</span><br><span class="line">   name: 'PageA',</span><br><span class="line"><span class="deletion">-  prepareVuex(&#123; store &#125;) &#123;</span></span><br><span class="line"><span class="deletion">-    store.registerModule(VUEX_NS, PAGE_A_MODULE)</span></span><br><span class="line"><span class="addition">+  prepareVuex(&#123; store, isClientInitialRoute &#125;) &#123;</span></span><br><span class="line"><span class="addition">+    store.registerModule(VUEX_NS, PAGE_A_MODULE, &#123; preserveState: isClientInitialRoute &#125;)</span></span><br><span class="line">   &#125;,</span><br><span class="line">   asyncData(&#123; store &#125;) &#123;</span><br><span class="line">     return store.dispatch(`$&#123;VUEX_NS&#125;/fetchInventory`)</span><br><span class="line">   &#125;,</span><br><span class="line"><span class="addition">+  beforeDestroy() &#123;</span></span><br><span class="line"><span class="addition">+    // 销毁该模块</span></span><br><span class="line"><span class="addition">+    this.$store.unregisterModule(VUEX_NS)</span></span><br><span class="line"><span class="addition">+  &#125;</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>注册 Vuex 模块的时候使用了 <code>preserveState</code> ，若启用此选项，注册 Module 时若 <code>store.state[namespace]</code> 下已存在数据，便不会使用声明 vuex 模块时的初始 state 覆盖已有数据。但需要注意，若 state 中没有 namespace 相应数据却开启了此选项，Vuex 还是会报错。因此此处添加了一个输入参数 <code>isClientInitialRoute</code> ， 只有在客户端初次进入页面（可以使用服务器预取数据）时才开启 <code>preserveState</code> 选项。</p><h2 id="问题3-组件热更新时vuex-模块被销毁">问题3: 组件热更新时，Vuex 模块被销毁</h2><p>开发期间使用 HotModuleReplacementPlugin 和 vue-loader，若改变了 PageA.js 中的代码，会触发热更新。在 <a href="https://github.com/vuejs/vue-hot-reload-api/blob/master/src/index.js" target="_blank" rel="noopener">vue-hot-reload-api</a> 中，当使用 vue-hot-reload-api 的 <code>reload</code> 方法处理组件实例时，该实例会被销毁而后重新创建。<code>beforeDestroy</code> 中销毁了 Vuex 的 <code>page-a</code> 模块，却没有调用 <code>prepareVuex</code> 方法重新注册，因此热更新之后，使用该模块也会报错。</p><p>解决方案：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">   asyncData(&#123; store &#125;) &#123;</span><br><span class="line">     return store.dispatch(`$&#123;VUEX_NS&#125;/fetchInventory`)</span><br><span class="line">   &#125;,</span><br><span class="line"><span class="deletion">-  beforeDestroy() &#123;</span></span><br><span class="line"><span class="deletion">-    // 销毁该模块</span></span><br><span class="line"><span class="deletion">-    this.$store.unregisterModule(VUEX_NS)</span></span><br><span class="line"><span class="addition">+  beforeRouteLeave(to, from, next) &#123;</span></span><br><span class="line"><span class="addition">+    this.$once('hook:beforeDestroy', () =&gt; &#123;</span></span><br><span class="line"><span class="addition">+      // 销毁该模块</span></span><br><span class="line"><span class="addition">+      this.$store.unregisterModule(VUEX_NS)</span></span><br><span class="line"><span class="addition">+    &#125;)</span></span><br><span class="line"><span class="addition">+    next()</span></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>仔细想想，注册模块的时机是与路由相关的（进入页面之前），那么销毁的时机也可以与路由相关。不过并不适合在 <code>beforeRouteLeave</code> 钩子中立刻销毁模块。因为根据以下 vue-router 文档内容，在此钩子被调用完成时，整个页面还是在正常工作的（第2步到第11步中间），仍未进入组件的 destroy 过程，此时销毁模块会导致依赖其的所有组件异常。</p><blockquote><p><cite><a href="https://router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E5%AE%8C%E6%95%B4%E7%9A%84%E5%AF%BC%E8%88%AA%E8%A7%A3%E6%9E%90%E6%B5%81%E7%A8%8B" target="_blank" rel="noopener">vue-router 文档中关于导航解析流程的部分</a></cite></p><ol type="1"><li>导航被触发。</li><li>在失活的组件里调用离开守卫。</li><li>调用全局的 beforeEach 守卫。</li><li>在重用的组件里调用 beforeRouteUpdate 守卫 (2.2+)。</li><li>在路由配置里调用 beforeEnter。</li><li>解析异步路由组件。</li><li>在被激活的组件里调用 beforeRouteEnter。</li><li>调用全局的 beforeResolve 守卫 (2.5+)。</li><li>导航被确认。</li><li>调用全局的 afterEach 钩子。</li><li>触发 DOM 更新。</li><li>用创建好的实例调用 beforeRouteEnter 守卫中传给 next 的回调函数。</li></ol></blockquote><p>因此安全的模块销毁时机需要在 DOM 更新中或后，旧的页面组件实例销毁过程调用时。</p><h1 id="相关代码">相关代码</h1><p>最后的 PageA.js：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> PAGE_A_MODULE, &#123; VUEX_NS &#125; <span class="keyword">from</span> <span class="string">'store/modules/page-a'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'PageA'</span>,</span><br><span class="line">  prepareVuex(&#123; store, isClientInitialRoute &#125;) &#123;</span><br><span class="line">    store.registerModule(VUEX_NS, PAGE_A_MODULE, &#123; <span class="attr">preserveState</span>: isClientInitialRoute &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  asyncData(&#123; store &#125;) &#123;</span><br><span class="line">    <span class="keyword">return</span> store.dispatch(<span class="string">`<span class="subst">$&#123;VUEX_NS&#125;</span>/fetchInventory`</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeRouteLeave(to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    <span class="keyword">this</span>.$once(<span class="string">'hook:beforeDestroy'</span>, () =&gt; &#123;</span><br><span class="line">      <span class="comment">// 销毁该模块</span></span><br><span class="line">      <span class="keyword">this</span>.$store.unregisterModule(VUEX_NS)</span><br><span class="line">    &#125;)</span><br><span class="line">    next()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两端的入口文件中相关代码如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router-util.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Vue, &#123; VueConstructor &#125; <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> VueCtor = VueConstructor&lt;<span class="built_in">any</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getHookFromComponent</span>(<span class="params">compo: <span class="built_in">any</span>, name: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> compo[name] || (compo.options &amp;&amp; compo.options[name])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">callComponentsHookWith</span>(<span class="params">compoList: VueCtor[], hookName: <span class="built_in">string</span>, context: <span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> compoList.map(<span class="function">(<span class="params">component</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> hook = getHookFromComponent(component, hookName)</span><br><span class="line">    <span class="keyword">if</span> (hook) &#123;</span><br><span class="line">      <span class="keyword">return</span> hook(context)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;).filter(_ =&gt; _)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// entry-server.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> context =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// set router's location</span></span><br><span class="line">    router.push(context.url)</span><br><span class="line"></span><br><span class="line">    router.onReady(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> matchedComponents = router.getMatchedComponents()</span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 加上 try/catch 避免此 block 内抛出的错误造成 promise unhandledRejection</span></span><br><span class="line">        callComponentsHookWith(matchedComponents, <span class="string">'prepareVuex'</span>, &#123; store &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> asyncDataResults = callComponentsHookWith(matchedComponents, <span class="string">'asyncData'</span>,</span><br><span class="line">          &#123;</span><br><span class="line">            store,</span><br><span class="line">            route: router.currentRoute,</span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br><span class="line">        <span class="built_in">Promise</span>.all(asyncDataResults).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          context.state = store.state</span><br><span class="line">          resolve(app)</span><br><span class="line">        &#125;).catch(reject)</span><br><span class="line"></span><br><span class="line">      &#125; <span class="keyword">catch</span>(err) &#123;</span><br><span class="line">        reject(err)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, reject)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// entry-client.js</span></span><br><span class="line"></span><br><span class="line">router.onReady(<span class="function">(<span class="params">initialRoute</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> initialMatched = router.getMatchedComponents(initialRoute)</span><br><span class="line">  callComponentsHookWith(initialMatched, <span class="string">'prepareVuex'</span>, &#123; store, <span class="attr">isClientInitialRoute</span>: <span class="literal">true</span> &#125;)</span><br><span class="line"></span><br><span class="line">  router.beforeResolve(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> matched = router.getMatchedComponents(to)</span><br><span class="line"></span><br><span class="line">    callComponentsHookWith(matched, <span class="string">'prepareVuex'</span>, &#123; store &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Promise</span>.all(callComponentsHookWith(activated, <span class="string">'asyncData'</span>, &#123; store, <span class="attr">route</span>: to &#125;))</span><br><span class="line">      .then(next)</span><br><span class="line">      .catch(next)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// actually mount to DOM</span></span><br><span class="line">  app.$mount(<span class="string">'#app'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;
&lt;p&gt;构建大型 SPA 应用时，代码分割和懒加载是比较常用的优化手段，在 Vue 生态下，使用 vue-router 很容易实现组件的懒加载。&lt;/p&gt;
&lt;p&gt;但应用里除了组件，还有庞大的业务逻辑，这部分如何分割和懒加载比较合适呢？&lt;/p&gt;

      
    
    </summary>
    
      <category term="前端" scheme="http://hikerpig.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Vue" scheme="http://hikerpig.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>用 Jest 单元测试基于 Vue 的项目</title>
    <link href="http://hikerpig.github.io/2018/04/09/2018-04-06-Write-Vue-Tests-in-Jest/"/>
    <id>http://hikerpig.github.io/2018/04/09/2018-04-06-Write-Vue-Tests-in-Jest/</id>
    <published>2018-04-09T06:13:02.179Z</published>
    <updated>2018-04-09T06:15:52.422Z</updated>
    
    <content type="html"><![CDATA[<p>为一个基于 Vue 的项目搭建测试框架，有两个比较成熟的选择，Mocha + Webpack + Karma，或是 Jest。</p><p>前者也是 vue-cli 默认脚手架里的测试方案，我们之前的项目也用了它，实际使用起来，感觉成也 Karma，败也 Karma，配置起来不是很顺手，导致测试必须在完整打包后才能进行，测试时间随着用例增加飞速增长。而且调试单个测试用例的时候冷启动时间太长。</p><p>最后采用了功能强大的 Jest。</p><h2 id="写测试">写测试</h2><h3 id="测试-vue-组件">测试 Vue 组件</h3><p>参见 Vue Cookbook 中关于<a href="https://vuejs.org/v2/cookbook/unit-testing-vue-components.html" target="_blank" rel="noopener">单元测试</a>的一章，以及 <a href="https://vue-test-utils.vuejs.org/en/" target="_blank" rel="noopener">vue test-utils 的文档</a> 。</p><h3 id="拦截网络请求">拦截网络请求</h3><p>由于目前请求都通过 axios，可以简单地通过对 axios 对象的劫持来实现这一需求，考虑 <a href="https://github.com/ctimmerm/axios-mock-adapter" target="_blank" rel="noopener">axios-mock-adapter</a> 插件。</p><h3 id="拦截定时器">拦截定时器</h3><p>看Jest 文档的 <a href="https://facebook.github.io/jest/docs/en/timer-mocks.html" target="_blank" rel="noopener">Timer Mocks</a> 一章。</p><h3 id="自定义-mock">自定义 Mock</h3><p>采用 Jest 一方面是因为它具有很方便的 Mock 方案，框架会自动探测 <code>__mocks__</code> 文件夹中的文件，例如如果新建 <code>__mocks__/axios.js</code>，测试中所有源码的 <code>require('axios')</code> 返回的对象都会是该文件的导出内容。详见文档中的 <a href="https://facebook.github.io/jest/docs/en/manual-mocks.html" target="_blank" rel="noopener">Manual Mocks</a> 一章。</p><h2 id="调试测试">调试测试</h2><p>以在 VSCode 中 Debug 的配置为例，以下为 <code>.vscode/launch.json</code> 示例，参考文章<a href="https://segmentfault.com/a/1190000011852541" target="_blank" rel="noopener">《在VS Code中调试Jest单元测试》</a>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"0.2.0"</span>,</span><br><span class="line">  <span class="attr">"configurations"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"node"</span>,</span><br><span class="line">      <span class="attr">"request"</span>: <span class="string">"launch"</span>,</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"Debug Current Jest Test"</span>,</span><br><span class="line">      <span class="attr">"program"</span>: <span class="string">"$&#123;workspaceRoot&#125;/node_modules/jest/bin/jest"</span>,</span><br><span class="line">      <span class="attr">"cwd"</span>: <span class="string">"$&#123;workspaceRoot&#125;"</span>,</span><br><span class="line">      <span class="attr">"env"</span>: &#123;</span><br><span class="line">        <span class="attr">"NODE_ENV"</span>: <span class="string">"test"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"args"</span>: [<span class="string">"--runInBand"</span>, <span class="string">"--env=jsdom"</span>, <span class="string">"$&#123;fileBasename&#125;"</span>],</span><br><span class="line">      <span class="attr">"runtimeArgs"</span>: [</span><br><span class="line">        <span class="string">"--inspect-brk"</span>,</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"sourceMaps"</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">"console"</span>: <span class="string">"integratedTerminal"</span>,</span><br><span class="line">      <span class="attr">"internalConsoleOptions"</span>: <span class="string">"neverOpen"</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"node"</span>,</span><br><span class="line">      <span class="attr">"request"</span>: <span class="string">"attach"</span>,</span><br><span class="line">      <span class="attr">"stopOnEntry"</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"Attach to node inspect-brk"</span>,</span><br><span class="line">      <span class="attr">"port"</span>: <span class="number">9229</span></span><br><span class="line">    &#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-vscode-启动测试">使用 VSCode 启动测试</h3><p>args 中的 <code>--runInBand</code> 和 <code>--env=jsdom</code> 都是 Jest 的配置项，详细的可查阅 <a href="https://facebook.github.io/jest/docs/en/cli.html" target="_blank" rel="noopener">jest cli 文档</a></p><p><code>${fileBasename}</code> 为 VSCode 配置提供的变量，在此处表明只让 Jest 运行当前打开文件描述的用例。</p><h3 id="通过调试协议连接进程">通过调试协议连接进程</h3><p>可以不通过 VSCode，而是直接使用命令 <code>node --inspect=9229 --inspect-brk ./node_modules/.bin/jest  --runInBand</code> 运行 jest，</p><p>第二个配置(request 为 ‘attach’)，连接一个开放 9229 为调试端口的已经在运行的 node 进程。</p><p>此种方式可选择其他实现了远程调试协议的IDE（例如 Webstorm）或浏览器（例如 <a href="https://zhuanlan.zhihu.com/p/30264842" target="_blank" rel="noopener">chrome://inspect</a> ）来实现断点调试等功能。</p><p>关于 Inspector 协议可看<a href="https://zhuanlan.zhihu.com/p/30264842" target="_blank" rel="noopener">此文章</a>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;为一个基于 Vue 的项目搭建测试框架，有两个比较成熟的选择，Mocha + Webpack + Karma，或是 Jest。&lt;/p&gt;
&lt;p&gt;前者也是 vue-cli 默认脚手架里的测试方案，我们之前的项目也用了它，实际使用起来，感觉成也 Karma，败也 Karma，配置
      
    
    </summary>
    
      <category term="前端" scheme="http://hikerpig.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Test" scheme="http://hikerpig.github.io/tags/Test/"/>
    
      <category term="Vue" scheme="http://hikerpig.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>在 Typescript 中继承 Error 对象</title>
    <link href="http://hikerpig.github.io/2018/04/02/2018-04-02-Customize-Error-in-Typescript/"/>
    <id>http://hikerpig.github.io/2018/04/02/2018-04-02-Customize-Error-in-Typescript/</id>
    <published>2018-04-02T09:46:33.724Z</published>
    <updated>2018-04-06T10:17:25.837Z</updated>
    
    <content type="html"><![CDATA[<p>通过 Typescript class 继承 Error 实现自定义错误类型时，遇到了一个坑。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> MyError <span class="keyword">extends</span> <span class="built_in">Error</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>但是运行起来：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> err = <span class="keyword">new</span> MyError()</span><br><span class="line">err <span class="keyword">instanceof</span> <span class="built_in">Error</span> <span class="comment">// true</span></span><br><span class="line">err <span class="keyword">instanceof</span> MyError  <span class="comment">// 结果竟然是 false</span></span><br></pre></td></tr></table></figure><h2 id="原因">原因</h2><p>使用 Babel/Typescript 编译出的代码有类似的问题</p><p>Typescript 2.7.2 编译出的代码</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> __extends = (<span class="keyword">this</span> &amp;&amp; <span class="keyword">this</span>.__extends) || (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> extendStatics = <span class="built_in">Object</span>.setPrototypeOf ||</span><br><span class="line">        (&#123; __proto__: [] &#125; <span class="keyword">instanceof</span> <span class="built_in">Array</span> &amp;&amp; <span class="function"><span class="keyword">function</span> (<span class="params">d, b</span>) </span>&#123; d.__proto__ = b; &#125;) ||</span><br><span class="line">        <span class="function"><span class="keyword">function</span> (<span class="params">d, b</span>) </span>&#123; <span class="keyword">for</span> (<span class="keyword">var</span> p <span class="keyword">in</span> b) <span class="keyword">if</span> (b.hasOwnProperty(p)) d[p] = b[p]; &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">d, b</span>) </span>&#123;</span><br><span class="line">        extendStatics(d, b);</span><br><span class="line">        <span class="function"><span class="keyword">function</span> __(<span class="params"></span>) </span>&#123; <span class="keyword">this</span>.constructor = d; &#125;</span><br><span class="line">        d.prototype = b === <span class="literal">null</span> ? <span class="built_in">Object</span>.create(b) : (__.prototype = b.prototype, <span class="keyword">new</span> __());</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="keyword">var</span> MyError = <span class="comment">/** @class */</span> (<span class="function"><span class="keyword">function</span> (<span class="params">_super</span>) </span>&#123;</span><br><span class="line">    __extends(MyError, _super);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">MyError</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 问题关键在这里</span></span><br><span class="line">        <span class="keyword">return</span> _super !== <span class="literal">null</span> &amp;&amp; _super.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>) || <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> MyError;</span><br><span class="line">&#125;(<span class="built_in">Error</span>));</span><br></pre></td></tr></table></figure><p>原因在于，Error 是一个特殊的存在，即是一个构造函数，也是一个普通函数。以下两种调用皆可返回 error object。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Error</span>(<span class="string">'message'</span>)</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'message'</span>)</span><br></pre></td></tr></table></figure><p>那么在调用以下函数时，_super 为 Error，返回的即是 <code>Error(this, arguments)</code>，而不是 <code>this</code> 。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_super !== <span class="literal">null</span> &amp;&amp; _super.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>) || <span class="keyword">this</span>;</span><br></pre></td></tr></table></figure><h2 id="在-typescript-中">在 Typescript 中</h2><p>翻了翻文档，Typescript 2.1 的一些 <a href="https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work" target="_blank" rel="noopener">breaking change</a> 导致对于一些原生对象(Error/Array/Map)的继承无法正常工作，应该就是由 generated code 的改变造成的。官方给出的一个建议是：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> FooError <span class="keyword">extends</span> <span class="built_in">Error</span> &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">m: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">super</span>(m)</span><br><span class="line">    <span class="comment">// 在 super 之后立刻调用，改变实例的 prototype.</span></span><br><span class="line">    <span class="built_in">Object</span>.setPrototypeOf(<span class="keyword">this</span>, FooError.prototype)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这个写法其实相当的傻，因为对于每一个子类的构建函数来说，在改变原型之前，是无法拿到正确的子类实例 ‘this.constructor’ 的，所以 <code>Object.setPrototypeOf</code> 需要出现在所有子类的构建函数中。</p><h2 id="解决方案">解决方案</h2><p>只好把原型继承拿回来了，最终解决方案：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ExtensibleError <span class="keyword">implements</span> <span class="built_in">Error</span> &#123;</span><br><span class="line">  message: <span class="built_in">string</span></span><br><span class="line">  name: <span class="built_in">string</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">message?: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="built_in">Error</span>.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.message = message || <span class="string">''</span></span><br><span class="line">    <span class="keyword">this</span>.name = <span class="keyword">this</span>.constructor.name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">Error</span>.captureStackTrace === <span class="string">'function'</span>) &#123;</span><br><span class="line">      <span class="built_in">Error</span>.captureStackTrace(<span class="keyword">this</span>, <span class="keyword">this</span>.constructor)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ExtensibleError.prototype = <span class="built_in">Object</span>.create(<span class="built_in">Error</span>.prototype)</span><br></pre></td></tr></table></figure><p>构建一个中间的辅助类，并不直接采用 class 继承 Error，而只实现 Error 接口，采用原型继承，此类的示例可经过 <code>instanceOf</code> 的检验。通过 <code>Error.captureStackTrac</code> 在初始化此类实例时能够捕获调用栈。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> MyError <span class="keyword">extends</span> ExtensibleError &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> err = <span class="keyword">new</span> MyError()</span><br><span class="line">err <span class="keyword">instanceof</span> ExtensibleError  <span class="comment">// true</span></span><br><span class="line">err <span class="keyword">instanceof</span> MyError  <span class="comment">// true</span></span><br><span class="line">err <span class="keyword">instanceof</span> <span class="built_in">Error</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>参考</p><ul><li><a href="https://github.com/thundernet8/Blog/issues/1" target="_blank" rel="noopener">Error继承踩坑记</a></li><li><a href="https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work" target="_blank" rel="noopener">breaking change</a></li><li><a href="https://stackoverflow.com/questions/12915412/how-do-i-extend-a-host-object-e-g-error-in-typescript" target="_blank" rel="noopener">so 上的一个答案</a></li></ul>]]></content>
    
    <summary type="html">
    
      跨过 Error 继承的坑
    
    </summary>
    
      <category term="前端" scheme="http://hikerpig.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Javascript" scheme="http://hikerpig.github.io/tags/Javascript/"/>
    
      <category term="Typescript" scheme="http://hikerpig.github.io/tags/Typescript/"/>
    
  </entry>
  
  <entry>
    <title>使用 Object.create(null) 创建空对象</title>
    <link href="http://hikerpig.github.io/2018/01/24/2017-09-07-Using-Object.create/"/>
    <id>http://hikerpig.github.io/2018/01/24/2017-09-07-Using-Object.create/</id>
    <published>2018-01-24T15:20:18.108Z</published>
    <updated>2018-01-24T15:20:18.108Z</updated>
    
    <content type="html"><![CDATA[<p>使用对象字面量形式时，隐式地创建了一个以 <code>Object.prototype</code> 作为原型的对象。</p><p>以下两种方式等同。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o1 = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o2 = <span class="built_in">Object</span>.create(<span class="built_in">Object</span>.prototype)</span><br></pre></td></tr></table></figure><h2 id="更省事的方法">更省事的方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o3 = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br></pre></td></tr></table></figure><p>创建一个不继承任何原型的对象。</p><p>如果需要创建一个简单的 map 性质的对象，使用此种方式，在对 <code>o3</code> 进行遍历的时候，就可以躲开充满恶意的世界在 <code>Object.prototype</code> 上添加的方法或属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> k <span class="keyword">in</span> o1) &#123;</span><br><span class="line">  <span class="keyword">if</span> (o1.hasOwnProperty(k)) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历时不需要判断 hasOwnProperty</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> k <span class="keyword">in</span> o3) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用对象字面量形式时，隐式地创建了一个以 &lt;code&gt;Object.prototype&lt;/code&gt; 作为原型的对象。&lt;/p&gt;
&lt;p&gt;以下两种方式等同。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutte
      
    
    </summary>
    
      <category term="前端" scheme="http://hikerpig.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Javascript" scheme="http://hikerpig.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>在 Typescript 中使用可被复用的 Vue Mixin</title>
    <link href="http://hikerpig.github.io/2018/01/21/2018-01-21-typed-vue-mixins/"/>
    <id>http://hikerpig.github.io/2018/01/21/2018-01-21-typed-vue-mixins/</id>
    <published>2018-01-21T15:55:23.865Z</published>
    <updated>2018-05-30T16:41:19.663Z</updated>
    
    <content type="html"><![CDATA[<p>转到用 Typescript 写 Vue 应用以后，经过一轮工具链和依赖的洗礼，总算蹒跚地能走起来了，不过有一个很常用的功能 mixin，似乎还没有官方的解决方案。</p><p>既想享受 mixin 的灵活和方便，又想收获 ts 的类型系统带来的安全保障和开发时使用 IntelliSense 的顺滑体验。</p><p>vuejs 官方组织里有一个 ‘vue-class-component’ 以及连带推荐的 ‘vue-property-decorator’，都没有相应实现。翻了下前者的 issue，有一条挂了好些时间的待做 feature 就是 mixin 的支持。</p><p>也不是什么复杂的事，自己写一个吧。</p><blockquote><p>后注：vue-class-component 6.2.0 开始提供 <a href="https://github.com/vuejs/vue-class-component/commit/cdcbfe5bb1a4c9d59a4b3066477f49c9aae8e2fc" target="_blank" rel="noopener">mixins</a> 方法，和本文的实现思路相似。</p></blockquote><h1 id="实现">实现</h1><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue, &#123; VueConstructor &#125; <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> VClass&lt;T&gt; = &#123;</span><br><span class="line">  <span class="keyword">new</span>(): T</span><br><span class="line">&#125; &amp; Pick&lt;VueConstructor, keyof VueConstructor&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * mixins for class style vue component</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Mixins</span>&lt;<span class="title">A</span>&gt;(<span class="params">c: VClass&lt;A&gt;</span>): <span class="title">VClass</span>&lt;<span class="title">A</span>&gt;</span></span><br><span class="line"><span class="function"><span class="function"><span class="keyword">function</span> <span class="title">Mixins</span>&lt;<span class="title">A</span>, <span class="title">B</span>&gt;(<span class="params">c: VClass&lt;A&gt;, c1: VClass&lt;B&gt;</span>): <span class="title">VClass</span>&lt;<span class="title">A</span>&amp;<span class="title">B</span>&gt;</span></span></span><br><span class="line"><span class="function"><span class="function"><span class="function"><span class="keyword">function</span> <span class="title">Mixins</span>&lt;<span class="title">A</span>, <span class="title">B</span>, <span class="title">C</span>&gt;(<span class="params">c: VClass&lt;A&gt;, c1: VClass&lt;B&gt;, c2: VClass&lt;C&gt;</span>): <span class="title">VClass</span>&lt;<span class="title">A</span>&amp;<span class="title">B</span>&amp;<span class="title">C</span>&gt;</span></span></span></span><br><span class="line"><span class="function"><span class="function"><span class="function"><span class="function"><span class="keyword">function</span> <span class="title">Mixins</span>&lt;<span class="title">T</span>&gt;(<span class="params">c: VClass&lt;T&gt;, ...traits: <span class="built_in">Array</span>&lt;VClass&lt;T&gt;&gt;</span>): <span class="title">VClass</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span></span></span></span><br><span class="line"><span class="function"><span class="function"><span class="function">  <span class="title">return</span> <span class="title">c</span>.<span class="title">extend</span>(<span class="params">&#123;</span></span></span></span></span><br><span class="line"><span class="function"><span class="function"><span class="function"><span class="params">    mixins: traits</span></span></span></span></span><br><span class="line"><span class="function"><span class="function"><span class="function"><span class="params">  &#125;</span>)</span></span></span></span><br><span class="line"><span class="function"><span class="function"><span class="function">&#125;</span></span></span></span><br></pre></td></tr></table></figure><p>声明 <code>VClass&lt;T&gt;</code> 可作为 T 的类构造器。同时通过 <code>Pick</code> 拿到 Vue 的构造器上的静态方法（extend/mixin 之类），如此才能够支持下面这段中的真正实现，通过调用一个 Vue 的子类构造器上的 <code>extend</code> 方法生成新的子类构造器。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Mixins</span>&lt;<span class="title">T</span>&gt;(<span class="params">c: VClass&lt;T&gt;, ...traits: <span class="built_in">Array</span>&lt;VClass&lt;T&gt;&gt;</span>): <span class="title">VClass</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> c.extend(&#123;</span><br><span class="line">    mixins: traits</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至于 ABC 这个纯粹是类型声明的体力活了。</p><h1 id="使用">使用</h1><p>实际使用时:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, Vue &#125; <span class="keyword">from</span> <span class="string">'vue-property-decorator'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Mixins &#125; <span class="keyword">from</span> <span class="string">'../../util/mixins'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">class</span> PageMixin <span class="keyword">extends</span> Vue &#123;</span><br><span class="line">  title = <span class="string">'Test Page'</span></span><br><span class="line"></span><br><span class="line">  redirectTo(path: <span class="built_in">string</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'calling reidrectTo'</span>, path)</span><br><span class="line">    <span class="keyword">this</span>.$router.push(&#123; path &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> IDisposable &#123;</span><br><span class="line">  dispose(...args: <span class="built_in">any</span>[]): <span class="built_in">any</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">class</span> DisposableMixin <span class="keyword">extends</span> Vue &#123;</span><br><span class="line">  _disposables: IDisposable[]</span><br><span class="line"></span><br><span class="line">  created() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'disposable mixin created'</span>);</span><br><span class="line">    <span class="keyword">this</span>._disposables = []</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  beforeDestroy() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'about to clear disposables'</span>)</span><br><span class="line">    <span class="keyword">this</span>._disposables.map(<span class="function">(<span class="params">d</span>) =&gt;</span> &#123;</span><br><span class="line">      d.dispose()</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">delete</span> <span class="keyword">this</span>._disposables</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  registerDisposable(d: IDisposable) &#123;</span><br><span class="line">    <span class="keyword">this</span>._disposables.push(d)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;h1&gt;&#123;&#123; title &#125;&#125;&lt;/h1&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;Counted: &#123;&#123; counter &#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> TimerPage <span class="keyword">extends</span> Mixins(PageMixin, DisposableMixin) &#123;</span><br><span class="line">  counter = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  mounted() &#123;</span><br><span class="line">    <span class="keyword">const</span> timer = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.counter++ &gt;= <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.redirectTo(<span class="string">'/otherpage'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'count to'</span>, <span class="keyword">this</span>.counter);</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.registerDisposable(&#123;</span><br><span class="line">      dispose() &#123;</span><br><span class="line">        clearInterval(timer)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">count to 1</span><br><span class="line">count to 2</span><br><span class="line">count to 3</span><br><span class="line">calling reidrectTo /otherpage</span><br><span class="line">about to clear disposables</span><br></pre></td></tr></table></figure><p>注意到直接 <code>extends Vue</code> 的 <code>DisposableMixin</code> 并不是一个有效的 Vue 组件，也不可以直接在 <code>mixins</code> 选项里使用，如果要被以 <code>Vue.extend</code> 方式扩展的自定义组件使用，记住使用 <code>Component</code> 包装一层。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ExtendedComponent = Vue.extend(&#123;</span><br><span class="line">  name: <span class="string">'ExtendedComponent'</span>,</span><br><span class="line">  mixins: [Component(DisposableMixin)],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="abstract-class">Abstract class</h1><p>在业务系统中，多数情况需求下会更复杂，提供一些基础功能，但有些部分需要留给继承者自行实现，这个时候使用抽象类就很合适。</p><h2 id="直接继承">直接继承</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> AbstractMusicPlayer <span class="keyword">extends</span> Vue &#123;</span><br><span class="line">  <span class="keyword">abstract</span> audioSrc: <span class="built_in">string</span></span><br><span class="line">  </span><br><span class="line">  playing = <span class="literal">false</span></span><br><span class="line">  </span><br><span class="line">  togglePlay() &#123;</span><br><span class="line">    <span class="keyword">this</span>.playing = !<span class="keyword">this</span>.playing</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">class</span> MusicPlayerA <span class="keyword">extends</span> AbstractMusicPlayer &#123;</span><br><span class="line">  audioSrc = <span class="string">'/audio-a.mp3'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">class</span> MusicPlayerB <span class="keyword">extends</span> AbstractMusicPlayer &#123;</span><br><span class="line">  staticBase = <span class="string">'/statics'</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> audioSrc() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;this.staticBase&#125;</span>/audio-b.mp3`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用-mixins">使用 Mixins</h2><h3 id="坏方法欺骗以及注释">坏方法：欺骗，以及注释</h3><p>但抽象类是无法被实例化的，并不满足 <code>{ new(): T }</code> 这个要求，因此只能被继承，而<strong>不能</strong>被混入，由于同样的原因，抽象类也无法被 ‘vue-class-component’ 的 <code>Component</code> 函数装饰。</p><p>这时候只好将实现了的功能写入 Mixin 中，待实现的功能放到接口里，让具体类来实现。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">interface IMusicSourceProvider &#123;</span><br><span class="line">  audioSrc: string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 需要实现 IPlayerImplementation</span><br><span class="line"> */</span><br><span class="line">@Component</span><br><span class="line">class PlayerMixin extends Vue &#123;</span><br><span class="line">  /** @abstract 必须实现 */</span><br><span class="line">  audioSrc: string</span><br><span class="line"></span><br><span class="line">  logSrc() &#123;</span><br><span class="line">    console.log(this.audioSrc)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface IPlayerImplementation extends IMusicSourceProvider &#123;&#125;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">class OtherMixin extends Vue &#123;</span><br><span class="line">  description = &apos;另一个 Mixin&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">class RealPlayer extends Mixins(PlayerMixin, OtherMixin) implements IPlayerImplementation &#123;</span><br><span class="line">  audioSrc = &apos;/audio-c.mp3&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 无法正常工作</span><br><span class="line">@Component</span><br><span class="line">class BrokenPlayer extends Mixins(PlayerMixin, OtherMixin) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>鉴于 <code>@Component</code> 装饰器的实现方式，这种欺骗编译器的方式其实还是比较拙劣的。</p><p>如果一个具体类继承了 <code>PlayerMixin</code>，却没有使用 getter 或 property initializer 实现 <code>audioSrc</code> 这个属性，编译器无法告诉你这个错误（不开启严格模式的情况下），但实际使用中 <code>audioSrc</code> 其实是没有被初始化的，你会发现 <code>BrokenPlayer</code> 的实例当中 <code>_data</code> 里并不包含 <code>audioSrc</code>，即便在实例化后手动设置该值，Vue 也无法监听到该值的变化，会造成一些比较隐秘的 bug。</p><p>我们只能在代码里小心翼翼写上注释，期待使用者不要忘了这件事。</p><p>也可以执行一j些开发时候的额外检查，如下：</p><h4 id="自定义装饰器-abstractproperty">自定义装饰器 AbstractProperty</h4><p>vue-class-component 提供了 <a href="https://github.com/vuejs/vue-class-component#create-custom-decorators" target="_blank" rel="noopener">createDecorator</a> 方法来创建其体系下的自定义装饰器，我们可以这么用：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createDecorator &#125; <span class="keyword">from</span> <span class="string">'vue-class-component'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个什么都不做的装饰器，在 production 环境下启用。不使用 createDecorator</span></span><br><span class="line"><span class="keyword">const</span> HolderDecorator = <span class="function">(<span class="params">ctor: <span class="built_in">any</span></span>) =&gt;</span> ctor</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Only for vue-class-component decorated class</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> AbstractProperty = isProduction ? HolderDecorator:</span><br><span class="line">createDecorator(<span class="function">(<span class="params">options, key</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> originCreated = options.created</span><br><span class="line">  options.created = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (originCreated) originCreated.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">    <span class="keyword">if</span> (!(key <span class="keyword">in</span> <span class="keyword">this</span>)) &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(<span class="string">`未实现 AbstractProperty '<span class="subst">$&#123;key&#125;</span>'`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">class</span> PlayerMixin <span class="keyword">extends</span> Vue &#123;</span><br><span class="line">  <span class="meta">@AbstractProperty</span></span><br><span class="line">  audioSrc: <span class="built_in">string</span></span><br><span class="line"></span><br><span class="line">  logSrc() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.audioSrc)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">class</span> BrokenPlayer <span class="keyword">extends</span> Mixins(PlayerMixin, OtherMixin) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> player = <span class="keyword">new</span> BrokenPlayer</span><br><span class="line"><span class="comment">// 未实现 AbstractProperty 'audioSrc'</span></span><br></pre></td></tr></table></figure><h3 id="没那么坏的方法中间类">没那么坏的方法：中间类</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">class</span> _PlayerImpl <span class="keyword">extends</span> AbstractMusicPlayer &#123;</span><br><span class="line">  audioSrc = <span class="string">'/audio-d.mp3'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> RealPlayer2 <span class="keyword">extends</span> Mixins(_PlayerImpl, OtherMixin) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用中间类 <code>_PlayerImpl</code> 来实现抽象类的抽象部分，然后再被真正的使用者 <code>RealPlayer2</code> 使用。啰嗦了一点，但是类型安全。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;转到用 Typescript 写 Vue 应用以后，经过一轮工具链和依赖的洗礼，总算蹒跚地能走起来了，不过有一个很常用的功能 mixin，似乎还没有官方的解决方案。&lt;/p&gt;
&lt;p&gt;既想享受 mixin 的灵活和方便，又想收获 ts 的类型系统带来的安全保障和开发时使用 In
      
    
    </summary>
    
      <category term="前端" scheme="http://hikerpig.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Typescript" scheme="http://hikerpig.github.io/tags/Typescript/"/>
    
      <category term="Vue" scheme="http://hikerpig.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>ES6 Class 和 Babel 6 在 IE &lt;= 10 时候的一个坑</title>
    <link href="http://hikerpig.github.io/2017/09/25/2017-09-25-ES6+Babel-little-bug-under-IE11/"/>
    <id>http://hikerpig.github.io/2017/09/25/2017-09-25-ES6+Babel-little-bug-under-IE11/</id>
    <published>2017-09-25T05:52:32.000Z</published>
    <updated>2018-04-02T09:43:31.090Z</updated>
    
    <content type="html"><![CDATA[<p>写 ES6+ 一定逃不开 babel，也避不开调试 babel 生成的一些代码。</p><p>当输入一段 ES6 Class 代码时:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> baseName = <span class="string">'Person'</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> speakForAll() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.baseName</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  speak() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Developer</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myself = <span class="keyword">new</span> Developer()</span><br><span class="line"><span class="built_in">console</span>.log(myself.speak() === <span class="string">'Hello'</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Person.speakForAll() === <span class="string">'Person'</span>) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Developer.speakForAll() === <span class="string">'Person'</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h1 id="问题">问题</h1><p>在开发常用的浏览器 Chrome 和 Firefox 里正常工作，但是在 IE10 下会报错 <code>Uncaught TypeError: Developer.speakForAll is not a function</code></p><h2 id="刨根问底">刨根问底</h2><p><code>.babelrc</code> 配置如下:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [<span class="string">"es2015"</span>, <span class="string">"stage-2"</span>],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看 babel 编译出的一串代码 blahblah， 重点下面说:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _class, _temp</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_possibleConstructorReturn</span>(<span class="params">self, call</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!self) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">ReferenceError</span>(</span><br><span class="line">      <span class="string">"this hasn't been initialised - super() hasn't been called"</span>,</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> call &amp;&amp; (<span class="keyword">typeof</span> call === <span class="string">'object'</span> || <span class="keyword">typeof</span> call === <span class="string">'function'</span>)</span><br><span class="line">    ? call</span><br><span class="line">    : self</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_inherits</span>(<span class="params">subClass, superClass</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> superClass !== <span class="string">'function'</span> &amp;&amp; superClass !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(</span><br><span class="line">      <span class="string">'Super expression must either be null or a function, not '</span> +</span><br><span class="line">        <span class="keyword">typeof</span> superClass,</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  subClass.prototype = <span class="built_in">Object</span>.create(superClass &amp;&amp; superClass.prototype, &#123;</span><br><span class="line">    <span class="keyword">constructor</span>: &#123;</span><br><span class="line">      value: subClass,</span><br><span class="line">      enumerable: <span class="literal">false</span>,</span><br><span class="line">      writable: <span class="literal">true</span>,</span><br><span class="line">      configurable: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">if</span> (superClass)</span><br><span class="line">    <span class="built_in">Object</span>.setPrototypeOf</span><br><span class="line">      ? <span class="built_in">Object</span>.setPrototypeOf(subClass, superClass)</span><br><span class="line">      : (subClass.__proto__ = superClass)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_classCallCheck</span>(<span class="params">instance, Constructor</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!(instance <span class="keyword">instanceof</span> Constructor)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Cannot call a class as a function'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Person = ((_temp = _class = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    _classCallCheck(<span class="keyword">this</span>, Person)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Person.speakForAll = <span class="function"><span class="keyword">function</span> <span class="title">speakForAll</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.baseName</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Person.prototype.speak = <span class="function"><span class="keyword">function</span> <span class="title">speak</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello'</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> Person</span><br><span class="line">&#125;)()),</span><br><span class="line">(_class.baseName = <span class="string">'Person'</span>),</span><br><span class="line">_temp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Developer = (<span class="function"><span class="keyword">function</span>(<span class="params">_Person</span>) </span>&#123;</span><br><span class="line">  _inherits(Developer, _Person)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Developer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    _classCallCheck(<span class="keyword">this</span>, Developer)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> _possibleConstructorReturn(<span class="keyword">this</span>, _Person.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> Developer</span><br><span class="line">&#125;)(Person)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myself = <span class="keyword">new</span> Developer()</span><br><span class="line"><span class="built_in">console</span>.log(myself.speak() === <span class="string">'Hello'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Person.speakForAll() === <span class="string">'Person'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(Developer.speakForAll() === <span class="string">'Person'</span>)</span><br></pre></td></tr></table></figure><p>关键是此段实现继承的部分:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_inherits</span>(<span class="params">subClass, superClass</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> superClass !== <span class="string">'function'</span> &amp;&amp; superClass !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(</span><br><span class="line">      <span class="string">'Super expression must either be null or a function, not '</span> +</span><br><span class="line">        <span class="keyword">typeof</span> superClass,</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  subClass.prototype = <span class="built_in">Object</span>.create(superClass &amp;&amp; superClass.prototype, &#123;</span><br><span class="line">    <span class="keyword">constructor</span>: &#123;</span><br><span class="line">      value: subClass,</span><br><span class="line">      enumerable: <span class="literal">false</span>,</span><br><span class="line">      writable: <span class="literal">true</span>,</span><br><span class="line">      configurable: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">if</span> (superClass)</span><br><span class="line">    <span class="built_in">Object</span>.setPrototypeOf</span><br><span class="line">      ? <span class="built_in">Object</span>.setPrototypeOf(subClass, superClass)</span><br><span class="line">      : (subClass.__proto__ = superClass)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>subClass.prototype</code> 这一段比较简单，操作原型链来实现实例方法和属性的继承。顺带还用 object descriptor 重写了 <code>constructor</code> 这一属性，调用 <code>myself.constructor</code> 时才会拿到正确的值 <code>Developer</code>，而不是 <code>Person</code>。</p><p>接下来的一段比较有趣。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.setPrototypeOf(subClass, superClass)</span><br></pre></td></tr></table></figure><p>这个写法还是比较讨巧的，将父类的构造函数 <code>superClass</code> 作为子类构造函数 <code>subClass</code> 的原型。</p><h1 id="知识回顾">知识回顾</h1><h2 id="object.setprototypeof">Object.setPrototypeOf</h2><p>这是个 <a href="http://www.ecma-international.org/ecma-262/6.0/#sec-object.setprototypeof" target="_blank" rel="noopener">ES2015</a> 新提出的函数，函数签名：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.setPrototypeOf(obj, prototype)</span><br></pre></td></tr></table></figure><p>对比 <code>Object.create</code>，可以在对象创建出来之后替换其原型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = &#123;&#125;</span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(p1, Person.prototype)</span><br><span class="line"><span class="built_in">console</span>.log(p1.speak()) <span class="comment">// 为'Hello'</span></span><br></pre></td></tr></table></figure><p>浏览器兼容性</p><table><thead><tr class="header"><th>Feature</th><th>Chrome</th><th>Edge</th><th>Firefox</th><th>IE</th><th>Opera</th><th>Safari</th></tr></thead><tbody><tr class="odd"><td>Basic Support</td><td>34</td><td>(Yes)</td><td>31</td><td>11</td><td>(Yes)</td><td>9</td></tr></tbody></table><p>注意到从 IE11 才开始支持此方法。</p><p>既然第一条路行不通，那就第二条呗。</p><h2 id="proto__"><code>__proto__</code></h2><p><code>_inherits</code> 函数中回退到 <code>subClass.__proto__ = superClass</code>。<code>__proto__</code> 指向的是对象构造函数的 <code>prototype</code>，通过重设 <code>subClass</code> 的原型来使其获得父类构造函数上的方法(此例中是 class 上的静态方法)。</p><p>关键在于，<code>__proto__</code> 是个非标准的属性，根据<a href="https://docs.microsoft.com/en-us/scripting/javascript/reference/proto-property-object-javascript" target="_blank" rel="noopener">微软的文档</a>，IE10 及其以下都没有支持。</p><blockquote><p>Not supported in the following document modes: Quirks, Internet Explorer 6 standards, Internet Explorer 7 standards, Internet Explorer 8 standards, Internet Explorer 9 standards, Internet Explorer 10 standards. Not supported in Windows 8.</p></blockquote><p><a href="https://github.com/babel/babel/issues/3041" target="_blank" rel="noopener">Babel 的一个 issue</a> 中有人提过类似问题，回答是：babel 6 不考虑兼容 IE。没碰上问题算幸运，碰上问题只好自己解决。</p><h1 id="解决方案">解决方案</h1><p>就这个事情来说，添加一个 polyfill 能够解决。以 <a href="https://github.com/wesleytodd/setprototypeof" target="_blank" rel="noopener">这个实现</a> 来说:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="built_in">Object</span>.setPrototypeOf || (&#123;<span class="attr">__proto__</span>:[]&#125; <span class="keyword">instanceof</span> <span class="built_in">Array</span> ? setProtoOf : mixinProperties);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setProtoOf</span>(<span class="params">obj, proto</span>) </span>&#123;</span><br><span class="line">  obj.__proto__ = proto;</span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mixinProperties</span>(<span class="params">obj, proto</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> proto) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!obj.hasOwnProperty(prop)) &#123;</span><br><span class="line">      obj[prop] = proto[prop];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先探测 Object 上是否原生支持，然后检测更改 <code>__proto__</code> 是否有作用，最后回退到简单暴力的遍历赋值。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;写 ES6+ 一定逃不开 babel，也避不开调试 babel 生成的一些代码。&lt;/p&gt;
&lt;p&gt;当输入一段 ES6 Class 代码时:&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;
      
    
    </summary>
    
    
      <category term="Javascript" scheme="http://hikerpig.github.io/tags/Javascript/"/>
    
      <category term="Babel" scheme="http://hikerpig.github.io/tags/Babel/"/>
    
  </entry>
  
  <entry>
    <title>给开发减压的 gulp.watch 配置</title>
    <link href="http://hikerpig.github.io/2017/08/22/2017-08-22-gulp-watch-for-poor-cpu/"/>
    <id>http://hikerpig.github.io/2017/08/22/2017-08-22-gulp-watch-for-poor-cpu/</id>
    <published>2017-08-22T04:33:04.000Z</published>
    <updated>2017-08-22T05:07:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>Gulp 的文件监听使用了 <a href="https://github.com/shama/gaze" target="_blank" rel="noopener">gaze</a>，如果只看了 Gulp 的 API 文档可能会漏掉一些参数。</p><p><a href="https://github.com/gulpjs/gulp/blob/master/docs/API.md" target="_blank" rel="noopener">Gulp 文档</a> 中提到:</p><p><code>gulp.watch(glob[, opts], tasks)</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">opts</span><br><span class="line"></span><br><span class="line">Type: Object</span><br><span class="line"></span><br><span class="line">Options, that are passed to gaze.</span><br></pre></td></tr></table></figure><p>options 包括:</p><ul><li><code>interval</code> {integer} Interval to pass to fs.watchFile</li><li><code>debounceDelay</code> {integer} Delay for events called in succession for the same file/event in milliseconds</li><li><code>mode</code> {string} Force the watch mode. Either ‘auto’ (default), ‘watch’ (force native events), or ‘poll’ (force stat polling).</li><li><code>cwd</code> {string} The current working directory to base file patterns from. Default is process.cwd()</li></ul><p>gaze 的设置参数中，感觉最有用却被遗漏的就是 <code>interval</code> 了，好多人提到 <a href="https://github.com/gulpjs/gulp/issues/634" target="_blank" rel="noopener">gulp.watch CPU 占用太高</a>，因为 gaze 默认 100ms 检查监听的文件状态。</p><p>如果监听文件太多导致 CPU 占用居高不下的话，可以考虑加大 <code>interval</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp.watch(blob, &#123;<span class="attr">interval</span>: <span class="number">500</span>&#125;, tasks)</span><br></pre></td></tr></table></figure><p>笔记本就不会呼呼乱叫了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Gulp 的文件监听使用了 &lt;a href=&quot;https://github.com/shama/gaze&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;gaze&lt;/a&gt;，如果只看了 Gulp 的 API 文档可能会漏掉一些参数。&lt;/p&gt;
&lt;p&gt;&lt;a hre
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Holy Awesome Spacemacs</title>
    <link href="http://hikerpig.github.io/2017/08/06/2017-08-05-Holy-Awesome-Spacemacs/"/>
    <id>http://hikerpig.github.io/2017/08/06/2017-08-05-Holy-Awesome-Spacemacs/</id>
    <published>2017-08-06T08:48:09.000Z</published>
    <updated>2017-08-13T02:28:29.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://spacemacs.org/img/logo.svg"></p><p>很久以前看 SICP 的时候尝试在 windows 下使用 emacs 时受到了惊吓，那刀耕火种一般的界面啊。后来在 Ubuntu 终端中打开，诶？怎么关不掉？不掉？掉？（其实 Vim 也一样，小白终结者）</p><p>但是看完<a href="https://www.zhihu.com/question/29692328" target="_blank" rel="noopener">如何评价 Emacs 的配置文件 Spacemacs？</a>以及身边多人的安利后，心痒痒地尝试了下，从一个外行人眼里看来，简直是 Emacs 界的一股清流，史诗级的配置工程。</p><h1 id="安装">安装</h1><p>鉴于有 Every thing in Emacs 的传统，选择了可以不光在终端里使用，便安装了带有 Mac GUI 系统支持的 Emacs：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install emacs --with-cocoa</span><br></pre></td></tr></table></figure><h2 id="spacemacs">Spacemacs</h2><p>完全没有历史的 <code>.emacs.d</code> 包袱，一键安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/syl20bnr/spacemacs ~/.emacs.d</span><br></pre></td></tr></table></figure><h1 id="开始使用">开始使用</h1><p>还想说打开速度果然比 Vim 慢了不少，但是慢慢使用着发现，考虑到这些巨量的功能以及超棒的体验来说，等得太值了。重点是，<strong>开箱即用</strong>。</p><p>选择了 Setup Guile 中提示了相对较重的 <code>helm</code> layer，以及开了其他七八个 layer。不考虑首次安装插件的时间，之后平均启动时间在15秒内。</p><p>然后开始领教 Emacs 的能量：</p><h1 id="org-mode">org-mode</h1><p>江湖相传能用于<a href="http://docs.huihoo.com/open-source/guide/ch32.html" target="_blank" rel="noopener">组织你的意念</a>的“文档/知识/日程/<del>人生</del>管理工具”，神级插件。</p><p>在这之前，使用 <a href="http://vimwiki.github.io" target="_blank" rel="noopener">Vimwiki</a> 管理个人知识，在 Vim 里的表现也是很棒的，但是折腾起来总有几点不甚满意，但在 org-mode 下找到了完美的解决方案。</p><h2 id="文档转换">文档转换</h2><p>在 Markdown 大行其道的今天，还需要单独去记忆 Vimwiki 自己的语法，有时候转不过弯来。还有，有时候一些收集性质的笔记，需要从 html 转换过来，Vimwiki 在这方面相关工具比较匮乏。</p><p><code>org-mode</code> 虽说也是自成一派的语法，但是相关工具链非常完善，与各种文档格式互转毫无压力，例如 <a href="https://github.com/fasheng/vimwiki2org" target="_blank" rel="noopener">vimwiki2org</a>。</p><p>当需要集成现有工具到编辑器里时，一边是定义清晰、文档完善、继承了 Lisp 系美感的 Emacs Lisp ，和时常让人呼唤神兽的 Vim Script。</p><h2 id="代码块支持">代码块支持</h2><p>在 Vimwiki 里插入和查阅代码块的体验，纯粹而贫乏。</p><p>同样一个 python 代码块，在 Vimwiki 里：</p><img src="//images-hikerpig.qiniudn.com/image/emacs/vimwiki-code.png" alt="undefined"><p>而在 org-mode 当中一切都很行云流水</p><img src="//images-hikerpig.qiniudn.com/image/emacs/org-mode-code.png" alt="undefined"><h2 id="其他优点">其他优点</h2><p>包括但不限于：</p><ul><li>所见即所得，默认情况下 live preview，不会生成多余文件</li><li>强大的链接系统，直接跳转至多种形式的内外链接</li><li>强大的<a href="http://orgmode.org/manual/Agenda-Views.html" target="_blank" rel="noopener">日程规划功能</a></li><li>强大的<a href="http://www.cnblogs.com/holbrook/archive/2012/04/12/2444992.html" target="_blank" rel="noopener">表格编辑功能</a></li></ul><h3 id="一些收集">一些收集</h3><ul><li><a href="http://doc.norang.ca/org-mode.htm" target="_blank" rel="noopener">Organize Your Life In Plain Text!</a></li></ul><h1 id="helm">helm</h1><p><a href="http://tuhdo.github.io/helm-intro.html" target="_blank" rel="noopener">A Package in a league of its own: Helm</a></p><p>交互形式让我想起了 Vim 下的 <code>ctrlp</code> 和 <code>unite</code>，但是能做的事情更多，而且扩展性更好。</p><p>除了能找到任何文件外，还能找个任何一个命令，再也不用记那么多 <code>M-x</code> 命令了，再也不用担心小拇指受伤了。</p><figure><img src="https://dn-linuxcn.qbox.me/data/attachment/album/201601/15/103214s4z77zo4pimefccm.jpg" alt="From linux.cn"><figcaption>From linux.cn</figcaption></figure><h1 id="scala-mode-以及-ensime">scala-mode 以及 ensime</h1><p>在做 Coursera 上 Scala 课程作业的时候试了一下。<a href="http://ensime.org/" target="_blank" rel="noopener">Ensime</a> 的 Emacs 插件完成度<a href="http://ensime.org/editors/" target="_blank" rel="noopener">非常的高</a>。</p><h1 id="artist-mode">artist-mode</h1><p>无比炫酷的 ACSII Art 工具，写注释和文档有时一图胜千言。配合 org-mode，感觉自己从未如此热爱写文档。</p><p>看<a href="http://emacser.com/artist-mode.htm" target="_blank" rel="noopener">emacser 上的一篇介绍</a>。</p><p>Vim 上有个类似的插件 <a href="http://www.vim.org/scripts/script.php?script_id=40" target="_blank" rel="noopener">Drawit.vim</a>，不知二者谁先谁后，都挺好用的。</p><h1 id="imenu-list">imenu-list</h1><p>在右边新建一个 buffer 显示 imenu 的结果，接近于 Vim 的 Tagbar 使用体验。</p><figure><img src="https://github.com/bmag/imenu-list/raw/master/images/imenu-list-dark.png" alt="github imenu-list"><figcaption>github imenu-list</figcaption></figure><h1 id="可以使用但不准备替换现有主力编辑器atomvim的">可以使用，但不准备替换现有主力编辑器（Atom/Vim）的</h1><h2 id="coffee-mode">coffee-mode</h2><p><a href="https://github.com/defunkt/coffee-mode" target="_blank" rel="noopener">coffee-mode</a> 支持 coffeescript 文件的语法高亮、编译和 watch 等功能，配合 etags 使用还不错。</p><p>与 evil 一起使用的时候需要一些额外配置，否则用 <code>o</code> 换行的时候发现缩进不对。</p><p>官方 README 给出了解决方案：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(custom-set-variables</span><br><span class="line"> &apos;(coffee-indent-like-python-mode t))</span><br></pre></td></tr></table></figure><h1 id="放弃折腾的部分">放弃折腾的部分</h1><h2 id="javascript-和-eslint">Javascript 和 Eslint</h2><p>作为一个前端，还是有点小遗憾的。</p><p>没有找到开箱即用的插件，<code>flycheck</code> 似乎很是强大，但是要支持 eslint 还有改许多配置。当然了，前端开发还是看 VS Code 和 Atom 吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://spacemacs.org/img/logo.svg&quot;&gt;&lt;/p&gt;
&lt;p&gt;很久以前看 SICP 的时候尝试在 windows 下使用 emacs 时受到了惊吓，那刀耕火种一般的界面啊。后来在 Ubuntu 终端中打开，诶？怎么关不掉？不掉？掉
      
    
    </summary>
    
    
      <category term="emacs" scheme="http://hikerpig.github.io/tags/emacs/"/>
    
      <category term="editor" scheme="http://hikerpig.github.io/tags/editor/"/>
    
      <category term="productivity" scheme="http://hikerpig.github.io/tags/productivity/"/>
    
  </entry>
  
  <entry>
    <title>前端 Log 小记</title>
    <link href="http://hikerpig.github.io/2017/07/29/2016-12-21-Enhanced-Client-Side-Console/"/>
    <id>http://hikerpig.github.io/2017/07/29/2016-12-21-Enhanced-Client-Side-Console/</id>
    <published>2017-07-29T05:40:50.000Z</published>
    <updated>2017-07-29T05:40:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>相信各位前端工程师们都经历过一个黑暗的场景。</p><img src="//images-hikerpig.qiniudn.com/image/stack-or-gtfo.jpg" alt="undefined"><p>(哎哟哎哟测试大人我什么也没说)</p><p>曾经有一个出现bug的页面出现在我面前，我没有珍惜，直到用户关掉页面了，才后悔莫及。</p><p>而且错误不能等到用户反馈了才去探究，最好有完备的收集和响应系统，积极的错误日志分析，使我们防患于未然。</p><h2 id="成熟的-saas-服务">成熟的 SaaS 服务</h2><p>选择还是挺多的，例如 <a href="http://trackjs.com/" target="_blank" rel="noopener">track.js</a>，<a href="https://sentry.io" target="_blank" rel="noopener">Sentry</a>，<a href="https://errorception.com/" target="_blank" rel="noopener">ErrorCeption</a>，<a href="https://www.loggly.com/" target="_blank" rel="noopener">Loggly</a>，<a href="https://airbrake.io/" target="_blank" rel="noopener">Airbrke</a>。都比较成熟，各家各有特色，集成相对简单。</p><h3 id="track.jstrackjs"><a href="http://trackjs.com/" target="_blank" rel="noopener">{track.js}</a></h3><p>鄙公司在使用的服务，十分好用，比起其他几个选项，只专注在前端错误日志，除了基本的记录、sourcemap支持以及错误栈追踪以外，提供的事件记录和时间轴功能，记录了所有网络请求以及用户操作(皆可配置开关)，能让你更好地重现异常发生的过程。十分推荐大家试试，试用期有30天，在自己的项目里先试试吧。</p><h3 id="sentrysentry"><a href="https://sentry.io" target="_blank" rel="noopener">Sentry</a></h3><p>有跨语言和多框架集成支持，前后端皆可用，有免费的社区版本。</p><p>值得一说的是浏览器端的库名字是<code>raven</code>，看了不得不为这个梗点个赞。</p><figure><img src="http://www.30play.com/manage/editor/UploadFile/2014108143616129.jpg" alt="X-Men"><figcaption>X-Men</figcaption></figure><h2 id="错误栈追踪stack-trace">错误栈追踪(Stack Trace)</h2><p>如果不使用自带 parser 的服务而是自己实现前后功能，可能在发送到服务器之前，最好做一些处理，例如生成更可读的错误栈，会让你工作更加轻松。栈信息对于定位和调试错误是十分重要的。</p><h3 id="第三方库">第三方库</h3><h4 id="tracekit"><a href="https://github.com/csnover/TraceKit" target="_blank" rel="noopener">TraceKit</a></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先注册一下报告的行为回调</span></span><br><span class="line">TraceKit.report.subscribe(<span class="function"><span class="keyword">function</span> <span class="title">yourLogger</span>(<span class="params">errorReport</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 发送ajax请求到服务器端</span></span><br><span class="line">  <span class="comment">// 在 https://gist.github.com/4491219 上有个好例子</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始写程序</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * your application code here</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'oops'</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  TraceKit.report(e); <span class="comment">//error with stack trace gets normalized and sent to subscriber</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="stacktrace.js"><a href="http://stacktracejs.com/" target="_blank" rel="noopener">stacktrace.js</a></h4><p>解析错误栈并且给出结构化表示，api 设计满足 Promise 规范。</p><p>官方给出的例子:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> callback = <span class="function"><span class="keyword">function</span>(<span class="params">stackframes</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> stringifiedStack = stackframes.map(<span class="function"><span class="keyword">function</span>(<span class="params">sf</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sf.toString();</span><br><span class="line">  &#125;).join(<span class="string">'\n'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(stringifiedStack);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> errback = <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123; <span class="built_in">console</span>.log(err.message); &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">msg, file, line, col, error</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// callback is called with an Array[StackFrame]</span></span><br><span class="line">  StackTrace.fromError(error).then(callback).catch(errback);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="提升开发时console-log体验的轻量第三方库">提升开发时Console log体验的轻量第三方库</h3><h4 id="logdown"><a href="https://github.com/caiogondim/logdown.js" target="_blank" rel="noopener">Logdown</a></h4><p>node和浏览器端都可以使用的一个工具。</p><p>提供命名空间，并能分别开关各命名空间的log:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> uiLogger = <span class="keyword">new</span> Logdown(&#123;<span class="attr">prefix</span>: <span class="string">'MyApp:UI'</span>&#125;);</span><br><span class="line"><span class="keyword">var</span> networkServiceLogger = <span class="keyword">new</span> Logdown(&#123;<span class="attr">prefix</span>: <span class="string">'MyApp:Network'</span>&#125;);</span><br><span class="line"></span><br><span class="line">Logdown.disable(<span class="string">'MyApp:UI'</span>);</span><br><span class="line">Logdown.enable(<span class="string">'MyApp:Network'</span>);</span><br><span class="line">Logdown.disable(<span class="string">'MyApp:*'</span>); <span class="comment">// 支持通配符</span></span><br></pre></td></tr></table></figure><p>还支持 markdown 语法:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> logger = <span class="keyword">new</span> Logdown(&#123;<span class="attr">markdown</span>: <span class="literal">true</span>&#125;);</span><br><span class="line">logger.warn(<span class="string">'Log is *Awesome*'</span>);</span><br></pre></td></tr></table></figure><p>可以看看作者给的<a href="https://caiogondim.github.io/logdown.js/" target="_blank" rel="noopener">例子</a></p><img src="//images-hikerpig.qiniudn.com/image/logdown.js.png" alt="undefined"><h1 id="最后">最后</h1><p>错误日志收集完了记住要去看哟。</p><h1 id="参考">参考</h1><ul><li><a href="https://www.sitepoint.com/logging-errors-client-side-apps/" target="_blank" rel="noopener">Logging Errors in Client-Side Applications</a>: 基本上是原文</li><li>题图来自<a href="https://github.com/csnover/TraceKit" target="_blank" rel="noopener">TraceKit</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;相信各位前端工程师们都经历过一个黑暗的场景。&lt;/p&gt;
&lt;img src=&quot;//images-hikerpig.qiniudn.com/image/stack-or-gtfo.jpg&quot; alt=&quot;undefined&quot;&gt;
&lt;p&gt;(哎哟哎哟测试大人我什么也没说)&lt;/p&gt;
&lt;p&gt;曾
      
    
    </summary>
    
      <category term="前端" scheme="http://hikerpig.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://hikerpig.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Engineering" scheme="http://hikerpig.github.io/tags/Engineering/"/>
    
  </entry>
  
  <entry>
    <title>[译] 使用重构件（Codemod）加速 JavaScript 开发</title>
    <link href="http://hikerpig.github.io/2016/06/30/2016-06-02-turbocharged-javascript-refactoring-with-codemods/"/>
    <id>http://hikerpig.github.io/2016/06/30/2016-06-02-turbocharged-javascript-refactoring-with-codemods/</id>
    <published>2016-06-29T16:00:00.000Z</published>
    <updated>2018-07-11T11:04:47.463Z</updated>
    
    <content type="html"><![CDATA[<ul><li>原文链接 : <a href="https://medium.com/airbnb-engineering/turbocharged-javascript-refactoring-with-codemods-b0cae8b326b9#.tjerodd52" target="_blank" rel="noopener">Turbocharged JavaScript refactoring with codemods</a></li><li>原文作者 : <a href="https://medium.com/u/e52389684329" target="_blank" rel="noopener">Joe Lencioni</a></li></ul><h3 id="使用重构件codemod加速-javascript-开发">使用重构件（Codemod）加速 JavaScript 开发</h3><p>在花园里耕耘乐趣无穷，但如果除草不勤，最后收获可能是一团揪心。漏掉一次除草本身可能并无大碍，但积少成多最后会毁掉整座花园。没有杂草的花园让维护工作神清气爽。这个道理对代码库也类似。</p><p>我通常讨厌除草，经常忘记这事的结果就是一团糟。谢天谢地在编程界有像 <a href="http://eslint.org/" target="_blank" rel="noopener">ESLint</a> 和 <a href="https://github.com/brigade/scss-lint" target="_blank" rel="noopener">SCSS-Lint</a> 这样的好东西提醒我们勤理代码。但是如果面对的是大段大段的历史代码，光是想想要手动调整成百十千万的空格和逗号，悲伤便逆流成河。</p><p>8年来有几百万行 JavaScript 代码进入 Airbnb 的版本控制系统中。同时，前端界风起云涌。新功能，新框架，甚至 JavaScript 本身都在快速进化。尽管遵循<a href="https://github.com/airbnb/javascript" target="_blank" rel="noopener">良好的代码风格</a>会让变革少些疼痛，但还是很容易累积出不再遵循最新“最佳实践”的巨大代码库。每一处代码风格的不一致都是一棵杂草，唯一归宿就是被铲掉，化作春泥更护花，好让开发团队保持高效。来看看我们花园现在的样子：</p><p><img src="http://ww1.sinaimg.cn/large/005SiNxygw1f3j83hmmrij30jk0dvjsn.jpg"></p><p>我执着于增加团队效率，也深知保持一致性的代码能增速团队反馈和减少无效沟通。我们最近开始了一个整理代码的项目，准备把许多陈旧的 JavaScript 代码转化得符合我们的代码风格，亦使我们的代码检验器有更多用武之地。若全都手动完成，会是件十分无聊和耗时的苦差，所以我们借助工具帮我们自动化此工作。虽说使用 <em><code>eslint -fix</code></em> 是个不错的开始，但<a href="https://github.com/eslint/eslint/issues/5329" target="_blank" rel="noopener">它现在所能有限</a>。尽管他们<a href="https://twitter.com/geteslint/status/723909416957829122" target="_blank" rel="noopener">最近开始接受修复所有规则的PR</a>，也准备<a href="https://github.com/cst/cst" target="_blank" rel="noopener">构建 JavaScript 的具体语法树</a>，但等这些功能完成还需要些时间。感谢上苍我们发现了 Facebook 的 <a href="https://github.com/facebook/jscodeshift" target="_blank" rel="noopener">jscodeshift</a>，这是一个重构工具（协助大型代码库的自动化重构）。如果代码库是个花园，那么 jscodeshift 就像个除草机器人。</p><p>此工具将 JavaScript 解析为一棵 <a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree" target="_blank" rel="noopener">抽象语法树</a>，并在其上进行变换，然后输出符合指定代码风格的新 JavaScript 代码。转换过程是用 JavaScript 本身实现的，所以我们团队很乐意使用此工具。寻找或是创建转换代码能加速我们乏味的重构，让我们团队能够专注于更有意义的工作。</p><p>运行几个代码重构件后，我们的花园整洁了点：</p><p><img src="http://ww4.sinaimg.cn/large/a490147fjw1f3j9ybpgazj20je0flwfm.jpg"></p><h3 id="策略">策略</h3><p>鉴于多数重构件能在一分钟内处理上千文件，我发现它是我打发主要工作的等待间隙（例如等代码审查）的不错选择。它帮我最大化提升了工作效率从而让我能在更大和更重要的项目中有所建树。</p><p>大规模重构主要面临四大挑战。沟通、正确性、代码审查以及冲突合并。我采取以下策略来应对这些挑战。</p><p>重构件不总是能产出我需要的结果，因此对其结果的审查和改动十分重要。以下命令在跑完重构件后很有用：</p><pre><code>git diffgit add --patchgit checkout --patch</code></pre><p>保持每个提交和 PR 在小的体量是好的做法，对于重构件也不例外。我通常一段时间内进行一类重构，减少代码审查和冲突合并的麻烦。我亦经常让重构件自动提交重构结果，而后若有必要，再手动清理。这样在衍合分支时解决冲突会轻松点，因为我可以使用</p><pre><code>git checkout --ours path/to/conflict</code></pre><p>然后在那个文件上再运行一次重构件，之后也不会弄乱我自己的手动提交。</p><p>有时重构件生成了很大的变动，我觉得在此情况下根据目录或文件名来分成数次提交或 PR 会比较好。例如，一个提交重构 .js 文件，另一个提交重构.jsx 文件。这样之后代码审查和冲突合并会相对轻松一点。谨遵 <a href="https://en.wikipedia.org/wiki/Unix_philosophy" target="_blank" rel="noopener">Unix 哲学</a>，分批进行文件重构简单到仅需调整 <em><code>find</code></em> 命令的参数：</p><pre><code>find app/assets/javascripts -name *.jsx -not -path */vendor/* | \  xargs jscodeshift -t ~/path/to/transform.js</code></pre><p>为避免和别人的代码冲突，我通常在周五早上才推送我的重构件生成的提交，然后周一赶在大家开始工作之前进行衍合和合并。这样其他人周末放假前不被你的重构件阻碍，能好好整理自己的工作成果。</p><h3 id="我们用得顺手的重构件">我们用得顺手的重构件</h3><p>虽然此工具还比较新，已然有了一些实用的重构件。以下是一些我们成功上手了的。</p><h4 id="轻量级重构件">轻量级重构件</h4><p>以下是些用着不那么痛苦的，立刻上手感受成效。</p><p><a href="https://github.com/cpojer/js-codemod#arrow-function" target="_blank" rel="noopener"><strong>js-codemod/arrow-function</strong></a><strong>:</strong> 谨慎地把函数转为箭头函数</p><p>使用前:</p><pre><code>[1, 2, 3].map(function(x) {  return x * x;}.bind(this));</code></pre><p>使用后:</p><pre><code>[1, 2, 3].map(x =&gt; x * x);</code></pre><p><a href="https://github.com/cpojer/js-codemod#no-vars" target="_blank" rel="noopener"><strong>js-codemod/no-vars</strong></a><strong>:</strong> 将 <em><code>var'_ 安全转化为 _</code>const<code>_ 或 _</code>let`</em>。</p><p>使用前:</p><pre><code>var belong = &#39;anywhere&#39;;</code></pre><p>使用后:</p><pre><code>const belong = &#39;anywhere&#39;;</code></pre><p><a href="https://github.com/cpojer/js-codemod#object-shorthand" target="_blank" rel="noopener"><strong>js-codemod/object-shorthand</strong></a><strong>:</strong> 把对象字面量转为 ES6 的简写表示。</p><p>使用前:</p><pre><code>const things = {  belong: belong,  anywhere: function() {},};</code></pre><p>使用后:</p><pre><code>const things = {  belong,  anywhere() {},};</code></pre><p><a href="https://github.com/cpojer/js-codemod#unchain-variables" target="_blank" rel="noopener"><strong>js-codemod/unchain-variables</strong></a><strong>:</strong> 分离连续声明的变量。</p><p>使用前:</p><pre><code>const belong = &#39;anywhere&#39;, welcome = &#39;home&#39;;</code></pre><p>使用后:</p><pre><code>const belong = &#39;anywhere&#39;;const welcome = &#39;home&#39;;</code></pre><p><a href="https://github.com/cpojer/js-codemod#unquote-properties" target="_blank" rel="noopener"><strong>js-codemod/unquote-properties</strong></a><strong>:</strong> 移除对象属性的引号。</p><p>使用前:</p><pre><code>const things = {  &#39;belong&#39;: &#39;anywhere&#39;,};</code></pre><p>使用后:</p><pre><code>const things = {  belong: &#39;anywhere&#39;,};</code></pre><h4 id="重量级重构件">重量级重构件</h4><p>以下重构件或是改动很多代码引发合并和冲突之痛，或是需要更多后续的手动更改以保证代码还能看得下去。</p><p><a href="https://github.com/reactjs/react-codemod#class" target="_blank" rel="noopener"><strong>react-codemod/class</strong></a><strong>:</strong> 把 <em><code>React.createClass</code></em> 转为 ES6 class 的实现。</p><p>此重构件在有 mixin 的时候不会变换，在类似于 <em><code>propTypes</code></em>、默认 props 和 initial state 定义这样的必要转换做得很好，还能将事件回调函数绑定到构造器上。</p><p>使用前:</p><pre><code>const BelongAnywhere = React.createClass({  // ...});</code></pre><p>使用后:</p><pre><code>class BelongAnywhere extends React.Component {  // ...}</code></pre><p><a href="https://github.com/reactjs/react-codemod#sort-comp" target="_blank" rel="noopener"><strong>react-codemod/sort-comp</strong></a><strong>:</strong> 根据 <a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/sort-comp.md" target="_blank" rel="noopener">ESLint react/sort-comp rule</a> 重新组织 React component 的方法声明顺序。</p><p>这个会调整大量代码，git 不会自动合并冲突。我觉得在使用此重构件前最好最好跟队友打个招呼，在不太容易发生冲突的时候（例如周末）进行重构。当我衍合此重构的提交且遇上冲突的时候，我会：</p><pre><code>git checkout --ours path/to/conflict</code></pre><p>然后再运行一次重构件。</p><p>使用前:</p><pre><code>class BelongAnywhere extends React.Component {  render() {    return &lt;div&gt;Belong Anywhere&lt;/div&gt;;  }  componentWillMount() {      console.log(&#39;Welcome home&#39;);    }  }</code></pre><p>使用后:</p><pre><code>class BelongAnywhere extends React.Component {  componentWillMount() {    console.log(&#39;Welcome home&#39;);  } render() {    return &lt;div&gt;Belong Anywhere&lt;/div&gt;;  }}</code></pre><p><a href="https://github.com/cpojer/js-codemod#template-literals" target="_blank" rel="noopener"><strong>js-codemod/template-literals</strong></a><strong>:</strong> 把字符串的串联转换为字符串模板字面量表示。</p><p>因为我们多处用到字符串串联，而且这个重构件尽其所能把所有字符串都转成模板，我发现很多转换结果其实并不合理。我之所以这个重构件放到“重量级”列表里，是因为它会改动很多文件，而且之后我们还得进行大量的手动修改才能得到满意的结果。</p><p>使用前:</p><pre><code>const belong = &#39;anywhere &#39;+ welcomeHome;</code></pre><p>使用后:</p><pre><code>const belong = `anywhere ${welcomeHome}`;</code></pre><h3 id="资源">资源</h3><p>若你想写自己的重构件，或是看看它能做什么，可以看下下面的资源。</p><ul><li><a href="https://www.youtube.com/watch?v=d0pOgY8__JM" target="_blank" rel="noopener">逐步改进复杂系统</a>：来自 Christoph Pojer 于 JSConf EU 2015 上关于 Facebook 的重构件的演讲。（亦可见<a href="https://medium.com/@cpojer/effective-javascript-codemods-5a6686bb46fb" target="_blank" rel="noopener">高效的 JavaScript 重构件</a>）。</li><li><a href="https://vramana.github.io/blog/2015/12/21/codemod-tutorial/" target="_blank" rel="noopener">如何写重构件</a>: 带你写一个把字符串串联转化为字符串模板字面量的重构件的教程。</li><li><a href="https://astexplorer.net/" target="_blank" rel="noopener">AST 探索</a>: 可查看由多种语法分析程序产生的 AST 的工具。好东西，可以查看你想转换的代码的 AST。</li><li><a href="https://medium.com/nfl-engineers/nfl-codemods-migrating-a-monolith-1e3363571707" target="_blank" rel="noopener">NFL ♥ C重构件: 海量代码迁移</a>: 关于 NFL 如何使用重构件的一个使用案例。</li><li><a href="https://github.com/reactjs/react-codemod" target="_blank" rel="noopener">react-codemod</a>: 一系列关于 React 的重构件。</li><li><a href="https://github.com/cpojer/js-codemod" target="_blank" rel="noopener">js-codemod</a>: 一系列常用的 JavaScript 重构件。</li></ul><h3 id="影响">影响</h3><p>在使用了一些现成的和我们自己写的并贡献给社区的重构件之后，我们的旧代码质量获得很大的提升。我不费吹灰之力便重构了40000行代码，将旧代码调整至符合 ES6 代码风格。花园焕然一新，我们之后的工作也更有效率和乐趣。</p><p>使用已有的重构件仅是牛刀小试，只有在你拿起键盘写出自己的重构件时，真正的能量才会释放。无论是对代码风格重构，或是对失效 API 的调整，重构件都能大显身手，你可以尽情想象发挥。这些技术值得学习投入，能省下你和使用你的项目使用者很多时间精力。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;原文链接 : &lt;a href=&quot;https://medium.com/airbnb-engineering/turbocharged-javascript-refactoring-with-codemods-b0cae8b326b9#.tjerodd52&quot; ta
      
    
    </summary>
    
      <category term="工具" scheme="http://hikerpig.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Javascript" scheme="http://hikerpig.github.io/tags/Javascript/"/>
    
      <category term="前端" scheme="http://hikerpig.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Engineering" scheme="http://hikerpig.github.io/tags/Engineering/"/>
    
  </entry>
  
  <entry>
    <title>[译] Javascript 姿势提升简略</title>
    <link href="http://hikerpig.github.io/2016/04/28/2016-04-28-%E8%AF%91-Javascript-%E5%A7%BF%E5%8A%BF%E6%8F%90%E5%8D%87%E7%AE%80%E7%95%A5/"/>
    <id>http://hikerpig.github.io/2016/04/28/2016-04-28-译-Javascript-姿势提升简略/</id>
    <published>2016-04-28T03:21:18.000Z</published>
    <updated>2016-04-28T03:21:18.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>原文链接 : <a href="http://developer.telerik.com/featured/leveling-up-your-javascript/" target="_blank" rel="noopener">Leveling Up Your JavaScript</a></li><li>原文作者 : <a href="http://developer.telerik.com/author/rcamden/" target="_blank" rel="noopener">Raymond Camden</a></li></ul><p>JavaScript 是一门入门容易，但是相当难以精通的语言。可现今一些文章总假设你已经精通了它。</p><p>我从 1995 年 JavaScript 还以 LiveScript 名字出现的时候就开始用它了，但后来逐渐从前端开发撤回服务器的安全怀抱中，直到五年前才重拾。很高兴看到如今的浏览器更加的强大和易于调试。但 JavaScript 已经演变得越来越复杂且难以精通了。不过最近我终于得出结论，我并不需要_精通_ Javascript，只需要比以前更进一步就好。能成为一个“好”的 JavaScript 开发者我便觉欣慰。</p><p>以下是我发现的一些_实用_的 JavaScript 小技巧: <a href="#组织代码">组织代码</a>; <a href="#代码检验(Linting)">代码检验</a>; <a href="#测试">测试</a>; 以及 <a href="#浏览器开发者工具">使用开发者工具</a>。里面有几条对有经验的 JavaScript 开发者来说可能很显而易见，但是语言初学者很容易养成坏习惯。这些技巧提高了我的技术水平，同时也为我的用户创造了更好的体验。_这_难道不是我们最大的目标么。</p><blockquote><p>你可在此处<a href="http://developer.telerik.com/wp-content/uploads/2016/01/code.zip" target="_blank" rel="noopener">下载</a>本文的样例代码。</p></blockquote><h2 id="组织代码">组织代码</h2><p>JavaScript 初学者总是不可避免地在他们的 HTML 页面里写上一大坨代码。开始的时候都是很简单的，例如使用 jQuery 给一个表单输入自动加上焦点，然后要加上表单验证，然后又要加上一些市场上走俏的模态框组件——就是那些阻止用户往下阅读内容好让他们在 Facebook 上给网站点赞的东西。经过这些七七八八的功能迭代后你的一个文件里 HTML 标签和 JavaScript 都有了几百行。</p><p>别再继续这种乱七八糟的方式了。这个技巧太简单了我都不好意思单独把它列出来，但大家还_真的_很难拒绝这种把代码一坨扔上页面的偷懒做法。还请各位务必避之如瘟疫。养成好习惯：在开始的时候就先创建好一个空的 JavaScript 文件，然后用 script 标签引入它。这样一来，之后的交互与其他客户端功能代码就可以直接填入先前准备好的空文件里去了。</p><p>把 JavaScript 从 HTML 页面中剥离以后（干净多了是不是？），下一个问题就是关于这些代码的组织形式了。这几百行 JavaScript 也许功能没啥问题，但是几个月后，一旦你开始想调试或是改点东西，你可能特么找不到某个函数在哪了。</p><p>若仅仅把代码从 HTML 中剥离到一个单独文件中是不够的，那还能怎么办呢？</p><h3 id="框架">框架！</h3><p>显然解决方案是框架。把所有东西用 AngularJS，或 Ember，或 React 或其他几百个框架中某一个写一遍。哼哧哼哧地把整个网站重写为一个单页应用，用上 MVC 什么的。</p><p>或者根本不需要。当然了，别误会我，在编写应用的时候我喜欢用 Angular，但是一个“应用”和一个页面的交互复杂度是有区别的。一个用上 Ajax 技术的产品目录页和 Gmail 也是有区别的 - 起码几十万行代码的区别。那么，如果不走框架这条路的话，还有什么选择呢？</p><h3 id="设计模式">设计模式</h3><p>设计模式是对“这是过去人们解决问题的一个方法”这句话的高级说法。Addy Osmani 写过一本关于此的很好的书，<a href="http://addyosmani.com/resources/essentialjsdesignpatterns/book/" target="_blank" rel="noopener">学习 JavaScript 设计模式</a>，可以免费下载阅读。我推荐这本书。但是我对它（以及类似的关于此议题的讨论）有点小看法，因为最后你们写的代码可能变成这样:</p><pre><code>var c = new Car();c.startEngine();c.drive();c.soNotRealistic();</code></pre><p>对我来说，设计模式在抽象层面上是有意义的，但是在_实际工作中_，没有什么用。在实际项目的环境下，挑选并应用设计模式是件很困难的事情。</p><h4 id="模块">模块</h4><p>在所有我看过的设计模式中，我觉得模块模式是最简单也是最容易应用到现有代码里的。</p><p>纵而览之，模块模式就是一系列代码之外加了个包装。你抽取出一系列功能相关的代码扔到一个模块里，决定需要暴露的部分，也可以把一个模块里的代码放到不同的文件里。然后建立一个易于在项目之间共享的代码黑匣。</p><p>看看这个简单的例子。此处的语法乍看可能有点奇怪，起码我一开始是这样觉得的。我们先从“包装”部分开始看，然后我再解释其余部分。</p><p><img src="http://ww4.sinaimg.cn/large/9b5c8bd8jw1f0zumg7z7gj20kp05ojru.jpg"></p><p>模块模式的包装。</p><p>只有我一个人被这些括号搞晕了么？我搞不明白这里是干嘛的，这还是在我懂 JavaScript 的前提下。其实这里如果从里往外看，就清晰很多。</p><p><img src="http://ww2.sinaimg.cn/large/9b5c8bd8jw1f0zuncbxnuj20m805lgly.jpg"></p><p>模块的内部只是个普通的函数。</p><p>从一个简单的函数开始，在其内部定义该模块的实际需要提供的代码。</p><p><img src="http://ww1.sinaimg.cn/large/9b5c8bd8jw1f0zunvmhafj20m805ot94.jpg"></p><p>圆括号使得这个函数自动执行。</p><p>最后的圆括号会让该函数立即执行。我们在函数里返回了什么，模块就是什么。此时我们这里还是空的。不过此时上图高亮的部分还_不是_合法的 JavaScript。那么，怎样让它变得合法呢？</p><p><img src="http://ww4.sinaimg.cn/large/9b5c8bd8jw1f0zuoenvzjj20m805mdg9.jpg"></p><p>外边的圆括号开始发功了。</p><p>在<code>function() { }()</code> 外的圆括号使得此处成为合法JavaScript。你要是不信我，就打开开发者工具的控制台自己输入看看。</p><p>这样就是我们一开始看到的。</p><p><img src="http://ww1.sinaimg.cn/large/9b5c8bd8jw1f0zuotyvzej20m808ngm7.jpg"></p><p>返回值被赋给一个变量。</p><p>最后一件事是把返回值赋给一个变量。尽管我自己完全懂得这里，但每次我看见这种代码我都得暂停一秒钟来提醒自己这是什么鬼。说来也不怕羞，我在编辑器里存着这段空模块代码随时快手粘贴。</p><p>当我们终于征服了这坨诡异的语法之后，真正的模块模式究竟长啥样呢？</p><pre><code>var counterModule = (function() {  var counter = 0;  return {    incrementCounter: function () {      return counter++;    },    resetCounter: function () {      console.log(&quot;counter value prior to reset: &quot; + counter );      counter = 0;    }  };}());</code></pre><p>这段代码创建了一个叫做 <code>counterModule</code> 的模块。它有两个函数，<code>incrementCounter</code> 和 <code>resetCounter</code>。可以这样使用它们：</p><pre><code>console.log(counterModule.getCounter()); //0counterModule.incrementCounter();console.log(counterModule.getCounter()); //1counterModule.resetCounter();console.log(counterModule.getCounter()); //0</code></pre><p>主要的思想就是把 <code>counterModule</code> 里的代码好好地封装起来。封装是计算机科学基础概念，将来 JavaScript 还会提供更简单的封装方法，不过就现在来说，我觉得模块模式已是个超级简单和使用的组织代码方案。</p><h4 id="一个实用的模块案例">一个实用的模块案例</h4><p>吐槽完网上看到的样例（例如上面那个 Car 的例子）。我们现在需要编写一个符合实际场景需求的简单代码。限于本文篇幅，我会写得尽量简单，但会贴合你在遇到实际 web 项目时的情况。</p><p>假设你的网游公司愣天堂 (任粉莫喷)，在用户要创建游戏人物的时候需要一个注册页面。你需要一个可以让用户选择名字的表单。构建名字的规则有点诡异：</p><ul><li>必须以大写字母开头</li><li>长度不小于2</li><li>允许空格，但是不能有标点</li><li>不能有“敏感”词汇</li></ul><p>先写下这个超简单的表单。</p><pre><code>&lt;html&gt;  &lt;head&gt;  &lt;/head&gt;  &lt;body&gt;    &lt;p&gt;Text would be here to describe the rules...&lt;/p&gt;    &lt;form&gt;      &lt;input type=&quot;text&quot; placeholder=&quot;Identifer&quot;&gt;      &lt;input type=&quot;submit&quot; value=&quot;Register Identifer.&quot;&gt;    &lt;/form&gt;    &lt;script src=&quot;app.js&quot;&gt;&lt;/script&gt;  &lt;/body&gt;&lt;/html&gt;</code></pre><p>除了我描述的输入框，表单里还有个提交按钮。然后我加了些有关上面提到的规则的说明，先尽量保持精简。让我们来看看代码。</p><pre><code>var badWords = [&quot;kitten&quot;,&quot;puppy&quot;,&quot;beer&quot;];function hasBadWords(s) {  for(var i=0; i &lt; badwords.length; i++) {    if(s.indexof(badwords[i]) &gt;= 0) return true;  }  return false;}function validIdentifier(s) {  //是否为空  if(s === &quot;&quot;) return false;  //至少两个字符  if(s.length === 1) return false;  //必须以大写字母开头  if(s.charAt(0) !== s.charAt(0).toUpperCase()) return false;  //只允许字母和空格  if(/[^a-z ]/i.test(s)) return false;  //没有敏感词  if(hasBadWords(s)) return false;  return true;}document.getElementById(&quot;submitButton&quot;).addEventListener(&quot;click&quot;, function(e) {  var identifier = document.getElementById(&quot;identifer&quot;).value;  if(validIdentifier(identifier)) {    return true;  } else { console.log(&#39;false&#39;);    e.preventDefault();    return false;  }});</code></pre><p>从代码底部开始，你看到我写了点基本的获取页面元素的代码（没错伙计们这里我没有用 jQuery）然后监听 button 上的点击事件。拿到用户输入的用户名字段然后传给验证函数。验证的内容也就是我之前描述的那些。这里代码还没有_太_乱，不过随着之后验证逻辑的增长和页面交互逻辑的增加，代码会越来越难以维护。所以我们把这里重写为模块吧。</p><p>首先，创建 game.js 文件并在 index.html 中使用 script 标签引入它。然后把验证逻辑移到一个模块里。</p><pre><code>var gameModule = (function() {  var badWords = [&quot;kitten&quot;,&quot;puppy&quot;,&quot;beer&quot;];  function hasBadWords(s) {    for(var i=0; i &lt; badwords.length; i++) {      if(s.indexof(badwords[i]) &gt;= 0) return true;    }    return false;  }  function validIdentifier(s) {    //是否为空    if(s === &quot;&quot;) return false;    //至少两个字符    if(s.length === 1) return false;    //必须以大写字母开头    if(s.charAt(0) !== s.charAt(0).toUpperCase()) return false;    //只允许字母和空格    if(/[^a-z ]/i.test(s)) return false;    //没有敏感词    if(hasBadWords(s)) return false;    return true;  }  return {    valid:validIdentifier  }}());</code></pre><p>现在的代码和之前相比没有翻天覆地的差别，只不过是被封装成了一个有一个 <code>valid</code> 接口的 <code>gameModule</code> 变量。接下来我们来看看 app.js 文件。</p><pre><code>document.getElementById(&quot;submitButton&quot;).addEventListener(&quot;click&quot;, function(e) {  var identifier = document.getElementById(&quot;identifer&quot;).value;  if(gameModule.valid(identifier)) {    return true;  } else { console.log(&#39;false&#39;);    e.preventDefault();    return false;  }});</code></pre><p>看看我们的 DOM 监听函数里少了多少代码。所有的验证逻辑（两个函数和一个敏感词列表）被安全地移到了模块里后，这里的代码就更好维护了。如果你的编辑器支持，你在此处还能有模块方法名的代码补全。</p><p>模块化不是什么高深的东西，但它使我们的代码_更干净_，<em>更简单</em> ，这绝对是件好事。</p><h2 id="代码检验linting">代码检验(Linting)</h2><p>简单给初闻者解释下，代码检验表示使用最佳实践和一些避免出错的规则对代码进行检查。很高大上对不对？这么好的东西，我以前却以为只有挑剔过头的开发者才会考虑这个。当然了，我期望自己写出超棒的代码，但我也需要腾出时间玩游戏。就算我的代码够不上某些高大上的完美标准，但它能好好工作我就能满意了。</p><p>然而…</p><p>记不记得你有多少次重命名了个函数然后提醒自己之后一定会改？</p><p>记不记得你有多少次创建了个有两个形参的函数，其实最后只用了一个？</p><p>记不记得你有多少次写过多少蠢代码？我说的是那些根本不能工作的，类似我最爱的 <code>fuction</code> 和 <code>functon</code>。</p><p>代码检验就是这时候站出来帮你的！除了我之外大家都知道，代码检验不只有风格的最佳实践，还包含语法和基本的逻辑检验。还有一个让我从“等我有时间一定或做的” 跳到“我会虔诚地遵循它” 的原因，那就是几乎所有现代编辑器都支持此功能。我目前用的编辑器（ Sublime, Brackets 和 Visual Studio Code）都支持代码实时检验和反馈。</p><p>举个例子，以下是 Visual Studio Code 对我一段很挫的代码的提示。当然了，我是故意写得很挫的。</p><p><img src="http://ww4.sinaimg.cn/large/9b5c8bd8jw1f0zupgeoxdj20m80d1q40.jpg"></p><p>Visual Studio Code 代码检验。</p><p>上图中，你能看到 Visual Studio Code <strike>抱怨</strike>我代码中的几个错误。Visual Studio Code 的代码检验器，和大多数检验器一样，可配置你关心的检验规则以及对其中“错误”（必须修正）和“警告”(别偷懒啊，总要修复的)的定义。</p><p>如果你不想安装任何东西，也不想折腾编辑器，另一种好方法是使用<a href="http://jshint.com" target="_blank" rel="noopener">JSHint.com</a>在线检验代码。JSHint 差不多是最流行的检验器，它基于另一个检验器 JSLint (谁说它们长得像来着？)。JSHint 的诞生一部分原因是由于 JSLint 太过严格。你可以直接在编辑器里或是通过命令行使用 JSHint，最简单的体验方法是在它的网站上试试。</p><p><img src="http://ww1.sinaimg.cn/large/9b5c8bd8jw1f0zuppot76j20m804w0t8.jpg"></p><p>JSHint 网站。</p><p>乍看可能不太明显，其实左边是在一个在线代码编辑器。右边的是一份对左边代码的检验报告。要看到检验效果，最简单方式是在代码里随便写错点什么。我这里把 <code>main</code> 函数名改成了 <code>main2</code>。</p><pre><code>function main2() {  return &#39;Hello, World!&#39;;}main();</code></pre><p>马上，网页就对此给我报了两个错误。注意了，这并不是语法错误。代码在语法上是完全没问题的，但是 JSHint 发现了你可能忽视了的问题所在（当然了，这里代码只有5行，但想象下一个大文件里函数定义和调用之间隔了好多行的时候）。</p><p><img src="http://ww4.sinaimg.cn/large/9b5c8bd8jw1f0zuq1qvjvj209t070wei.jpg"></p><p>JSHint 错误。</p><p>来个更真实的例子如何？以下的代码（嗯现在我_是_用了 jQuery），我写了点简单的 JavaScript 做表单验证。都是些鸡毛蒜皮的东西，不过今天几乎一半的 JavaScript 代码做的都是这些事（哦哦当然还有创建弹出框然后问你要不要“赞”这个网站。真特么爱死这些了）。这些代码可以在 demo_jshint 文件夹的 app_orig.js 中找到。</p><pre><code>function validAge(x) {  return $.isNumeric(x) &amp;&amp; x &gt;= 1;}function invalidEmail(e) {  return e.indexOf(&quot;@&quot;) == -1;}$(document).ready(function() {  $(&quot;#saveForm&quot;).on(&quot;submit&quot;, function(e) {    e.preventDefault();    var name = $(&quot;#name&quot;).val();    var age = $(&quot;#age&quot;).val();    var email = $(&quot;#email&quot;).val();    badForm = false;    if(name == &quot;&quot;) badForm = true;    if(age == &quot;&quot;) badForm = true;    if(!$.isNumeric(age) || age &lt;= 0) badForm = true;    if(email == &quot;&quot;) badForm = true;    if(invalidemail(email)) badForm = true;    console.log(badform);    if (badform) alert(&#39;Bad Form!&#39;);    else {      // do something on good    }  });});</code></pre><p>开始是两个辅助验证的函数（对年龄和 email）。然后是 <code>document.ready</code> 代码块里对表单提交的监听。获取表单中三个字段的值，检查是否为空（或是无效输入），若表单无效就弹出警告，否则继续（在我们的例子里，什么也没发生，表单没变化）。</p><p>扔到 JSHint 上看看发生了啥：</p><p><img src="http://ww3.sinaimg.cn/large/9b5c8bd8jw1f0zuqkjapdj20b90s5q3x.jpg"></p><p>JSHint 对我们样例代码的报错。</p><p>哇塞好多东西！看起来是类似的问题出现了多次。我开始用检验器的时候这种情况挺常见。我并没有弄出很多种错误，而仅仅是同种错误的重复。第一个非常简单—— 检查相等时使用三等号替代双等号。简单来说就是用更严格的标准检测空字符串。先修复这个(demo_jshint/app_mod1.js)。</p><pre><code>function validAge(x) {  return $.isNumeric(x) &amp;&amp; x &gt;= 1;}function invalidEmail(e) {  return e.indexOf(&quot;@&quot;) == -1;}$(document).ready(function() {  $(&quot;#saveForm&quot;).on(&quot;submit&quot;, function(e) {    e.preventDefault();    var name = $(&quot;#name&quot;).val();    var age = $(&quot;#age&quot;).val();    var email = $(&quot;#email&quot;).val();    badForm = false;    if(name == &quot;&quot;) badForm = true;    if(age == &quot;&quot;) badForm = true;    if(!$.isNumeric(age) || age &lt;= 0) badForm = true;    if(email == &quot;&quot;) badForm = true;    if(invalidemail(email)) badForm = true;    console.log(badform);    if (badform) alert(&#39;Bad Form!&#39;);    else {      // do something on good    }  });});</code></pre><p>JSHint 报告变成了:</p><p><img src="http://ww2.sinaimg.cn/large/9b5c8bd8jw1f0zur1n2y4j20am0lb0t8.jpg"></p><p>JSHint 对我们样例代码的报错。</p><p>算是解决了。下一个错误类型是“未声明变量”。看着有点诡异。如果使用 jQuery 的话，你知道<code>$</code> 是存在的。<code>badForm</code> 的问题就更简单点——我忘记用 <code>var</code> 声明它了。那我们怎么解决<code>$</code>的问题呢？JSHint 提供了对代码规则检验方法的配置。在代码里加上一个注释以后，我们告诉 JSHint <code>$</code> 变量是作为全局变量可以放心使用。接下来我们补上这个注释，并且加上丢失的 <code>var</code> 声明（demo_jshint/app_mod2.js）。</p><pre><code>/* globals $ */function validAge(x) {  return $.isNumeric(x) &amp;&amp; x &gt;= 1;}function invalidEmail(e) {  return e.indexOf(&quot;@&quot;) == -1;}$(document).ready(function() {  $(&quot;#saveForm&quot;).on(&quot;submit&quot;, function(e) {    e.preventDefault();    var name = $(&quot;#name&quot;).val();    var age = $(&quot;#age&quot;).val();    var email = $(&quot;#email&quot;).val();    var badForm = false;    if(name == &quot;&quot;) badForm = true;    if(age == &quot;&quot;) badForm = true;    if(!$.isNumeric(age) || age &lt;= 0) badForm = true;    if(email == &quot;&quot;) badForm = true;    if(invalidemail(email)) badForm = true;    console.log(badform);    if (badform) alert(&#39;Bad Form!&#39;);    else {      // do something on good    }  });});</code></pre><p>JSHint 报告变成了:</p><p><img src="http://ww4.sinaimg.cn/large/9b5c8bd8jw1f0zurgx350j209204gwed.jpg"></p><p>JSHint 对我们样例代码的报错。</p><p>哇哦！就快结束了！最后一个问题恰好的展示了 JSHint 在提示最佳代码风格实践和指出错误以外的用途。这里我忘了写过一个处理年龄验证的函数。你看我创建了 <code>validAge</code>，但是在表单验证代码区域没使用它。也许我该删了这个函数 —— 反正也只有一行，但我觉得留下来更好——以免以后验证逻辑越来越复杂。以下就是完整的代码了(demo_jshint/app.js)。</p><pre><code>/* globals $ */function validAge(x) {  return $.isNumeric(x) &amp;&amp; x &gt;= 1;}function invalidEmail(e) {  return e.indexOf(&quot;@&quot;) == -1;}$(document).ready(function() {  $(&quot;#saveForm&quot;).on(&quot;submit&quot;, function(e) {    e.preventDefault();    var name = $(&quot;#name&quot;).val();    var age = $(&quot;#age&quot;).val();    var email = $(&quot;#email&quot;).val();    var badForm = false;    if(name === &quot;&quot;) badForm = true;    if(age === &quot;&quot;) badForm = true;    if(!validAge(age)) badForm = true;    if(email === &quot;&quot;) badForm = true;    if(invalidEmail(email)) badForm = true;    console.log(badForm);    if(badForm) alert(&#39;Bad Form!&#39;);    else {      //do something on good    }  });});</code></pre><p>最终版本“通过”了 JSHint 的测试。虽然实际上并不完美。注意到我两个检验函数一个叫 <code>validAge</code> 一个叫 <code>invalidEmail</code> ，一个返回肯定一个返回否定。更好的做法是保持语义一致性。还有每次这个验证函数运行的时候，jQuery 需要获取DOM 中的三个元素，其实它们只需要被获取一次。我应该在表单提交回调函数外创建这些变量，每次验证的时候重复使用。如我所言，JSHint 不是完美的，但代码最终版本绝对比第一版要好很多，我的修改也没有花多少时间。</p><p>不同用途的代码检验器有 JavaScript(<a href="http://www.jslint.com" target="_blank" rel="noopener">JSLint</a>和 <a href="http://www.jshint.com" target="_blank" rel="noopener">JSHint</a>)，HTML(<a href="http://htmlhint.com/" target="_blank" rel="noopener">HTMLHint</a>和 <a href="https://validator.w3.org/" target="_blank" rel="noopener">W3C Validator</a>)和CSS (<a href="http://csslint.net/" target="_blank" rel="noopener">CSSLint</a>)。如果编辑器支持，而你还是个“前端潮人”，还可以用 Grunt 和 Gulp 工具对这些进行自动化。</p><h2 id="测试">测试</h2><p>我不写测试。</p><p>没错，我话就撂这儿了。世界不会停止转动。不过，在开发客户端项目时，我其实_是_写测试的（好啦实际是我_尝试_去写测试），但是我的主要工作写博客，和各种功能的样例代码。这些代码只为验证概念而非投入生产环境使用，因此不写测试没什么大不了的。其实，在我成为布道者和不做“实际”工作之前，我也是敢这么放话的，不写测试的借口和不使用代码检验器一样。不过一些给检验器加分的因素放在测试上也很好用。</p><p>首先——许多编辑器会为你自动生成测试代码。例如在 Brackets 中，可以使用 <a href="https://github.com/dschaffe/brackets-xunit" target="_blank" rel="noopener">xunit</a> 扩展。借助它你只要在 JavaScript 文件上调出右键菜单就能生成测试代码（支持多种流行测试框架格式）。</p><p><img src="http://ww1.sinaimg.cn/large/9b5c8bd8jw1f0zus4jz8sj20m80hymy4.jpg"></p><p>xunit 创建的测试。</p><p>该扩展基于现存代码去生成测试代码。生成的测试代码只是个模板，你需要自己去填写具体内容，这避免了一些无聊的重复劳动。</p><p><img src="http://ww2.sinaimg.cn/large/9b5c8bd8jw1f0zuthjkyxj20m80hxjtd.jpg"></p><p>xunit 创建的测试。</p><p>完成了测试细节的填充后，该扩展会帮你自动执行测试。都到了这份上了，不写代码基本上就只是懒了。</p><p><img src="http://ww2.sinaimg.cn/large/9b5c8bd8jw1f0zutuzzmij20m80l50we.jpg"></p><p>测试报告。</p><p>你也许听过 TDD (测试驱动开发)。说的是在写具体代码之前先把单元测试写好。本质上是测试主导你的开发。写下代码并看它通过测试的时候，这些通过的测试能让你确保自己没有走错路。</p><p>我觉得这个想法不错，不过让所有人都这么做的确是有点困难。我们干脆先从简单点的开始。想象下你手上有一些据你所知功能正常的代码，然后你发现了个 bug。在修复它之前，你可以创建一个测试去检验出此 bug，修复 bug，然后跑跑测试，确保此后相同的 bug _不会_再次出现。如我所言，这不是最理想的实践，但也能算是朝着以后在开发所有阶段实践测试的一个过渡。</p><p>我用我写的一个精简数字显示的函数作为 bug 的例子。109203可以精简为109K。更大的例如2190290这样的数可精简为2M。看下代码然后我会说说 bug。</p><pre><code>var formatterModule = (function() {  function fnum(x) {    if(isNaN(x)) return x;    if(x &lt; 9999) {      return x;    }    if(x &lt; 1000000) {      return Math.round(x/1000) + &quot;K&quot;;    }    if(x &lt; 10000000) {      return (x/1000000).toFixed(2) + &quot;M&quot;;    }    if(x &lt; 1000000000) {      return Math.round((x/1000000)) + &quot;M&quot;;    }    if(x &lt; 1000000000000) {      return Math.round((x/1000000000)) + &quot;B&quot;;    }    return &quot;1T+&quot;;  }  return {    fnum:fnum  }}());</code></pre><p>你马上看出问题了？还是放弃了？当输入9999的时候，会返回10K。尽管此精简可能有用，但代码对于所有小于10K的数字应该一视同仁，都返回它们的原始值。这个修正很简单，我们正好当作添加测试的机会。关于测试框架我选择 <a href="http://jasmine.github.io/" target="_blank" rel="noopener">Jasmine</a>。Jasmine 的测试易于编写和运行。最快的使用方法是下载这个库。解压后你会发现 SpecRunner.html 文件。此文件负责引入我们的代码，引入测试，而后运行测试和生成漂亮的报告。它依赖于压缩包中的 lib 文件夹，你一开始可以把 SpecRunner 和 lib 文件夹一起复制到你的服务器某处。</p><p>打开 SpecRunner.html 你会看到。</p><pre><code>&lt;!-- include source files here... --&gt;script tags here...&lt;!-- include spec files here... --&gt;more script tags here...</code></pre><p>在第一个注释下你需要删除已有的代码然后加上一个 script 标签引入你的代码。如果下载了此文的代码，你可以在 demo4 文件夹里找到 formatter.js 文件。之后你要加一个 script 标签引入测试代码。你可能之前没见过 Jasmine，但你看看这个测试代码，_非常_易读，新手也能懂。</p><pre><code>describe(&quot;It can format numbers nicely&quot;, function() {  it(&quot;takes 9999 and returns 9999&quot;, function() {    expect(9999).toBe(formatterModule.fnum(9999));  });});</code></pre><p>我的测试说的是当9999作为输入时应该返回9999。在浏览器里打开 SpecRunner.html 你就能看到错误报告。</p><p><img src="http://ww4.sinaimg.cn/large/9b5c8bd8jw1f0zuu5bbhaj20m80e1q61.jpg"></p><p>测试失败的报告。</p><p>修复起来很简单。把条件里的数字从9999增到10000:</p><pre><code>if(x &lt; 10000) {  return x;}</code></pre><p>不论何时再跑测试你能看到一片欢乐。</p><p><img src="http://ww2.sinaimg.cn/large/9b5c8bd8jw1f0zuuh4xj8j20m804y74k.jpg"></p><p>测试成功的报告。</p><p>你估计能想出一些相关测试完善这套测试。通常来说，积极地添加测试以覆盖你代码的各种可能使用场景没有任何不妥。关于日期和时间的牛库 <a href="http://momentjs.com/" target="_blank" rel="noopener">Moment.js</a>，不是我骗你，有超过五万七千多个测试。你真没看错，就是几万个。</p><p>JavaScript 测试框架的其他选择有 <a href="https://qunitjs.com/" target="_blank" rel="noopener">QUnit</a>和 <a href="http://mochajs.org/" target="_blank" rel="noopener">Mocha</a>。和代码检验一样，你能使用 Grunt 之类的工具自动化测试，甚至可以往全栈靠一点，使用 <a href="http://www.seleniumhq.org/" target="_blank" rel="noopener">Selenium</a> 测试浏览器。</p><h2 id="浏览器开发者工具">浏览器开发者工具</h2><p>我提到的最后一个工具在浏览器里——开发者工具。你能找到许多关于此的文章、演讲和视频，我亦不需赘言。在今天所说的所有内容中，这一条我认为应该是 web 开发者的<strong>必需知识</strong>。你可以写出不能用的代码，可以不是什么都懂，但起码还有开发者工具帮你找出错误所在，然后你只需要 google 一下问题就能解决了。</p><p>再多提一个建议，你不该把自己吊在一个浏览器的开发者工具上。几年前我在鼓捣 App Cache （没错我就是爱自虐），碰上了个只在 Chrome 下出现的问题。当时开着开发者工具，但是没啥用。我灵机一动用 Firefox 打开我的代码，使用它的工具调试，然后我<strong>立刻</strong>就发现了问题所在。Firefox 列出的关于请求的信息比 Chrome 多。我用了一次这个工具立马解决了问题（好吧其实这是胡诌的，Firefox 的确显出问题所在不过我修复问题也用了好些时间）。如果你卡在某个问题上，不如试试打开其他浏览器看看错误报告有没有多说些什么。</p><p>万一万一你真从没_见_过开发者工具，以下有些主流浏览器工具阅览指南和极好的详细教程。</p><h3 id="google-chrome">Google Chrome</h3><p>点击浏览器右上角的汉堡菜单图标，选择“更多工具” -&gt; “开发者工具”。也可以用键盘快捷键打开，例如在 OSX 下快捷键是 <code>CMD+SHIFT+C</code>。关于谷歌的开发者工具文档可到 <a href="https://developer.chrome.com/devtools" target="_blank" rel="noopener">Chrome 开发者工具纵览</a>寻找。</p><h3 id="mozilla-firefox">Mozilla Firefox</h3><p>在主菜单的“工具”栏里，选择 “Web 开发者” -&gt; “切换工具箱”。Firefox 工具栏很酷，在同一菜单下，有许多快速打开开发者工具命令。详情请见 <a href="https://developer.mozilla.org/en-US/docs/Tools" target="_blank" rel="noopener">Firefox 开发者工具</a></p><h3 id="apple-safari-传说中用来看-apple-keynotes-的浏览器">Apple Safari (传说中用来看 Apple keynotes 的浏览器)</h3><p>你得先开启“开发”菜单才能使用开发者工具。进入 Safari 偏好设置，选择“高级”，选中“在菜单栏中显示’开发’菜单”。然后就能从“开发菜单”里通过“显示 Web 检查器”（或者其下的其他三个菜单项）打开工具。详情见<a href="https://developer.apple.com/library/safari/documentation/AppleApplications/Conceptual/Safari_Developer_Guide/Introduction/Introduction.html" target="_blank" rel="noopener">关于 Safari Web 检查器</a>。</p><h3 id="internet-explorer">Internet Explorer</h3><p>点击浏览器右上角的设置按钮或按下键盘 F12键打开开发者工具。详情见<a href="https://msdn.microsoft.com/library/bg182326%28v=vs.85%29" target="_blank" rel="noopener">使用 F12 开发者工具</a>。</p><h2 id="更多学习">更多学习</h2><p>有时候感觉像我们这些做开发的，工作就从来没有完成的时候。你知道在这篇文章写作期间有13个新的 JavaScript 框架发布了么？讲真！以下是最后几个让你学习并且跟上潮流的建议，尽量跟上。</p><p>学习方面，我选择专注于 <a href="http://developer.mozilla.org" target="_blank" rel="noopener">Mozilla Developer Network</a>(你要是准备 google 什么，最好加上 “mdn” 作为前缀)，<a href="http://www.codeschool.com" target="_blank" rel="noopener">CodeSchool</a> (一个商业的编程学习视频网站，内容还不错), 和 <a href="https://www.khanacademy.org/" target="_blank" rel="noopener">Khan Academy</a>。特别要说下 Mozilla 开发者网络(MDN)，多年来我以为它只有 Netscape/Firefox 知识而忽视了它，蠢死了我。</p><p>另一建议是多读代码！你们中许多人都用过 jQuery，但你有打开它的源码看看它的实现么？读别人的代码是一个很好的学习技巧的和方法的途径。还有一个听起来可能有点恐怖，不过我真的强烈建议你分享自己的代码。不光是多了双雪亮的眼睛（或者成千上万双）来审视你的代码，你也许也能帮助其他的人。几年前我看见一个初级程序员分享他的代码，虽然里面有些菜鸟级的错误，但也有一些超棒的技巧。</p><p>为获取最新资讯，我订阅了 <a href="http://cooperpress.com" target="_blank" rel="noopener">Cooper Press</a> 发行的一系列周报。有 HTML 的，JavaScript 的，Node 的和移动开发(Mobile) 和其他一系列。信息可能会淹没你，尽你所能阅读就行。当我看到某个新发布的工具有我_并不_需要的 XXX 功能的时候，我也不用去学它。我只要记住“诶哟有个工具有 XXX 功能”，以后我需要这个功能的时候再去学习。</p>]]></content>
    
    <summary type="html">
    
      成为一个更好的 Javascript 开发者。代码组织，Linting，测试。
    
    </summary>
    
      <category term="前端" scheme="http://hikerpig.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Javascript" scheme="http://hikerpig.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Test FileReader methods</title>
    <link href="http://hikerpig.github.io/2015/07/11/2015-07-11-Test-FileReader-methods/"/>
    <id>http://hikerpig.github.io/2015/07/11/2015-07-11-Test-FileReader-methods/</id>
    <published>2015-07-11T06:46:58.000Z</published>
    <updated>2015-07-11T06:46:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近一个需求，需要用浏览器读取图片在前端缩略显示并且根据文件信息排序。</p><p>最近jsperf挂了, V2还在开发不太好用, 现在这里存个档。</p><h2 id="使用benchmark.js测试性能">使用Benchmark.js测试性能</h2><p>写一个小页面测试两种方法速度:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> suite = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">readFile</span>(<span class="params">file, method, deferred</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> fr = <span class="keyword">new</span> FileReader();</span><br><span class="line">    fr[method](file);</span><br><span class="line">    fr.onloadend = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      deferred.resolve();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">runSuite</span>(<span class="params">file</span>) </span>&#123;</span><br><span class="line">    suite = <span class="keyword">new</span> Benchmark.Suite(&#123;</span><br><span class="line">      name: <span class="string">'FileReader perf'</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    suite</span><br><span class="line">      .add(<span class="string">'FileReader.readAsArrayBuffer'</span>, &#123;</span><br><span class="line">        defer: <span class="literal">true</span>,</span><br><span class="line">        fn: <span class="function"><span class="keyword">function</span>(<span class="params">deferred</span>) </span>&#123;</span><br><span class="line">          readFile(file, <span class="string">'readAsArrayBuffer'</span>, deferred);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      .add(<span class="string">'FileReader.readAsDataURL'</span>, &#123;</span><br><span class="line">        defer: <span class="literal">true</span>,</span><br><span class="line">        fn: <span class="function"><span class="keyword">function</span>(<span class="params">deferred</span>) </span>&#123;</span><br><span class="line">          readFile(file, <span class="string">'readAsDataURL'</span>, deferred);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      .on(<span class="string">'complete'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'completed'</span>);</span><br><span class="line">        <span class="keyword">this</span>.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">bench</span>) </span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'Bench: '</span>, bench.name);</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'Hz: '</span>, bench.hz);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;)</span><br><span class="line">      .run();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">onFileChage</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> file = e.target.files[<span class="number">0</span>];</span><br><span class="line">    runSuite(file);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'fileinput'</span>).addEventListener(<span class="string">'change'</span>, onFileChage);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="结果">结果</h2><p>在我的MBP上测试:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">== Firefox 39.0 ==</span><br><span class="line"></span><br><span class="line">&quot;Bench: &quot; &quot;FileReader.readAsArrayBuffer&quot;</span><br><span class="line">&quot;Hz: &quot; 2852.075550774104</span><br><span class="line">&quot;Bench: &quot; &quot;FileReader.readAsDataURL&quot;</span><br><span class="line">&quot;Hz: &quot; 967.485735798381</span><br><span class="line"></span><br><span class="line">== Chrome 43.0 ==</span><br><span class="line"></span><br><span class="line">Bench:  FileReader.readAsArrayBuffer</span><br><span class="line">Hz:  221.9625071172418</span><br><span class="line">Bench:  FileReader.readAsDataURL</span><br><span class="line">Hz:  206.2738933937363</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      测试FileReader两个方法的速度
    
    </summary>
    
      <category term="前端" scheme="http://hikerpig.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Test" scheme="http://hikerpig.github.io/tags/Test/"/>
    
  </entry>
  
  <entry>
    <title>使用Coffeetags在VIM中显示coffee文件代码结构</title>
    <link href="http://hikerpig.github.io/2015/07/02/2015-01-28-%E4%BD%BF%E7%94%A8Coffeetags%E5%9C%A8VIM%E4%B8%AD%E6%98%BE%E7%A4%BAcoffee%E6%96%87%E4%BB%B6%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%84/"/>
    <id>http://hikerpig.github.io/2015/07/02/2015-01-28-使用Coffeetags在VIM中显示coffee文件代码结构/</id>
    <published>2015-07-02T02:56:18.000Z</published>
    <updated>2015-07-02T02:56:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>VIM的插件<a href="https://github.com/majutsushi/tagbar" target="_blank" rel="noopener">Tagbar</a>可以在侧边栏显示当前代码结构，不过Tagbar使用的ctags不支持coffeescript。</p><p>不过我们可以使用ruby版本的<a href="https://github.com/lukaszkorecki/CoffeeTags" target="_blank" rel="noopener">CoffeeTags</a>生成tags。</p><p>首先:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ [sudo] gem install CoffeeTags</span><br></pre></td></tr></table></figure><p>然后只要在~/.vimrc里加上下面几行配置。(参考<a href="https://github.com/lukaszkorecki/CoffeeTags" target="_blank" rel="noopener">CoffeeTags项目自带的vim插件</a>)</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">executable</span>(<span class="string">'coffeetags'</span>)</span><br><span class="line">  <span class="keyword">let</span> <span class="variable">g:tagbar_type_coffee</span> = &#123;</span><br><span class="line">    \ <span class="string">'ctagsbin'</span> : <span class="string">'coffeetags'</span>,</span><br><span class="line">    \ <span class="string">'ctagsargs'</span> : <span class="string">''</span>,</span><br><span class="line">    \ <span class="string">'kinds'</span> : [</span><br><span class="line">      \ <span class="string">'c:classes'</span>,</span><br><span class="line">      \ <span class="string">'m:methods'</span>,</span><br><span class="line">      \ <span class="string">'a:attributes'</span>,</span><br><span class="line">      \ <span class="string">'f:functions'</span>,</span><br><span class="line">      \ <span class="string">'v:variables'</span>,</span><br><span class="line">      \ <span class="string">'p:prototypes'</span>,</span><br><span class="line">      \ <span class="string">'o:object'</span>,</span><br><span class="line">      \ <span class="string">'b:blocks'</span></span><br><span class="line">    \ ],</span><br><span class="line">    \ <span class="string">'sro'</span> : <span class="string">"."</span>,</span><br><span class="line">    \ <span class="string">'kind2scope'</span> : &#123;</span><br><span class="line">      \ <span class="string">'f'</span> : <span class="string">'function'</span>,</span><br><span class="line">      \ <span class="string">'o'</span> : <span class="string">'object'</span>,</span><br><span class="line">    \ &#125;</span><br><span class="line">  \ &#125;</span><br><span class="line"><span class="keyword">endif</span></span><br></pre></td></tr></table></figure><p>就可以浏览清晰的coffee结构啦。</p><img src="//images-hikerpig.qiniudn.com/image/coffeetags_tagbar.jpg" alt="undefined">]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;VIM的插件&lt;a href=&quot;https://github.com/majutsushi/tagbar&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Tagbar&lt;/a&gt;可以在侧边栏显示当前代码结构，不过Tagbar使用的ctags不支持coffeescr
      
    
    </summary>
    
    
      <category term="Coffeescript" scheme="http://hikerpig.github.io/tags/Coffeescript/"/>
    
      <category term="Vim" scheme="http://hikerpig.github.io/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>使用python编写vim脚本 对齐赋值语句</title>
    <link href="http://hikerpig.github.io/2015/05/21/2015-04-16-Align-your-assignment-sentence-using-Python-in-Vim/"/>
    <id>http://hikerpig.github.io/2015/05/21/2015-04-16-Align-your-assignment-sentence-using-Python-in-Vim/</id>
    <published>2015-05-21T02:20:57.000Z</published>
    <updated>2015-05-21T02:20:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>JSer们，不管是前后端，文件头的dependency部分堆积了一群犬牙交错的require语句的时候，内心有没有过一个冲动把它们全都捋一遍全对齐了！各种foramtter给平日的眼净心静贡献了不少力量，不过我印象中ST,VIM,Webstorm好像都没有这么个插件，干脆自己写一个吧。</p><h3 id="需求">需求</h3><ul><li>以等号对齐require语句</li></ul><h3 id="附加需求">附加需求</h3><ul><li>以等号或冒号对齐语句</li></ul><p>平时VIM用的比较多，先下手这个。</p><p>VIM有自己强大的DSL插件语言vimscript， 不过各种东西的学习曲线真的是… ( %&gt;_&lt;% )，折腾了一下发现最关键的正则模块我没搞清楚。</p><p>想想这个需求很简单，也不需要跟编辑器做很多交互，所以还是用一个顺手的语言实现吧。</p><p>VIM具有lua, tcl, perl, ruby, python的编程接口，我就决定用python了，具体接口内容可以看文档:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:<span class="keyword">help</span> if_pyth.txt</span><br></pre></td></tr></table></figure><p>比较关键的几个对象是:</p><ul><li><code>vim.current.buffer</code> 当前缓冲区(也可以理解是存在内存里的当前编辑文件内容)</li><li><code>vim.current.buffer.mark</code> 获取当前缓冲区的某个mark信息, 下面我使用的mark(‘&lt;’)和mark(‘&gt;’)是比较特殊的,上一次visual selection的起止位置</li><li><code>vim.current.window.cursor</code> 当前窗口下输入光标所在位置</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> exists(<span class="string">"g:loaded_require_formatter"</span>)</span><br><span class="line">  finish</span><br><span class="line">endif</span><br><span class="line">let g:loaded_require_formatter = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="string">"Function: :format</span></span><br><span class="line"><span class="string">"</span>Desc: align the require statement</span><br><span class="line"><span class="string">"</span></span><br><span class="line"><span class="string">func! s:format()</span></span><br><span class="line"><span class="string">python &lt;&lt; EOF</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">import vim</span></span><br><span class="line"><span class="string">import re</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># prepare</span></span><br><span class="line"><span class="string">buffer = vim.current.buffer</span></span><br><span class="line"><span class="string">require_pattern = re.compile(r'(?P&lt;left&gt;\s*[\w\d_]+\s?)=\s*require(?P&lt;right&gt;[\w\d\"\'\s\(\)\-\/]+)')</span></span><br><span class="line"><span class="string">assign_pattern = re.compile(r'(?P&lt;left&gt;\s*[\w\d_]+\s?)[=:]\s*(?P&lt;right&gt;[\w\d\"\'\s\(\)\-\/]+)')</span></span><br><span class="line"><span class="string">g_pattern = require_pattern</span></span><br><span class="line"><span class="string">g_matches = []</span></span><br><span class="line"><span class="string">g_seperator = '='</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">vst = 0</span></span><br><span class="line"><span class="string">vend = 0</span></span><br><span class="line"><span class="string">start_mark = buffer.mark('&lt;')</span></span><br><span class="line"><span class="string">end_mark = buffer.mark('&gt;')</span></span><br><span class="line"><span class="string">if start_mark:</span></span><br><span class="line"><span class="string">  vst = start_mark[0] - 1</span></span><br><span class="line"><span class="string">if end_mark:</span></span><br><span class="line"><span class="string">  vst = end_mark[0]</span></span><br><span class="line"><span class="string">cursor = vim.current.window.cursor</span></span><br><span class="line"><span class="string">cend = cursor[0]</span></span><br><span class="line"><span class="string">lines = buffer[0:]</span></span><br><span class="line"><span class="string">g_start_line = 0</span></span><br><span class="line"><span class="string">if vst and vend:</span></span><br><span class="line"><span class="string">  if vend == cend:</span></span><br><span class="line"><span class="string">    lines = buffer[vst:vend]</span></span><br><span class="line"><span class="string">    g_start_line = vst</span></span><br><span class="line"><span class="string">    g_pattern = assign_pattern</span></span><br><span class="line"><span class="string">    g_seperator = re.compile('[=:]')</span></span><br><span class="line"><span class="string">    #print 'vstart is', vst</span></span><br><span class="line"><span class="string">    #print 'vend is', vend</span></span><br><span class="line"><span class="string">    #print lines</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def get_formated_line(text, left_len, seperator='='):</span></span><br><span class="line"><span class="string">    "</span><span class="string">""</span></span><br><span class="line">    :text: &#123;str&#125;</span><br><span class="line">    :left_len: &#123;int&#125;</span><br><span class="line">    :returns: &#123;str&#125;</span><br><span class="line"></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    if hasattr(seperator, 'match'):</span></span><br><span class="line"><span class="string">      match = seperator.search(text)</span></span><br><span class="line"><span class="string">      if match:</span></span><br><span class="line"><span class="string">        epos = match.start()</span></span><br><span class="line"><span class="string">      else:</span></span><br><span class="line"><span class="string">        return text</span></span><br><span class="line"><span class="string">    else:</span></span><br><span class="line"><span class="string">      epos = text.find(seperator)</span></span><br><span class="line"><span class="string">    left_str = text[0:epos]</span></span><br><span class="line"><span class="string">    remained = text[epos:]</span></span><br><span class="line"><span class="string">    short_of_len = left_len - len(left_str)</span></span><br><span class="line"><span class="string">    if short_of_len &gt; 0:</span></span><br><span class="line"><span class="string">        to_append = []</span></span><br><span class="line"><span class="string">        for i in range(0, short_of_len):</span></span><br><span class="line"><span class="string">            to_append.append(' ')</span></span><br><span class="line"><span class="string">        to_append = ''.join(to_append)</span></span><br><span class="line"><span class="string">        text = left_str + to_append + remained</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    return text</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def start(lines):</span></span><br><span class="line"><span class="string">    max_left_len = 0</span></span><br><span class="line"><span class="string">    matched_linenos = []</span></span><br><span class="line"><span class="string">    for i, line in enumerate(lines):</span></span><br><span class="line"><span class="string">        matches = g_pattern.match(line)</span></span><br><span class="line"><span class="string">        if matches:</span></span><br><span class="line"><span class="string">            matched_linenos.append(i)</span></span><br><span class="line"><span class="string">            g_matches.append(matches)</span></span><br><span class="line"><span class="string">            gp_dict = matches.groupdict()</span></span><br><span class="line"><span class="string">            left = gp_dict.get('left')</span></span><br><span class="line"><span class="string">            if not left[-1] == ' ':</span></span><br><span class="line"><span class="string">              left += ' '</span></span><br><span class="line"><span class="string">            left_len = len(left)</span></span><br><span class="line"><span class="string">            max_left_len = max(max_left_len, left_len)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    for i in matched_linenos:</span></span><br><span class="line"><span class="string">        line = lines[i]</span></span><br><span class="line"><span class="string">        fl = get_formated_line(line, max_left_len, seperator=g_seperator)</span></span><br><span class="line"><span class="string">        #print "formed_line is ", fl</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        # replace the line</span></span><br><span class="line"><span class="string">        real_lineno = i + g_start_line</span></span><br><span class="line"><span class="string">        del buffer[real_lineno]</span></span><br><span class="line"><span class="string">        buffer.append(fl, real_lineno)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># start</span></span><br><span class="line"><span class="string">try:</span></span><br><span class="line"><span class="string">  start(lines)</span></span><br><span class="line"><span class="string">except Exception as exp:</span></span><br><span class="line"><span class="string">  print exp</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"><span class="string">endfunc</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">" change this map if it conflicts with others</span></span><br><span class="line"><span class="string">map &lt;C-e&gt; :echo &lt;SID&gt;format()&lt;CR&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">" 处于visual模式的时候会报range not allowed的错,</span></span><br><span class="line"><span class="string">" vmap的时候先退出v模式"</span></span><br><span class="line"><span class="string">vmap &lt;C-e&gt; &lt;Esc&gt;:echo &lt;SID&gt;format()&lt;CR&gt;</span></span><br></pre></td></tr></table></figure><p>这样在normal和visual模式下都可以轻松对齐了。</p><h2 id="参考文章">参考文章</h2><ul><li><a href="http://hi.baidu.com/bluebanboom/item/439c23626237072769105b29" target="_blank" rel="noopener">Python in Vim</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;JSer们，不管是前后端，文件头的dependency部分堆积了一群犬牙交错的require语句的时候，内心有没有过一个冲动把它们全都捋一遍全对齐了！各种foramtter给平日的眼净心静贡献了不少力量，不过我印象中ST,VIM,Webstorm好像都没有这么个插件，干脆自
      
    
    </summary>
    
      <category term="玩具" scheme="http://hikerpig.github.io/categories/%E7%8E%A9%E5%85%B7/"/>
    
    
      <category term="VIM" scheme="http://hikerpig.github.io/tags/VIM/"/>
    
  </entry>
  
  <entry>
    <title>用Tagbar在VIM中查看scss文件代码结构</title>
    <link href="http://hikerpig.github.io/2015/02/05/2015-02-05-show-scss-code-outline-with-Tagbar/"/>
    <id>http://hikerpig.github.io/2015/02/05/2015-02-05-show-scss-code-outline-with-Tagbar/</id>
    <published>2015-02-05T09:27:37.000Z</published>
    <updated>2015-02-05T09:27:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>在<code>~/.ctags</code>里加上这几行定义下scss文件的规则:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">--langdef=scss</span><br><span class="line">--langmap=scss:.scss</span><br><span class="line">--regex-scss=/^[ \t]*([^\t &#123;&#125;][^&#123;&#125;]&#123;1,100&#125;)(\t| )*\&#123;/| \1/d,definition/</span><br><span class="line">--regex-scss=/^[@]mixin ([^ ()]+).*/\1/m,mixin/</span><br><span class="line">--regex-scss=/^[@]function ([^ ()]+).*/\1/f,function/&#125;</span><br><span class="line">--regex-scss=/^\$([A-Za-z0-9._-]+)\s?:.*/\1/v,variable/&#125;</span><br></pre></td></tr></table></figure><p>在<code>~/.vimrc</code>里加上这几行(前提是VIM有安装Tagbar插件哦)</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">g:tagbar_type_scss</span> = &#123;</span><br><span class="line">  \ <span class="string">'ctagsbin'</span>     : <span class="string">'ctags'</span>,</span><br><span class="line">  \ <span class="string">'ctagstype'</span>     : <span class="string">'scss'</span>,</span><br><span class="line">  \ <span class="string">'kinds'</span>     : [</span><br><span class="line">      \ <span class="string">'d:definition'</span>,</span><br><span class="line">      \ <span class="string">'f:functions'</span>,</span><br><span class="line">      \ <span class="string">'m:mixins'</span>,</span><br><span class="line">      \ <span class="string">'v:variables'</span>,</span><br><span class="line">  \ ],</span><br><span class="line">\ &#125;</span><br></pre></td></tr></table></figure><p>写正则真是越来越好玩了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在&lt;code&gt;~/.ctags&lt;/code&gt;里加上这几行定义下scss文件的规则:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/sp
      
    
    </summary>
    
      <category term="前端" scheme="http://hikerpig.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="VIM" scheme="http://hikerpig.github.io/tags/VIM/"/>
    
      <category term="CSS" scheme="http://hikerpig.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>从今开始用Casperjs来暴力签到吧</title>
    <link href="http://hikerpig.github.io/2015/02/05/2014-04-02-%E4%BB%8E%E4%BB%8A%E5%BC%80%E5%A7%8B%E7%94%A8Casperjs%E6%9D%A5%E6%9A%B4%E5%8A%9B%E7%AD%BE%E5%88%B0%E5%90%A7/"/>
    <id>http://hikerpig.github.io/2015/02/05/2014-04-02-从今开始用Casperjs来暴力签到吧/</id>
    <published>2015-02-05T04:08:06.000Z</published>
    <updated>2015-02-05T04:08:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>前几天室友捶头顿足的对我吼：“杀千刀的今天竟然忘记虾米签到了啊啊啊！！！老娘累计了一百多天！！！！还要花钱去买补签卡啊尼玛！！！！！”</p><p>团队项目里最近开始使用的测试框架<a href="" title="http://www.casperjs.org">Casperjs</a>，有了这个基于PhantomJS的Headless UI测试工具包，哼哼哼，机器手点点点。</p><p>俗话说，有补签的签到都是耍流氓，没补签的都是暴君。来来来！兄弟姐妹们！黑喂狗！切克闹！我们的目标是！</p><h2 id="消灭虾米的罪恶补签卡">消灭虾米的罪恶补签卡</h2><p>问问谷歌，找到<a href="" title="http://panyongzheng.iteye.com/blog/1947900">一篇总结用法的文章</a>，把里面提到的沪江自动签到例子看看，只要稍加观察虾米网站的主页以稍加改写，困扰小伙伴们多日的漏签问题就能解决了。</p><p>casperjs支持用coffeescript书写用例。</p><p>废话结束，上代码：</p><script src="//gist.github.com/10013696.js?file=qiandao_casper.coffee"></script><p>当然了，在使用这段脚本之前，安装casper</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g casper</span><br></pre></td></tr></table></figure><p>然后就可以</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- casperjs xiami_checkin.js</span><br><span class="line">为账户****纯洁的马赛克***签到ing</span><br><span class="line">为账户****纯洁的马赛克***签到ing</span><br><span class="line">登录成功</span><br><span class="line">执行登录后的其它操作</span><br><span class="line">签到成功！*********</span><br><span class="line">登录成功</span><br><span class="line">执行登录后的其它操作</span><br><span class="line">签到成功！*********</span><br></pre></td></tr></table></figure><p>有了这神秘机器手的照顾，小伙伴们从此奔跑在美丽的夕阳下，再也不用担心没刷卡没签到没积分了。</p><p>更多用法请参照<a href="" title="http://docs.casperjs.org/en/latest">Casper文档</a>。</p><h2 id="文艺版的虾米破解">文艺版的虾米破解</h2><p>谷歌还给搜出了<a href="" title="https://github.com/isombyt/XiaQian">虾签</a>这个项目，想法还是很好的，用用户提供的账号登录以后记下cookie值，再模拟一下api发送。</p><p>内外两道谁能撑得久，还是得看虾米工程师的脸色啊。静待虾米4月8与淘宝账号的打通，到时候再走着瞧。</p><h1 id="更新下">更新下</h1><p>果然虾米后来主页结构小小改版，原本的脚本就不太好用了，果然还是得随时追踪下运行情况。请看接下来的这篇<a href="!--￼3--">用node-schedule跑脚本</a>来实现加强版的定时签到。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前几天室友捶头顿足的对我吼：“杀千刀的今天竟然忘记虾米签到了啊啊啊！！！老娘累计了一百多天！！！！还要花钱去买补签卡啊尼玛！！！！！”&lt;/p&gt;
&lt;p&gt;团队项目里最近开始使用的测试框架&lt;a href=&quot;&quot; title=&quot;http://www.casperjs.org&quot;&gt;Cas
      
    
    </summary>
    
      <category term="玩具" scheme="http://hikerpig.github.io/categories/%E7%8E%A9%E5%85%B7/"/>
    
    
      <category term="自动化测试" scheme="http://hikerpig.github.io/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Coffeescript小角落，和javascript混写</title>
    <link href="http://hikerpig.github.io/2015/02/05/2014-04-22-Coffeescript%E5%B0%8F%E8%A7%92%E8%90%BD%EF%BC%8C%E5%92%8Cjavascript%E6%B7%B7%E5%86%99/"/>
    <id>http://hikerpig.github.io/2015/02/05/2014-04-22-Coffeescript小角落，和javascript混写/</id>
    <published>2015-02-05T02:13:32.000Z</published>
    <updated>2015-02-05T02:13:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>在<a href="https://donatstudios.com/CoffeeScript-Madness" target="_blank" rel="noopener">coffeescript-madness</a>中提到了用coffee的<code>literal</code>来在函数内部强制生成局部变量，防止对外层变量的意外修改，例如coffee代码：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">y = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="title">test</span> = <span class="params">(x)</span> -&gt;</span></span><br><span class="line">  `<span class="javascript"><span class="keyword">var</span> y</span>`</span><br><span class="line">  y = <span class="number">10</span></span><br><span class="line">  x + y</span><br></pre></td></tr></table></figure><p>会生成:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test, y;</span><br><span class="line"></span><br><span class="line">y = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">test = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> y;</span><br><span class="line">  y = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>反引号内的内容会被直接打印到输出代码中，并且自动补全一个分号结尾。</p><p>在生产实践中是不会用这种歪门邪道的，就当知道了一个跟编译器玩捉迷藏的方法好了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在&lt;a href=&quot;https://donatstudios.com/CoffeeScript-Madness&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;coffeescript-madness&lt;/a&gt;中提到了用coffee的&lt;code&gt;literal
      
    
    </summary>
    
      <category term="前端" scheme="http://hikerpig.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Coffeescript" scheme="http://hikerpig.github.io/tags/Coffeescript/"/>
    
  </entry>
  
  <entry>
    <title>在Jekyll博客里优雅地嵌入Github Gist</title>
    <link href="http://hikerpig.github.io/2015/01/28/2014-04-08-%E5%9C%A8Jekyll%E5%8D%9A%E5%AE%A2%E9%87%8C%E4%BC%98%E9%9B%85%E5%9C%B0%E5%B5%8C%E5%85%A5Github-Gist/"/>
    <id>http://hikerpig.github.io/2015/01/28/2014-04-08-在Jekyll博客里优雅地嵌入Github-Gist/</id>
    <published>2015-01-28T04:12:03.000Z</published>
    <updated>2015-01-28T04:12:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>Gist 是 Github 一个Snippet托管平台，也是全球秀代码和吵架的好地方。</p><p>例如我的一个虾米签到gist，官方提示的嵌入写法是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;https://gist.github.com/hikerpig/10013696.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>可以在markdown文档里直接插入这一句，jekyll把文章转成静态网页，用户打开后会加载。</p><p>不过这同步的script载入方式存在一点问题：</p><ol type="1"><li><p>如果因为众所周知的某些时不时出现的“网络原因”导致此script载入失败，之后的文章内容都会停止加载的。这不，Github今天又撞墙了，以前在博客里贴的gist都挂掉了。</p></li><li><p>即便gist会加载成功，也有可能因为速度慢而阻碍完整文章的显示速度。</p></li></ol><p>因此，我需要一种优雅地处理gist载入失败的策略。</p><p>如果你不存在第1点问题，那么只要给<code>script</code>标签加上一个异步加载的属性就行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;https://gist.github.com/hikerpig/10013696.js&quot; async&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>否则，就得多做点工作。</p><h2 id="jekyll内建模板支持">Jekyll内建模板支持</h2><p><a href="http://jekyllrb.com/docs/templates/#gist" target="_blank" rel="noopener">Jekyll文档</a>里说明，使用Liquid的gist标签便可插入Github Gist内容。</p><p>在文章里需要使用的时候，用Liquid标签包裹起来:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;% gist 10013696 %&#125; 载入该gist id对应的代码片段</span><br><span class="line">&#123;% gist 10013696 xiami_casper.coffee %&#125; 自定义gist显示的文件名</span><br><span class="line">&#123;% gist hikerpig/10013696 xiami_casper.coffee %&#125;  私有gist</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure><p>看看<a href="https://github.com/jekyll/jekyll/blob/master/lib/jekyll/tags/gist.rb" target="_blank" rel="noopener">Jekyll源码里关于gist标签</a>的实现, 发现它其实，就是帮我们减少了手写script标签的苦活。在html页面中加入script标签。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gist_script_tag</span><span class="params">(gist_id, filename = <span class="literal">nil</span>)</span></span></span><br><span class="line">  <span class="keyword">if</span> filename.empty?</span><br><span class="line">    <span class="string">"&lt;script src=\"https://gist.github.com/<span class="subst">#&#123;gist_id&#125;</span>.js\"&gt; &lt;/script&gt;"</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="string">"&lt;script src=\"https://gist.github.com/<span class="subst">#&#123;gist_id&#125;</span>.js?file=<span class="subst">#&#123;filename&#125;</span>\"&gt; &lt;/script&gt;"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>其实还是没法解决第1个问题.</p><h2 id="jekyll插件">Jekyll插件</h2><p><a href="http://brandontilley.com/2011/01/31/gist-tag-for-jekyll.html" target="_blank" rel="noopener">这篇文章</a>描述的插件扩展了Jekyll的gist标签。首先在_plugins文件夹里添加gist_tag.rb文件:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'cgi'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'digest/md5'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'net/https'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'uri'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Jekyll</span></span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">GistTag</span> &lt; Liquid::Tag</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(tag_name, text, token)</span></span></span><br><span class="line">      <span class="keyword">super</span></span><br><span class="line">      @text           = text</span><br><span class="line">      @cache_disabled = <span class="literal">false</span></span><br><span class="line">      @cache_folder   = File.expand_path <span class="string">"../_gist_cache"</span>, File.dirname(__FILE_<span class="number">_</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">render</span><span class="params">(context)</span></span></span><br><span class="line">      <span class="keyword">if</span> parts = @text.match(<span class="regexp">/([\d]*) (.*)/</span>)</span><br><span class="line">        gist, file = parts[<span class="number">1</span>].strip, parts[<span class="number">2</span>].strip</span><br><span class="line">        script_url = script_url_for gist, file</span><br><span class="line">        code       = get_cached_gist(gist, file) <span class="params">||</span> get_gist_from_web(gist, file)</span><br><span class="line">        html_output_for script_url, code</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        <span class="string">""</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">html_output_for</span><span class="params">(script_url, code)</span></span></span><br><span class="line">      code = CGI.escapeHTML code</span><br><span class="line">      <span class="string">"&lt;script src='<span class="subst">#&#123;script_url&#125;</span>'&gt;&lt;/script&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;<span class="subst">#&#123;code&#125;</span>&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;"</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">script_url_for</span><span class="params">(gist_id, filename)</span></span></span><br><span class="line">      <span class="string">"https://gist.github.com/<span class="subst">#&#123;gist_id&#125;</span>.js?file=<span class="subst">#&#123;filename&#125;</span>"</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_gist_url_for</span><span class="params">(gist, file)</span></span></span><br><span class="line">      <span class="string">"https://gist.github.com/raw/<span class="subst">#&#123;gist&#125;</span>/<span class="subst">#&#123;file&#125;</span>"</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cache</span><span class="params">(gist, file, data)</span></span></span><br><span class="line">      cache_file = get_cache_file_for gist, file</span><br><span class="line">      File.open(cache_file, <span class="string">"w"</span>) <span class="keyword">do</span> <span class="params">|io|</span></span><br><span class="line">        io.write data</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_cached_gist</span><span class="params">(gist, file)</span></span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nil</span> <span class="keyword">if</span> @cache_disabled</span><br><span class="line">      cache_file = get_cache_file_for gist, file</span><br><span class="line">      File.read cache_file <span class="keyword">if</span> File.exist? cache_file</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_cache_file_for</span><span class="params">(gist, file)</span></span></span><br><span class="line">      bad_chars = <span class="regexp">/[^a-zA-Z0-9\-_.]/</span></span><br><span class="line">      gist      = gist.gsub bad_chars, <span class="string">''</span></span><br><span class="line">      file      = file.gsub bad_chars, <span class="string">''</span></span><br><span class="line">      md5       = Digest::MD5.hexdigest <span class="string">"<span class="subst">#&#123;gist&#125;</span>-<span class="subst">#&#123;file&#125;</span>"</span></span><br><span class="line">      File.join @cache_folder, <span class="string">"<span class="subst">#&#123;gist&#125;</span>-<span class="subst">#&#123;file&#125;</span>-<span class="subst">#&#123;md5&#125;</span>.cache"</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_gist_from_web</span><span class="params">(gist, file)</span></span></span><br><span class="line">      gist_url          = get_gist_url_for gist, file</span><br><span class="line">      raw_uri           = URI.parse gist_url</span><br><span class="line">      https             = Net::HTTP.new raw_uri.host, raw_uri.port</span><br><span class="line">      https.use_ssl     = <span class="literal">true</span></span><br><span class="line">      https.verify_mode = OpenSSL::SSL::VERIFY_NONE</span><br><span class="line">      request           = Net::HTTP::Get.new raw_uri.request_uri</span><br><span class="line">      data              = https.request request</span><br><span class="line">      data              = data.body</span><br><span class="line">      cache gist, file, data <span class="keyword">unless</span> @cache_disabled</span><br><span class="line">      data</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">GistTagNoCache</span> &lt; GistTag</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(tag_name, text, token)</span></span></span><br><span class="line">      <span class="keyword">super</span></span><br><span class="line">      @cache_disabled = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">Liquid::Template.register_tag(<span class="string">'gist'</span>, Jekyll::GistTag)</span><br><span class="line">Liquid::Template.register_tag(<span class="string">'gistnocache'</span>, Jekyll::GistTagNoCache)</span><br></pre></td></tr></table></figure><p>在每一次jekyll build的时候都去_gist_cache文件夹检查gist id是否有对应的缓存内容，没有的话会下载并保存，且在页面内添加<code>noscript</code>标签显示gist全内容，这样一来使用不支持javascript的设备也能看得到gist内容。</p><h2 id="js前端实现法">JS前端实现法</h2><p>JS界的合照狂人Ben Nadel大叔的<a href="http://www.bennadel.com/blog/2312-Loading-GitHub-Gists-After-The-Page-Content-Has-Loaded.htm" target="_blank" rel="noopener">Loading GitHub Gists After The Page Content Has Loaded</a>采取了另一种方法:</p><p>静态文档中用一个placeholder填在gist应该出现的位置，使用jQuery.ajax读取gist内容，数据获取完毕以后再使用document.write写到文档里。如此的前端异步载入方式可以减少后台程序生成静态页面的大小。</p><p>其实还是没法解决第1个问题.</p><h2 id="参考文章">参考文章</h2><ul><li><a href="">http://brandontilley.com/2011/01/31/gist-tag-for-jekyll.html</a></li><li><a href="">http://www.bennadel.com/blog/2312-Loading-GitHub-Gists-After-The-Page-Content-Has-Loaded.htm</a></li><li><a href="http://stackoverflow.com/questions/2082723/how-do-you-manage-your-gists-on-github" target="_blank" rel="noopener"></a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Gist 是 Github 一个Snippet托管平台，也是全球秀代码和吵架的好地方。&lt;/p&gt;
&lt;p&gt;例如我的一个虾米签到gist，官方提示的嵌入写法是这样的：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class
      
    
    </summary>
    
      <category term="Meta_Blog" scheme="http://hikerpig.github.io/categories/Meta-Blog/"/>
    
    
      <category term="Jekyll" scheme="http://hikerpig.github.io/tags/Jekyll/"/>
    
      <category term="Github" scheme="http://hikerpig.github.io/tags/Github/"/>
    
  </entry>
  
</feed>
