{"componentChunkName":"component---src-templates-page-js","path":"/2014-04-04-让oh-my-zsh的gitfast插件拯救你/","result":{"data":{"site":{"siteMetadata":{"title":"HP goes FE","author":"@hikerpig"}},"markdownRemark":{"id":"e4a14afd-d773-5b4f-9fd2-afcf1534f297","html":"<p>更新：2020-03-26</p>\n<p>作为一个伪文艺程序员，在ubuntu上使用zsh搭配OMG的插件oh-my-zsh，小日子曾经过的滋滋润润，各种auto-completion让我基本上爱上Tab键了。后来换了台旧MBP，每次跑到项目文件夹下<code>git checkout feat (tab)</code>就傻了，出去泡一杯咖啡回来shell还在哼哧哼哧地忙活着，分分钟有种再手贱&#x3C;tab>就剁掉的冲动。</p>\n<p><a href=\"http://marc-abramowitz.com/archives/2012/04/10/fix-for-oh-my-zsh-git-svn-prompt-slowness/comment-page-1/\">有位仁兄</a>找到了问题的解决方法，原来作恶的是<code>~/.oh-my-zsh/lib/git.zsh</code>中的<code>git_prompt_info()</code> 调用的<code>parse_git_dirty()</code>函数。</p>\n<p>更新：这段代码是 2020-03-26 时的版本</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># Outputs current branch info in prompt format</span>\n<span class=\"token keyword\">function</span> <span class=\"token function-name function\">git_prompt_info</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin class-name\">local</span> ref\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token builtin class-name\">command</span> <span class=\"token function\">git</span> config --get oh-my-zsh.hide-status <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span>/dev/null<span class=\"token variable\">)</span></span>\"</span> <span class=\"token operator\">!=</span> <span class=\"token string\">\"1\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token assign-left variable\">ref</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token builtin class-name\">command</span> <span class=\"token function\">git</span> symbolic-ref HEAD <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span> /dev/null<span class=\"token variable\">)</span></span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token assign-left variable\">ref</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token builtin class-name\">command</span> <span class=\"token function\">git</span> rev-parse --short HEAD <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span> /dev/null<span class=\"token variable\">)</span></span> <span class=\"token operator\">||</span> <span class=\"token builtin class-name\">return</span> <span class=\"token number\">0</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$ZSH_THEME_GIT_PROMPT_PREFIX</span><span class=\"token variable\">${ref<span class=\"token operator\">#</span>refs<span class=\"token operator\">/</span>heads<span class=\"token operator\">/</span>}</span><span class=\"token variable\"><span class=\"token variable\">$(</span>parse_git_dirty<span class=\"token variable\">)</span></span><span class=\"token variable\">$ZSH_THEME_GIT_PROMPT_SUFFIX</span>\"</span>\n  <span class=\"token keyword\">fi</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\"># Checks if working tree is dirty</span>\n<span class=\"token keyword\">function</span> <span class=\"token function-name function\">parse_git_dirty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin class-name\">local</span> STATUS\n  <span class=\"token builtin class-name\">local</span> -a FLAGS\n  <span class=\"token assign-left variable\">FLAGS</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token string\">'--porcelain'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token builtin class-name\">command</span> <span class=\"token function\">git</span> config --get oh-my-zsh.hide-dirty<span class=\"token variable\">)</span></span>\"</span> <span class=\"token operator\">!=</span> <span class=\"token string\">\"1\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$DISABLE_UNTRACKED_FILES_DIRTY</span>\"</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"true\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n      <span class=\"token assign-left variable\">FLAGS</span><span class=\"token operator\">+=</span><span class=\"token string\">'--untracked-files=no'</span>\n    <span class=\"token keyword\">fi</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"<span class=\"token variable\">$GIT_STATUS_IGNORE_SUBMODULES</span>\"</span> <span class=\"token keyword\">in</span>\n      <span class=\"token function\">git</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># let git decide (this respects per-repo config in .gitmodules)</span>\n        <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n      *<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># if unset: ignore dirty submodules</span>\n        <span class=\"token comment\"># other values are passed to --ignore-submodules</span>\n        <span class=\"token assign-left variable\">FLAGS</span><span class=\"token operator\">+=</span><span class=\"token string\">\"--ignore-submodules=<span class=\"token variable\">${GIT_STATUS_IGNORE_SUBMODULES<span class=\"token operator\">:-</span>dirty}</span>\"</span>\n        <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">esac</span>\n    <span class=\"token assign-left variable\">STATUS</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token builtin class-name\">command</span> <span class=\"token function\">git</span> status $<span class=\"token punctuation\">{</span>FLAGS<span class=\"token punctuation\">}</span> <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span> /dev/null <span class=\"token operator\">|</span> <span class=\"token function\">tail</span> -n1<span class=\"token variable\">)</span></span>\n  <span class=\"token keyword\">fi</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> -n <span class=\"token variable\">$STATUS</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$ZSH_THEME_GIT_PROMPT_DIRTY</span>\"</span>\n  <span class=\"token keyword\">else</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$ZSH_THEME_GIT_PROMPT_CLEAN</span>\"</span>\n  <span class=\"token keyword\">fi</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>他贴出的gist是这样的：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token keyword\">function</span> <span class=\"token function-name function\">git_prompt_info</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token assign-left variable\">ref</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">git</span> symbolic-ref HEAD <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span> /dev/null<span class=\"token variable\">)</span></span> <span class=\"token operator\">||</span> <span class=\"token builtin class-name\">return</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$ZSH_THEME_GIT_PROMPT_PREFIX</span><span class=\"token variable\">${ref<span class=\"token operator\">#</span>refs<span class=\"token operator\">/</span>heads<span class=\"token operator\">/</span>}</span><span class=\"token variable\">$ZSH_THEME_GIT_PROMPT_SUFFIX</span>\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>没有了<code>parse_git_dirty</code>，我们就看不到zsh 中git repo名字旁边提示当前分支是否dirty的小勾勾“✔”和小叉叉“✗”，但是人生体验流畅了不只十个数量级啊。比起肆意的人生，OOXX算什么呢！！！（话题没有跑偏没有跑偏(;¬_¬) ）</p>\n<p>当然如果你不想魔改源码， SO 上也有人<a href=\"https://stackoverflow.com/questions/12765344/oh-my-zsh-slow-but-only-for-certain-git-repo\">问过这问题</a>，解决方案存在于上面的源码里。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config --add oh-my-zsh.hide-status <span class=\"token number\">1</span>\n<span class=\"token function\">git</span> config --add oh-my-zsh.hide-dirty <span class=\"token number\">1</span></code></pre></div>\n<p>从此&#x3C;tab>键又能肆意飞翔了。</p>","excerpt":"更新：2020-03-26 作为一个伪文艺程序员，在ubuntu上使用zsh搭配OMG的插件oh-my-zsh，小日子曾经过的滋滋润润，各种auto-completion让我基本上爱上Tab键了。后来换了台旧MBP，每次跑到项目文件夹下git checkout feat (tab…","tableOfContents":"","fields":{"slug":"/2014-04-04-让oh-my-zsh的gitfast插件拯救你/","featureImageSrc":null},"frontmatter":{"title":"让 oh-my-zsh 的git插件飞起来","date":"2014-04-04","author":null,"tags":["zsh","Git"],"use_toc":null,"coverImage":null}}},"pageContext":{"type":"posts","next":{"fields":{"slug":"/2014-03-31-放过Pygments/"},"frontmatter":{"title":"放过Pygments,让Prism来给Jekyll博客加上代码高亮","tags":["jekyll","外貌协会","折腾"]},"fileAbsolutePath":"/Users/bytedance/mydemos/gatsby-hello-friend/content/posts/2014-03-31-放过Pygments.md"},"previous":{"fields":{"slug":"/2014-04-08-在Jekyll博客里优雅地嵌入Github-Gist/"},"frontmatter":{"title":"在Jekyll博客里优雅地嵌入Github Gist","tags":["Jekyll","Github"]},"fileAbsolutePath":"/Users/bytedance/mydemos/gatsby-hello-friend/content/posts/2014-04-08-在Jekyll博客里优雅地嵌入Github-Gist.md"},"slug":"/2014-04-04-让oh-my-zsh的gitfast插件拯救你/"}},"staticQueryHashes":["1425477374","3128451518"]}