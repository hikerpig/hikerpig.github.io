{"componentChunkName":"component---src-templates-page-js","path":"/2014-04-08-在Jekyll博客里优雅地嵌入Github-Gist/","result":{"data":{"site":{"siteMetadata":{"title":"HP goes FE","author":"@hikerpig"}},"markdownRemark":{"id":"b32e3ec7-63b7-5ba4-b336-cb5b97af7d8e","html":"<p>Gist 是 Github 一个Snippet托管平台，也是全球秀代码和吵架的好地方。</p>\n<p>例如我的一个虾米签到gist，官方提示的嵌入写法是这样的：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> &lt;script src=&quot;https://gist.github.com/hikerpig/10013696.js&quot;&gt;&lt;/script&gt;</code></pre></div>\n<p>可以在markdown文档里直接插入这一句，jekyll把文章转成静态网页，用户打开后会加载。</p>\n<p>不过这同步的script载入方式存在一点问题：</p>\n<ol>\n<li>如果因为众所周知的某些时不时出现的“网络原因”导致此script载入失败，之后的文章内容都会停止加载的。这不，Github今天又撞墙了，以前在博客里贴的gist都挂掉了。</li>\n<li>即便gist会加载成功，也有可能因为速度慢而阻碍完整文章的显示速度。</li>\n</ol>\n<p>因此，我需要一种优雅地处理gist载入失败的策略。</p>\n<p>如果你不存在第1点问题，那么只要给<code>script</code>标签加上一个异步加载的属性就行：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;script src=&quot;https://gist.github.com/hikerpig/10013696.js&quot; async&gt;&lt;/script&gt;</code></pre></div>\n<p>否则，就得多做点工作。</p>\n<h2 id=\"jekyll内建模板支持\" style=\"position:relative;\"><a href=\"#jekyll%E5%86%85%E5%BB%BA%E6%A8%A1%E6%9D%BF%E6%94%AF%E6%8C%81\" aria-label=\"jekyll内建模板支持 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Jekyll内建模板支持</h2>\n<p><a href=\"http://jekyllrb.com/docs/templates/#gist\">Jekyll文档</a>里说明，使用Liquid的gist标签便可插入Github Gist内容。</p>\n<p>在文章里需要使用的时候，用Liquid标签包裹起来:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{% raw %}\n{% gist 10013696 %} 载入该gist id对应的代码片段\n{% gist 10013696 xiami_casper.coffee %} 自定义gist显示的文件名\n{% gist hikerpig/10013696 xiami_casper.coffee %}  私有gist\n{% endraw %}</code></pre></div>\n<p>看看<a href=\"https://github.com/jekyll/jekyll/blob/master/lib/jekyll/tags/gist.rb\">Jekyll源码里关于gist标签</a>的实现, 发现它其实，就是帮我们减少了手写script标签的苦活。在html页面中加入script标签。</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">gist_script_tag</span></span><span class=\"token punctuation\">(</span>gist_id<span class=\"token punctuation\">,</span> filename <span class=\"token operator\">=</span> <span class=\"token keyword\">nil</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> filename<span class=\"token punctuation\">.</span>empty<span class=\"token operator\">?</span>\n        <span class=\"token string\">\"&lt;script src=\\\"https://gist.github.com/<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>gist_id<span class=\"token delimiter tag\">}</span></span>.js\\\"> &lt;/script>\"</span>\n      <span class=\"token keyword\">else</span>\n        <span class=\"token string\">\"&lt;script src=\\\"https://gist.github.com/<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>gist_id<span class=\"token delimiter tag\">}</span></span>.js?file=<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>filename<span class=\"token delimiter tag\">}</span></span>\\\"> &lt;/script>\"</span>\n      <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">end</span></code></pre></div>\n<p>其实还是没法解决第1个问题.</p>\n<h2 id=\"jekyll插件\" style=\"position:relative;\"><a href=\"#jekyll%E6%8F%92%E4%BB%B6\" aria-label=\"jekyll插件 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Jekyll插件</h2>\n<p><a href=\"http://brandontilley.com/2011/01/31/gist-tag-for-jekyll.html\">这篇文章</a>描述的插件扩展了Jekyll的gist标签。首先在<em>plugins文件夹里添加gist</em>tag.rb文件:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">require</span> <span class=\"token string\">'cgi'</span>\n<span class=\"token keyword\">require</span> <span class=\"token string\">'digest/md5'</span>\n<span class=\"token keyword\">require</span> <span class=\"token string\">'net/https'</span>\n<span class=\"token keyword\">require</span> <span class=\"token string\">'uri'</span>\n\n<span class=\"token keyword\">module</span> <span class=\"token constant\">Jekyll</span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">GistTag</span> <span class=\"token operator\">&lt;</span> <span class=\"token constant\">Liquid</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Tag</span>\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">initialize</span></span><span class=\"token punctuation\">(</span>tag_name<span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">super</span>\n      <span class=\"token variable\">@text</span>           <span class=\"token operator\">=</span> text\n      <span class=\"token variable\">@cache_disabled</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n      <span class=\"token variable\">@cache_folder</span>   <span class=\"token operator\">=</span> <span class=\"token builtin\">File</span><span class=\"token punctuation\">.</span>expand_path <span class=\"token string\">\"../_gist_cache\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">File</span><span class=\"token punctuation\">.</span>dirname<span class=\"token punctuation\">(</span>__FILE__<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">render</span></span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> parts <span class=\"token operator\">=</span> <span class=\"token variable\">@text</span><span class=\"token punctuation\">.</span>match<span class=\"token punctuation\">(</span><span class=\"token regex\">/([\\d]*) (.*)/</span><span class=\"token punctuation\">)</span>\n        gist<span class=\"token punctuation\">,</span> file <span class=\"token operator\">=</span> parts<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">,</span> parts<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>strip\n        script_url <span class=\"token operator\">=</span> script_url_for gist<span class=\"token punctuation\">,</span> file\n        code       <span class=\"token operator\">=</span> get_cached_gist<span class=\"token punctuation\">(</span>gist<span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> get_gist_from_web<span class=\"token punctuation\">(</span>gist<span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">)</span>\n        html_output_for script_url<span class=\"token punctuation\">,</span> code\n      <span class=\"token keyword\">else</span>\n        <span class=\"token string\">\"\"</span>\n      <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">end</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">html_output_for</span></span><span class=\"token punctuation\">(</span>script_url<span class=\"token punctuation\">,</span> code<span class=\"token punctuation\">)</span>\n      code <span class=\"token operator\">=</span> <span class=\"token constant\">CGI</span><span class=\"token punctuation\">.</span>escapeHTML code\n      <span class=\"token string\">\"&lt;script src='<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>script_url<span class=\"token delimiter tag\">}</span></span>'>&lt;/script>&lt;noscript>&lt;pre>&lt;code><span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>code<span class=\"token delimiter tag\">}</span></span>&lt;/code>&lt;/pre>&lt;/noscript>\"</span>\n    <span class=\"token keyword\">end</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">script_url_for</span></span><span class=\"token punctuation\">(</span>gist_id<span class=\"token punctuation\">,</span> filename<span class=\"token punctuation\">)</span>\n      <span class=\"token string\">\"https://gist.github.com/<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>gist_id<span class=\"token delimiter tag\">}</span></span>.js?file=<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>filename<span class=\"token delimiter tag\">}</span></span>\"</span>\n    <span class=\"token keyword\">end</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">get_gist_url_for</span></span><span class=\"token punctuation\">(</span>gist<span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">)</span>\n      <span class=\"token string\">\"https://gist.github.com/raw/<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>gist<span class=\"token delimiter tag\">}</span></span>/<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>file<span class=\"token delimiter tag\">}</span></span>\"</span>\n    <span class=\"token keyword\">end</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">cache</span></span><span class=\"token punctuation\">(</span>gist<span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n      cache_file <span class=\"token operator\">=</span> get_cache_file_for gist<span class=\"token punctuation\">,</span> file\n      <span class=\"token builtin\">File</span><span class=\"token punctuation\">.</span>open<span class=\"token punctuation\">(</span>cache_file<span class=\"token punctuation\">,</span> <span class=\"token string\">\"w\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>io<span class=\"token operator\">|</span>\n        io<span class=\"token punctuation\">.</span>write data\n      <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">end</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">get_cached_gist</span></span><span class=\"token punctuation\">(</span>gist<span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">nil</span> <span class=\"token keyword\">if</span> <span class=\"token variable\">@cache_disabled</span>\n      cache_file <span class=\"token operator\">=</span> get_cache_file_for gist<span class=\"token punctuation\">,</span> file\n      <span class=\"token builtin\">File</span><span class=\"token punctuation\">.</span>read cache_file <span class=\"token keyword\">if</span> <span class=\"token builtin\">File</span><span class=\"token punctuation\">.</span>exist<span class=\"token operator\">?</span> cache_file\n    <span class=\"token keyword\">end</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">get_cache_file_for</span></span><span class=\"token punctuation\">(</span>gist<span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">)</span>\n      bad_chars <span class=\"token operator\">=</span> <span class=\"token regex\">/[^a-zA-Z0-9\\-_.]/</span>\n      gist      <span class=\"token operator\">=</span> gist<span class=\"token punctuation\">.</span>gsub bad_chars<span class=\"token punctuation\">,</span> <span class=\"token string\">''</span>\n      file      <span class=\"token operator\">=</span> file<span class=\"token punctuation\">.</span>gsub bad_chars<span class=\"token punctuation\">,</span> <span class=\"token string\">''</span>\n      md5       <span class=\"token operator\">=</span> <span class=\"token constant\">Digest</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">MD5</span><span class=\"token punctuation\">.</span>hexdigest <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>gist<span class=\"token delimiter tag\">}</span></span>-<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>file<span class=\"token delimiter tag\">}</span></span>\"</span>\n      <span class=\"token builtin\">File</span><span class=\"token punctuation\">.</span>join <span class=\"token variable\">@cache_folder</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>gist<span class=\"token delimiter tag\">}</span></span>-<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>file<span class=\"token delimiter tag\">}</span></span>-<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>md5<span class=\"token delimiter tag\">}</span></span>.cache\"</span>\n    <span class=\"token keyword\">end</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">get_gist_from_web</span></span><span class=\"token punctuation\">(</span>gist<span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">)</span>\n      gist_url          <span class=\"token operator\">=</span> get_gist_url_for gist<span class=\"token punctuation\">,</span> file\n      raw_uri           <span class=\"token operator\">=</span> <span class=\"token constant\">URI</span><span class=\"token punctuation\">.</span>parse gist_url\n      https             <span class=\"token operator\">=</span> <span class=\"token constant\">Net</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">HTTP</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span> raw_uri<span class=\"token punctuation\">.</span>host<span class=\"token punctuation\">,</span> raw_uri<span class=\"token punctuation\">.</span>port\n      https<span class=\"token punctuation\">.</span>use_ssl     <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n      https<span class=\"token punctuation\">.</span>verify_mode <span class=\"token operator\">=</span> <span class=\"token constant\">OpenSSL</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">SSL</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">VERIFY_NONE</span>\n      request           <span class=\"token operator\">=</span> <span class=\"token constant\">Net</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">HTTP</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Get</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span> raw_uri<span class=\"token punctuation\">.</span>request_uri\n      data              <span class=\"token operator\">=</span> https<span class=\"token punctuation\">.</span>request request\n      data              <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>body\n      cache gist<span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">,</span> data <span class=\"token keyword\">unless</span> <span class=\"token variable\">@cache_disabled</span>\n      data\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">GistTagNoCache</span> <span class=\"token operator\">&lt;</span> <span class=\"token constant\">GistTag</span>\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">initialize</span></span><span class=\"token punctuation\">(</span>tag_name<span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">super</span>\n      <span class=\"token variable\">@cache_disabled</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token constant\">Liquid</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Template</span><span class=\"token punctuation\">.</span>register_tag<span class=\"token punctuation\">(</span><span class=\"token string\">'gist'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">Jekyll</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">GistTag</span><span class=\"token punctuation\">)</span>\n<span class=\"token constant\">Liquid</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Template</span><span class=\"token punctuation\">.</span>register_tag<span class=\"token punctuation\">(</span><span class=\"token string\">'gistnocache'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">Jekyll</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">GistTagNoCache</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>在每一次jekyll build的时候都去<em>gist</em>cache文件夹检查gist id是否有对应的缓存内容，没有的话会下载并保存，且在页面内添加<code>noscript</code>标签显示gist全内容，这样一来使用不支持javascript的设备也能看得到gist内容。</p>\n<h2 id=\"js前端实现法\" style=\"position:relative;\"><a href=\"#js%E5%89%8D%E7%AB%AF%E5%AE%9E%E7%8E%B0%E6%B3%95\" aria-label=\"js前端实现法 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JS前端实现法</h2>\n<p>JS界的合照狂人Ben Nadel大叔的<a href=\"http://www.bennadel.com/blog/2312-Loading-GitHub-Gists-After-The-Page-Content-Has-Loaded.htm\">Loading GitHub Gists After The Page Content Has Loaded</a>采取了另一种方法:</p>\n<p>静态文档中用一个placeholder填在gist应该出现的位置，使用jQuery.ajax读取gist内容，数据获取完毕以后再使用document.write写到文档里。如此的前端异步载入方式可以减少后台程序生成静态页面的大小。</p>\n<p>其实还是没法解决第1个问题.</p>\n<h2 id=\"参考文章\" style=\"position:relative;\"><a href=\"#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0\" aria-label=\"参考文章 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>参考文章</h2>\n<ul>\n<li><a href=\"\">http://brandontilley.com/2011/01/31/gist-tag-for-jekyll.html</a></li>\n<li><a href=\"\">http://www.bennadel.com/blog/2312-Loading-GitHub-Gists-After-The-Page-Content-Has-Loaded.htm</a></li>\n<li><a href=\"http://stackoverflow.com/questions/2082723/how-do-you-manage-your-gists-on-github\"></a></li>\n</ul>","excerpt":"Gist 是 Github 一个Snippet托管平台，也是全球秀代码和吵架的好地方。 例如我的一个虾米签到gist，官方提示的嵌入写法是这样的： 可以在markdown文档里直接插入这一句，jekyll把文章转成静态网页，用户打开后会加载。 不过这同步的script…","tableOfContents":"<ul>\n<li><a href=\"/2014-04-08-%E5%9C%A8Jekyll%E5%8D%9A%E5%AE%A2%E9%87%8C%E4%BC%98%E9%9B%85%E5%9C%B0%E5%B5%8C%E5%85%A5Github-Gist/#jekyll%E5%86%85%E5%BB%BA%E6%A8%A1%E6%9D%BF%E6%94%AF%E6%8C%81\">Jekyll内建模板支持</a></li>\n<li><a href=\"/2014-04-08-%E5%9C%A8Jekyll%E5%8D%9A%E5%AE%A2%E9%87%8C%E4%BC%98%E9%9B%85%E5%9C%B0%E5%B5%8C%E5%85%A5Github-Gist/#jekyll%E6%8F%92%E4%BB%B6\">Jekyll插件</a></li>\n<li><a href=\"/2014-04-08-%E5%9C%A8Jekyll%E5%8D%9A%E5%AE%A2%E9%87%8C%E4%BC%98%E9%9B%85%E5%9C%B0%E5%B5%8C%E5%85%A5Github-Gist/#js%E5%89%8D%E7%AB%AF%E5%AE%9E%E7%8E%B0%E6%B3%95\">JS前端实现法</a></li>\n<li><a href=\"/2014-04-08-%E5%9C%A8Jekyll%E5%8D%9A%E5%AE%A2%E9%87%8C%E4%BC%98%E9%9B%85%E5%9C%B0%E5%B5%8C%E5%85%A5Github-Gist/#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0\">参考文章</a></li>\n</ul>","fields":{"slug":"/2014-04-08-在Jekyll博客里优雅地嵌入Github-Gist/","featureImageSrc":null},"frontmatter":{"title":"在Jekyll博客里优雅地嵌入Github Gist","date":"2014-04-08","author":null,"tags":["Jekyll","Github"],"use_toc":null,"coverImage":null}}},"pageContext":{"type":"posts","next":{"fields":{"slug":"/2014-04-04-让oh-my-zsh的gitfast插件拯救你/"},"frontmatter":{"title":"让 oh-my-zsh 的git插件飞起来","tags":["zsh","Git"]},"fileAbsolutePath":"/Users/bytedance/mydemos/gatsby-hello-friend/content/posts/2014-04-04-让oh-my-zsh的gitfast插件拯救你.md"},"previous":{"fields":{"slug":"/2014-04-10-用ssh-reverse-tunnel调用远程服务器的剪切板使用/"},"frontmatter":{"title":"用 ssh reverse tunnel 调用远程服务器的剪切板使用","tags":["Vim"]},"fileAbsolutePath":"/Users/bytedance/mydemos/gatsby-hello-friend/content/posts/2014-04-10-用ssh-reverse-tunnel调用远程服务器的剪切板使用.md"},"slug":"/2014-04-08-在Jekyll博客里优雅地嵌入Github-Gist/"}},"staticQueryHashes":["1425477374","3128451518"]}