{"componentChunkName":"component---src-templates-page-js","path":"/2016-06-02-turbocharged-javascript-refactoring-with-codemods/","result":{"data":{"site":{"siteMetadata":{"title":"HP goes FE","author":"@hikerpig"}},"markdownRemark":{"id":"d13bb25e-ad09-5e4d-9670-130c9fa896ec","html":"<ul>\n<li>原文链接 : <a href=\"https://medium.com/airbnb-engineering/turbocharged-javascript-refactoring-with-codemods-b0cae8b326b9#.tjerodd52\">Turbocharged JavaScript refactoring with codemods</a></li>\n<li>原文作者 : <a href=\"https://medium.com/u/e52389684329\">Joe Lencioni</a></li>\n</ul>\n<h3 id=\"使用重构件（codemod）加速-javascript-开发\" style=\"position:relative;\"><a href=\"#%E4%BD%BF%E7%94%A8%E9%87%8D%E6%9E%84%E4%BB%B6%EF%BC%88codemod%EF%BC%89%E5%8A%A0%E9%80%9F-javascript-%E5%BC%80%E5%8F%91\" aria-label=\"使用重构件（codemod）加速 javascript 开发 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>使用重构件（Codemod）加速 JavaScript 开发</h3>\n<p>在花园里耕耘乐趣无穷，但如果除草不勤，最后收获可能是一团揪心。漏掉一次除草本身可能并无大碍，但积少成多最后会毁掉整座花园。没有杂草的花园让维护工作神清气爽。这个道理对代码库也类似。</p>\n<p>我通常讨厌除草，经常忘记这事的结果就是一团糟。谢天谢地在编程界有像 <a href=\"http://eslint.org/\">ESLint</a> 和 <a href=\"https://github.com/brigade/scss-lint\">SCSS-Lint</a> 这样的好东西提醒我们勤理代码。但是如果面对的是大段大段的历史代码，光是想想要手动调整成百十千万的空格和逗号，悲伤便逆流成河。</p>\n<p>8年来有几百万行 JavaScript 代码进入 Airbnb 的版本控制系统中。同时，前端界风起云涌。新功能，新框架，甚至 JavaScript 本身都在快速进化。尽管遵循<a href=\"https://github.com/airbnb/javascript\">良好的代码风格</a>会让变革少些疼痛，但还是很容易累积出不再遵循最新\"最佳实践\"的巨大代码库。每一处代码风格的不一致都是一棵杂草，唯一归宿就是被铲掉，化作春泥更护花，好让开发团队保持高效。来看看我们花园现在的样子：</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/005SiNxygw1f3j83hmmrij30jk0dvjsn.jpg\"></p>\n<p>我执着于增加团队效率，也深知保持一致性的代码能增速团队反馈和减少无效沟通。我们最近开始了一个整理代码的项目，准备把许多陈旧的 JavaScript 代码转化得符合我们的代码风格，亦使我们的代码检验器有更多用武之地。若全都手动完成，会是件十分无聊和耗时的苦差，所以我们借助工具帮我们自动化此工作。虽说使用 <em><code>eslint -fix</code></em> 是个不错的开始，但<a href=\"https://github.com/eslint/eslint/issues/5329\">它现在所能有限</a>。尽管他们<a href=\"https://twitter.com/geteslint/status/723909416957829122\">最近开始接受修复所有规则的PR</a>，也准备<a href=\"https://github.com/cst/cst\">构建 JavaScript 的具体语法树</a>，但等这些功能完成还需要些时间。感谢上苍我们发现了 Facebook 的 <a href=\"https://github.com/facebook/jscodeshift\">jscodeshift</a>，这是一个重构工具（协助大型代码库的自动化重构）。如果代码库是个花园，那么 jscodeshift 就像个除草机器人。</p>\n<p>此工具将 JavaScript 解析为一棵 <a href=\"https://en.wikipedia.org/wiki/Abstract_syntax_tree\">抽象语法树</a>，并在其上进行变换，然后输出符合指定代码风格的新 JavaScript 代码。转换过程是用 JavaScript 本身实现的，所以我们团队很乐意使用此工具。寻找或是创建转换代码能加速我们乏味的重构，让我们团队能够专注于更有意义的工作。</p>\n<p>运行几个代码重构件后，我们的花园整洁了点：</p>\n<p><img src=\"http://ww4.sinaimg.cn/large/a490147fjw1f3j9ybpgazj20je0flwfm.jpg\"></p>\n<h3 id=\"策略\" style=\"position:relative;\"><a href=\"#%E7%AD%96%E7%95%A5\" aria-label=\"策略 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>策略</h3>\n<p>鉴于多数重构件能在一分钟内处理上千文件，我发现它是我打发主要工作的等待间隙（例如等代码审查）的不错选择。它帮我最大化提升了工作效率从而让我能在更大和更重要的项目中有所建树。</p>\n<p>大规模重构主要面临四大挑战。沟通、正确性、代码审查以及冲突合并。我采取以下策略来应对这些挑战。</p>\n<p>重构件不总是能产出我需要的结果，因此对其结果的审查和改动十分重要。以下命令在跑完重构件后很有用：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">git diff\ngit add --patch\ngit checkout --patch</code></pre></div>\n<p>保持每个提交和 PR 在小的体量是好的做法，对于重构件也不例外。我通常一段时间内进行一类重构，减少代码审查和冲突合并的麻烦。我亦经常让重构件自动提交重构结果，而后若有必要，再手动清理。这样在衍合分支时解决冲突会轻松点，因为我可以使用</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">git checkout --ours path/to/conflict</code></pre></div>\n<p>然后在那个文件上再运行一次重构件，之后也不会弄乱我自己的手动提交。</p>\n<p>有时重构件生成了很大的变动，我觉得在此情况下根据目录或文件名来分成数次提交或 PR 会比较好。例如，一个提交重构 .js 文件，另一个提交重构.jsx 文件。这样之后代码审查和冲突合并会相对轻松一点。谨遵 <a href=\"https://en.wikipedia.org/wiki/Unix_philosophy\">Unix 哲学</a>，分批进行文件重构简单到仅需调整 <em><code>find</code></em> 命令的参数：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">find app/assets/javascripts -name *.jsx -not -path */vendor/* | \\\n  xargs jscodeshift -t ~/path/to/transform.js</code></pre></div>\n<p>为避免和别人的代码冲突，我通常在周五早上才推送我的重构件生成的提交，然后周一赶在大家开始工作之前进行衍合和合并。这样其他人周末放假前不被你的重构件阻碍，能好好整理自己的工作成果。</p>\n<h3 id=\"我们用得顺手的重构件\" style=\"position:relative;\"><a href=\"#%E6%88%91%E4%BB%AC%E7%94%A8%E5%BE%97%E9%A1%BA%E6%89%8B%E7%9A%84%E9%87%8D%E6%9E%84%E4%BB%B6\" aria-label=\"我们用得顺手的重构件 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>我们用得顺手的重构件</h3>\n<p>虽然此工具还比较新，已然有了一些实用的重构件。以下是一些我们成功上手了的。</p>\n<h4 id=\"轻量级重构件\" style=\"position:relative;\"><a href=\"#%E8%BD%BB%E9%87%8F%E7%BA%A7%E9%87%8D%E6%9E%84%E4%BB%B6\" aria-label=\"轻量级重构件 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>轻量级重构件</h4>\n<p>以下是些用着不那么痛苦的，立刻上手感受成效。</p>\n<p><a href=\"https://github.com/cpojer/js-codemod#arrow-function\"><strong>js-codemod/arrow-function</strong></a><strong>:</strong> 谨慎地把函数转为箭头函数</p>\n<p>使用前:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[1, 2, 3].map(function(x) {\n  return x * x;\n}.bind(this));</code></pre></div>\n<p>使用后:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[1, 2, 3].map(x =&gt; x * x);</code></pre></div>\n<p><a href=\"https://github.com/cpojer/js-codemod#no-vars\"><strong>js-codemod/no-vars</strong></a><strong>:</strong> 将 <em>`var'</em> 安全转化为 <em><code>const</code></em> 或 <em><code>let</code></em>。</p>\n<p>使用前:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var belong = &#39;anywhere&#39;;</code></pre></div>\n<p>使用后:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const belong = &#39;anywhere&#39;;</code></pre></div>\n<p><a href=\"https://github.com/cpojer/js-codemod#object-shorthand\"><strong>js-codemod/object-shorthand</strong></a><strong>:</strong> 把对象字面量转为 ES6 的简写表示。</p>\n<p>使用前:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const things = {\n  belong: belong,\n  anywhere: function() {},\n};</code></pre></div>\n<p>使用后:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const things = {\n  belong,\n  anywhere() {},\n};</code></pre></div>\n<p><a href=\"https://github.com/cpojer/js-codemod#unchain-variables\"><strong>js-codemod/unchain-variables</strong></a><strong>:</strong> 分离连续声明的变量。</p>\n<p>使用前:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const belong = &#39;anywhere&#39;, welcome = &#39;home&#39;;</code></pre></div>\n<p>使用后:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const belong = &#39;anywhere&#39;;\nconst welcome = &#39;home&#39;;</code></pre></div>\n<p><a href=\"https://github.com/cpojer/js-codemod#unquote-properties\"><strong>js-codemod/unquote-properties</strong></a><strong>:</strong> 移除对象属性的引号。</p>\n<p>使用前:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const things = {\n  &#39;belong&#39;: &#39;anywhere&#39;,\n};</code></pre></div>\n<p>使用后:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const things = {\n  belong: &#39;anywhere&#39;,\n};</code></pre></div>\n<h4 id=\"重量级重构件\" style=\"position:relative;\"><a href=\"#%E9%87%8D%E9%87%8F%E7%BA%A7%E9%87%8D%E6%9E%84%E4%BB%B6\" aria-label=\"重量级重构件 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>重量级重构件</h4>\n<p>以下重构件或是改动很多代码引发合并和冲突之痛，或是需要更多后续的手动更改以保证代码还能看得下去。</p>\n<p><a href=\"https://github.com/reactjs/react-codemod#class\"><strong>react-codemod/class</strong></a><strong>:</strong> 把 <em><code>React.createClass</code></em> 转为 ES6 class 的实现。</p>\n<p>此重构件在有 mixin 的时候不会变换，在类似于 <em><code>propTypes</code></em>、默认 props 和 initial state 定义这样的必要转换做得很好，还能将事件回调函数绑定到构造器上。</p>\n<p>使用前:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const BelongAnywhere = React.createClass({\n  // ...\n});</code></pre></div>\n<p>使用后:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class BelongAnywhere extends React.Component {\n  // ...\n}</code></pre></div>\n<p><a href=\"https://github.com/reactjs/react-codemod#sort-comp\"><strong>react-codemod/sort-comp</strong></a><strong>:</strong> 根据 <a href=\"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/sort-comp.md\">ESLint react/sort-comp rule</a> 重新组织 React component 的方法声明顺序。</p>\n<p>这个会调整大量代码，git 不会自动合并冲突。我觉得在使用此重构件前最好最好跟队友打个招呼，在不太容易发生冲突的时候（例如周末）进行重构。当我衍合此重构的提交且遇上冲突的时候，我会：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">git checkout --ours path/to/conflict</code></pre></div>\n<p>然后再运行一次重构件。</p>\n<p>使用前:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class BelongAnywhere extends React.Component {\n  render() {\n    return &lt;div&gt;Belong Anywhere&lt;/div&gt;;\n  }\n\n  componentWillMount() {\n      console.log(&#39;Welcome home&#39;);\n    }\n  }</code></pre></div>\n<p>使用后:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class BelongAnywhere extends React.Component {\n  componentWillMount() {\n    console.log(&#39;Welcome home&#39;);\n  }\n\n render() {\n    return &lt;div&gt;Belong Anywhere&lt;/div&gt;;\n  }\n}</code></pre></div>\n<p><a href=\"https://github.com/cpojer/js-codemod#template-literals\"><strong>js-codemod/template-literals</strong></a><strong>:</strong> 把字符串的串联转换为字符串模板字面量表示。</p>\n<p>因为我们多处用到字符串串联，而且这个重构件尽其所能把所有字符串都转成模板，我发现很多转换结果其实并不合理。我之所以这个重构件放到\"重量级\"列表里，是因为它会改动很多文件，而且之后我们还得进行大量的手动修改才能得到满意的结果。</p>\n<p>使用前:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const belong = &#39;anywhere &#39;+ welcomeHome;</code></pre></div>\n<p>使用后:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const belong = `anywhere ${welcomeHome}`;</code></pre></div>\n<h3 id=\"资源\" style=\"position:relative;\"><a href=\"#%E8%B5%84%E6%BA%90\" aria-label=\"资源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>资源</h3>\n<p>若你想写自己的重构件，或是看看它能做什么，可以看下下面的资源。</p>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=d0pOgY8__JM\">逐步改进复杂系统</a>：来自 Christoph Pojer 于 JSConf EU 2015 上关于 Facebook 的重构件的演讲。（亦可见<a href=\"https://medium.com/@cpojer/effective-javascript-codemods-5a6686bb46fb\">高效的 JavaScript 重构件</a>）。</li>\n<li><a href=\"https://vramana.github.io/blog/2015/12/21/codemod-tutorial/\">如何写重构件</a>: 带你写一个把字符串串联转化为字符串模板字面量的重构件的教程。</li>\n<li><a href=\"https://astexplorer.net/\">AST 探索</a>: 可查看由多种语法分析程序产生的 AST 的工具。好东西，可以查看你想转换的代码的 AST。</li>\n<li><a href=\"https://medium.com/nfl-engineers/nfl-codemods-migrating-a-monolith-1e3363571707\">NFL ♥ C重构件: 海量代码迁移</a>: 关于 NFL 如何使用重构件的一个使用案例。</li>\n<li><a href=\"https://github.com/reactjs/react-codemod\">react-codemod</a>: 一系列关于 React 的重构件。</li>\n<li><a href=\"https://github.com/cpojer/js-codemod\">js-codemod</a>: 一系列常用的 JavaScript 重构件。</li>\n</ul>\n<h3 id=\"影响\" style=\"position:relative;\"><a href=\"#%E5%BD%B1%E5%93%8D\" aria-label=\"影响 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>影响</h3>\n<p>在使用了一些现成的和我们自己写的并贡献给社区的重构件之后，我们的旧代码质量获得很大的提升。我不费吹灰之力便重构了40000行代码，将旧代码调整至符合 ES6 代码风格。花园焕然一新，我们之后的工作也更有效率和乐趣。</p>\n<p>使用已有的重构件仅是牛刀小试，只有在你拿起键盘写出自己的重构件时，真正的能量才会释放。无论是对代码风格重构，或是对失效 API 的调整，重构件都能大显身手，你可以尽情想象发挥。这些技术值得学习投入，能省下你和使用你的项目使用者很多时间精力。</p>","excerpt":"原文链接 : Turbocharged JavaScript refactoring with codemods 原文作者 : Joe Lencioni 使用重构件（Codemod）加速 JavaScript…","tableOfContents":"<ul>\n<li><a href=\"/2016-06-02-turbocharged-javascript-refactoring-with-codemods/#%E4%BD%BF%E7%94%A8%E9%87%8D%E6%9E%84%E4%BB%B6%EF%BC%88codemod%EF%BC%89%E5%8A%A0%E9%80%9F-javascript-%E5%BC%80%E5%8F%91\">使用重构件（Codemod）加速 JavaScript 开发</a></li>\n<li><a href=\"/2016-06-02-turbocharged-javascript-refactoring-with-codemods/#%E7%AD%96%E7%95%A5\">策略</a></li>\n<li>\n<p><a href=\"/2016-06-02-turbocharged-javascript-refactoring-with-codemods/#%E6%88%91%E4%BB%AC%E7%94%A8%E5%BE%97%E9%A1%BA%E6%89%8B%E7%9A%84%E9%87%8D%E6%9E%84%E4%BB%B6\">我们用得顺手的重构件</a></p>\n<ul>\n<li><a href=\"/2016-06-02-turbocharged-javascript-refactoring-with-codemods/#%E8%BD%BB%E9%87%8F%E7%BA%A7%E9%87%8D%E6%9E%84%E4%BB%B6\">轻量级重构件</a></li>\n<li><a href=\"/2016-06-02-turbocharged-javascript-refactoring-with-codemods/#%E9%87%8D%E9%87%8F%E7%BA%A7%E9%87%8D%E6%9E%84%E4%BB%B6\">重量级重构件</a></li>\n</ul>\n</li>\n<li><a href=\"/2016-06-02-turbocharged-javascript-refactoring-with-codemods/#%E8%B5%84%E6%BA%90\">资源</a></li>\n<li><a href=\"/2016-06-02-turbocharged-javascript-refactoring-with-codemods/#%E5%BD%B1%E5%93%8D\">影响</a></li>\n</ul>","fields":{"slug":"/2016-06-02-turbocharged-javascript-refactoring-with-codemods/","featureImageSrc":"//images-hikerpig.oss-cn-beijing.aliyuncs.com/image/truck.jpg"},"frontmatter":{"title":"[译] 使用重构件（Codemod）加速 JavaScript 开发","date":"2016-06-30","author":null,"tags":["Javascript","前端","Engineering"],"use_toc":true,"coverImage":null}}},"pageContext":{"type":"posts","next":{"fields":{"slug":"/2016-04-28-译-Javascript-姿势提升简略/"},"frontmatter":{"title":"[译] Javascript 姿势提升简略","tags":["Javascript"]},"fileAbsolutePath":"/Users/bytedance/mydemos/gatsby-hello-friend/content/posts/2016-04-28-译-Javascript-姿势提升简略.md"},"previous":{"fields":{"slug":"/2016-12-21-Enhanced-Client-Side-Console/"},"frontmatter":{"title":"前端 Log 小记","tags":["前端","Engineering"]},"fileAbsolutePath":"/Users/bytedance/mydemos/gatsby-hello-friend/content/posts/2016-12-21-Enhanced-Client-Side-Console.md"},"slug":"/2016-06-02-turbocharged-javascript-refactoring-with-codemods/"}},"staticQueryHashes":["1425477374","3128451518"]}