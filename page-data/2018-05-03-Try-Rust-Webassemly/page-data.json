{"componentChunkName":"component---src-templates-page-js","path":"/2018-05-03-Try-Rust-Webassemly/","result":{"data":{"site":{"siteMetadata":{"title":"HP goes FE","author":"@hikerpig"}},"markdownRemark":{"id":"6b5e4b0d-6ad0-5a17-9108-a3484f141fd6","html":"<p>在公司项目里的一个小角落，尝试使用 Rust + WebAssembly 加速应用里部分计算</p>\n<h2 id=\"选择\" style=\"position:relative;\"><a href=\"#%E9%80%89%E6%8B%A9\" aria-label=\"选择 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>选择</h2>\n<p>首先要分清项目里 WebAssembly 的定位</p>\n<ol>\n<li>应用主体：完成绝大多数逻辑，JS 只作为加载入口和少部分事件绑定桥梁</li>\n<li>工具库：分担一些复杂和耗时的计算，由 JS 决定什么时候调用 wasm 模块函数，通常情况下，由 JS 管理 wasm 的线性内存</li>\n</ol>\n<p>此次小 Demo 属于第 2 种情况</p>\n<h3 id=\"选择-rust-target\" style=\"position:relative;\"><a href=\"#%E9%80%89%E6%8B%A9-rust-target\" aria-label=\"选择 rust target permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>选择 Rust Target</h3>\n<p>rust 支持 <code>wasm32-unknown-unknown</code> 和 <code>wasm32-unknown-emscripten</code> 两种编译目标，后者除了wasm 外，还生成了  emscripten 风格的 JS 作为入口，与 asm.js 的调用风格统一。不过会添加好些运行时代码，与 wasm 之间也隔着一层封装。基于上一项的选择，我们选择前者</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">rustup target <span class=\"token function\">add</span> wasm32-unknown-unknown</code></pre></div>\n<h1 id=\"webassembly-考量\" style=\"position:relative;\"><a href=\"#webassembly-%E8%80%83%E9%87%8F\" aria-label=\"webassembly 考量 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>WebAssembly 考量</h1>\n<h2 id=\"数据类型问题\" style=\"position:relative;\"><a href=\"#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E9%97%AE%E9%A2%98\" aria-label=\"数据类型问题 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>数据类型问题</h2>\n<p>WebAssembly 当前只支持几种<a href=\"https://developer.mozilla.org/en-US/docs/WebAssembly/Understanding_the_text_format#Signatures_and_parameters\">有限的数字类型</a>，i32/i64/f32/f64，JS 与之交互时，除了 number 以外的值都要有序列化/反序列化处理。</p>\n<h3 id=\"字符串\" style=\"position:relative;\"><a href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2\" aria-label=\"字符串 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>字符串</h3>\n<p>可使用 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/TextEncoder\">TextEncoder/TextDecoder</a> 将 JS 字符串序列化为 utf-8 字节流，在 Rust 端先将字节流解析为字符串，再使用。</p>\n<h3 id=\"数组\" style=\"position:relative;\"><a href=\"#%E6%95%B0%E7%BB%84\" aria-label=\"数组 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>数组</h3>\n<p>JS 直接操作 wasm 示例的内存，将数组数据写入，调用 wasm 方法时，将数组起始的指针以及数组长度作为参数。</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token comment\">// rust 部分</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">unsafe</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">load_image_data</span><span class=\"token punctuation\">(</span>in_image_ptr<span class=\"token punctuation\">:</span> <span class=\"token operator\">*</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">u8</span><span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">:</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">:</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span>\\<span class=\"token operator\">></span> <span class=\"token operator\">*</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">u8</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> arr_len <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>width <span class=\"token operator\">*</span> height <span class=\"token operator\">*</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">usize</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> in_image_data <span class=\"token operator\">=</span> <span class=\"token class-name\">Vec</span><span class=\"token punctuation\">::</span><span class=\"token function\">from_raw_parts</span><span class=\"token punctuation\">(</span>in_image_ptr<span class=\"token punctuation\">,</span> arr_len<span class=\"token punctuation\">,</span> arr_len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> in_image_data<span class=\"token punctuation\">.</span><span class=\"token function\">as_ptr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// js 部分</span>\n<span class=\"token keyword\">const</span> ctx <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2d'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> imageData <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">getImageData</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> imgDataVecPtr <span class=\"token operator\">=</span> <span class=\"token function\">copyJsArrayToRust</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>instanceExports<span class=\"token punctuation\">,</span> imageData<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\nwasmExports<span class=\"token punctuation\">.</span><span class=\"token function\">load_image_data</span><span class=\"token punctuation\">(</span>imgDataVecPtr<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"上代码\" style=\"position:relative;\"><a href=\"#%E4%B8%8A%E4%BB%A3%E7%A0%81\" aria-label=\"上代码 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>上代码</h2>\n<h3 id=\"rust-端\" style=\"position:relative;\"><a href=\"#rust-%E7%AB%AF\" aria-label=\"rust 端 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Rust 端</h3>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token comment\">// main.rs</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span><span class=\"token punctuation\">{</span>mem<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>ffi<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">CString</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>os<span class=\"token punctuation\">::</span>raw<span class=\"token punctuation\">::</span></span><span class=\"token punctuation\">{</span>c_char<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">extern</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">clog</span><span class=\"token punctuation\">(</span>ptr<span class=\"token punctuation\">:</span> <span class=\"token operator\">*</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">u8</span><span class=\"token punctuation\">,</span> number<span class=\"token punctuation\">:</span> <span class=\"token keyword\">usize</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">js_log</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> _s <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">unsafe</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> m <span class=\"token operator\">=</span> _s<span class=\"token punctuation\">.</span><span class=\"token function\">as_mut_vec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">as_mut_ptr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">clog</span><span class=\"token punctuation\">(</span>m <span class=\"token keyword\">as</span> <span class=\"token operator\">*</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">u8</span><span class=\"token punctuation\">,</span> _s<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token attribute attr-name\">#[no_mangle]</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">alloc</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">:</span> <span class=\"token keyword\">usize</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token operator\">*</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">u8</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> buf <span class=\"token operator\">=</span> <span class=\"token class-name\">Vec</span><span class=\"token punctuation\">::</span><span class=\"token function\">with_capacity</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> ptr <span class=\"token operator\">=</span> buf<span class=\"token punctuation\">.</span><span class=\"token function\">as_ptr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token namespace\">mem<span class=\"token punctuation\">::</span></span><span class=\"token function\">forget</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 让 rust 放弃对此段内存的控制权，此函数结束后该段内存对于 rust 来说是泄漏的状态，分配和管理权交给 JS</span>\n  <span class=\"token keyword\">return</span> ptr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token attribute attr-name\">#[no_mangle]</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">log_something</span><span class=\"token punctuation\">(</span>text_ptr<span class=\"token punctuation\">:</span> <span class=\"token operator\">*</span><span class=\"token keyword\">mut</span> c_char<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token operator\">*</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">u8</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> text <span class=\"token operator\">=</span> <span class=\"token class-name\">CString</span><span class=\"token punctuation\">::</span><span class=\"token function\">from_raw</span><span class=\"token punctuation\">(</span>text_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">into_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">js_log</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>  <span class=\"token comment\">// 留一个 main 确保 rust 能正常编译</span></code></pre></div>\n<h3 id=\"js-端\" style=\"position:relative;\"><a href=\"#js-%E7%AB%AF\" aria-label=\"js 端 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JS 端</h3>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// wasm-util.ts</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ModuleExports</span> <span class=\"token punctuation\">{</span>\n  memory<span class=\"token operator\">:</span> WebAssembly<span class=\"token punctuation\">.</span>Memory\n  <span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span>len<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> WasmMemPtr\n  <span class=\"token function\">log_something</span><span class=\"token punctuation\">(</span>text_ptr<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">loadWebAssembly</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> ModuleExports<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>input<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> imports<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Fetch the file and compile it</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>response <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span><span class=\"token function\">arrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>buffer <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Create the imports for the module, including the</span>\n    <span class=\"token comment\">// standard dynamic library imports</span>\n    imports <span class=\"token operator\">=</span> imports <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    imports<span class=\"token punctuation\">.</span>env <span class=\"token operator\">=</span> imports<span class=\"token punctuation\">.</span>env <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>imports<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span>memory<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  \timports<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span>memory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebAssembly</span><span class=\"token punctuation\">.</span><span class=\"token function\">Memory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> initial<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Create the instance.</span>\n    <span class=\"token keyword\">return</span> WebAssembly<span class=\"token punctuation\">.</span><span class=\"token function\">instantiate</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span> imports<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">copyJsStringToRust</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">module</span><span class=\"token operator\">:</span> ModuleExports<span class=\"token punctuation\">,</span> str<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> utf8Encoder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TextEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> string_buffer <span class=\"token operator\">=</span> utf8Encoder<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> len <span class=\"token operator\">=</span> string_buffer<span class=\"token punctuation\">.</span>length\n  <span class=\"token keyword\">const</span> ptr <span class=\"token operator\">=</span> <span class=\"token keyword\">module</span><span class=\"token punctuation\">.</span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> memory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">module</span><span class=\"token punctuation\">.</span>memory<span class=\"token punctuation\">.</span>buffer<span class=\"token punctuation\">,</span> ptr<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    memory<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> string_buffer<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n\n  memory<span class=\"token punctuation\">[</span>len<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token comment\">// cstring end</span>\n\n  <span class=\"token keyword\">return</span> ptr\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">decodeRustString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">module</span><span class=\"token operator\">:</span> ModuleExports<span class=\"token punctuation\">,</span> ptr<span class=\"token operator\">:</span> WasmMemPtr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">collectCString</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> memory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">module</span><span class=\"token punctuation\">.</span>memory<span class=\"token punctuation\">.</span>buffer<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>memory<span class=\"token punctuation\">[</span>ptr<span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>memory<span class=\"token punctuation\">[</span>ptr<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  \t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Tried to read undef mem'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">yield</span> memory<span class=\"token punctuation\">[</span>ptr<span class=\"token punctuation\">]</span>\n    ptr <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> buffer_as_u8 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span><span class=\"token function\">collectCString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> utf8Decoder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TextDecoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> buffer_as_utf8 <span class=\"token operator\">=</span> utf8Decoder<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>buffer_as_u8<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> buffer_as_utf8\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">copyJsArrayToRust</span><span class=\"token punctuation\">(</span>exports<span class=\"token operator\">:</span> ModuleExports<span class=\"token punctuation\">,</span> arr<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> Uint8ClampedArray<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> memory<span class=\"token punctuation\">,</span> alloc <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> exports\n  <span class=\"token keyword\">const</span> rVecPtr <span class=\"token operator\">=</span> <span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> asBytes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span>memory<span class=\"token punctuation\">.</span>buffer<span class=\"token punctuation\">,</span> rVecPtr<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>\n  asBytes<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> rVecPtr\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>demo.ts</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>copyJsStringToRust<span class=\"token punctuation\">,</span> decodeRustString<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./wasm-util'</span>\n\n<span class=\"token keyword\">const</span> importObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  env<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">clog</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>ptr<span class=\"token operator\">:</span> WasmMemPtr<span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token function\">decodeRustString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rut<span class=\"token punctuation\">.</span>instanceExports<span class=\"token punctuation\">,</span> ptr<span class=\"token punctuation\">)</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[rust] \"</span> <span class=\"token operator\">+</span> str<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">loadWebAssembly</span><span class=\"token punctuation\">(</span><span class=\"token string\">'demo.wasm'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> strPtr <span class=\"token operator\">=</span> <span class=\"token function\">copyJsStringToRust</span><span class=\"token punctuation\">(</span>wasmExports<span class=\"token punctuation\">,</span> <span class=\"token string\">'Heyhey you you'</span><span class=\"token punctuation\">)</span>\n  wasmExports<span class=\"token punctuation\">.</span><span class=\"token function\">log_something</span><span class=\"token punctuation\">(</span>strPtr<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// '[rust] Heyhey you you'</span></code></pre></div>\n<h2 id=\"编译-wasm\" style=\"position:relative;\"><a href=\"#%E7%BC%96%E8%AF%91-wasm\" aria-label=\"编译 wasm permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>编译 WASM</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">cargo rustc --release --target<span class=\"token operator\">=</span>wasm32-unknown-unknown</code></pre></div>\n<h2 id=\"wasm-瘦身\" style=\"position:relative;\"><a href=\"#wasm-%E7%98%A6%E8%BA%AB\" aria-label=\"wasm 瘦身 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>WASM 瘦身</h2>\n<p>参见<a href=\"https://rust-lang-nursery.github.io/rust-wasm/game-of-life/code-size.html\" title=\"WASM 瘦身\">此文</a></p>\n<h3 id=\"cargotoml-中一些设定\" style=\"position:relative;\"><a href=\"#cargotoml-%E4%B8%AD%E4%B8%80%E4%BA%9B%E8%AE%BE%E5%AE%9A\" aria-label=\"cargotoml 中一些设定 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cargo.toml 中一些设定</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[profile.release]\ndebug = false\nlto = true</code></pre></div>\n<h1 id=\"例子\" style=\"position:relative;\"><a href=\"#%E4%BE%8B%E5%AD%90\" aria-label=\"例子 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>例子</h1>\n<ul>\n<li><a href=\"https://www.hellorust.com/demos/\">Hello Rust</a></li>\n<li><a href=\"https://arkada38.github.io/2017/12/04/rust-wasm-string-to-uppercase/\">https://arkada38.github.io/2017/12/04/rust-wasm-string-to-uppercase/</a></li>\n<li><a href=\"https://stackoverflow.com/questions/49014610/passing-a-javascript-string-to-a-rust-function-compiled-to-webassembly\">https://stackoverflow.com/questions/49014610/passing-a-javascript-string-to-a-rust-function-compiled-to-webassembly</a></li>\n<li><a href=\"https://kripken.github.io/blog/binaryen/2018/04/18/rust-emscripten.html\">Small WebAssembly Binaries with Rust + Emscripten</a></li>\n</ul>","excerpt":"在公司项目里的一个小角落，尝试使用 Rust + WebAssembly 加速应用里部分计算 选择 首先要分清项目里 WebAssembly 的定位 应用主体：完成绝大多数逻辑，JS 只作为加载入口和少部分事件绑定桥梁 工具库：分担一些复杂和耗时的计算，由 JS…","tableOfContents":"<ul>\n<li>\n<ul>\n<li>\n<p><a href=\"/2018-05-03-Try-Rust-Webassemly/#%E9%80%89%E6%8B%A9\">选择</a></p>\n<ul>\n<li><a href=\"/2018-05-03-Try-Rust-Webassemly/#%E9%80%89%E6%8B%A9-rust-target\">选择 Rust Target</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/2018-05-03-Try-Rust-Webassemly/#webassembly-%E8%80%83%E9%87%8F\">WebAssembly 考量</a></p>\n<ul>\n<li>\n<p><a href=\"/2018-05-03-Try-Rust-Webassemly/#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E9%97%AE%E9%A2%98\">数据类型问题</a></p>\n<ul>\n<li><a href=\"/2018-05-03-Try-Rust-Webassemly/#%E5%AD%97%E7%AC%A6%E4%B8%B2\">字符串</a></li>\n<li><a href=\"/2018-05-03-Try-Rust-Webassemly/#%E6%95%B0%E7%BB%84\">数组</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/2018-05-03-Try-Rust-Webassemly/#%E4%B8%8A%E4%BB%A3%E7%A0%81\">上代码</a></p>\n<ul>\n<li><a href=\"/2018-05-03-Try-Rust-Webassemly/#rust-%E7%AB%AF\">Rust 端</a></li>\n<li><a href=\"/2018-05-03-Try-Rust-Webassemly/#js-%E7%AB%AF\">JS 端</a></li>\n</ul>\n</li>\n<li><a href=\"/2018-05-03-Try-Rust-Webassemly/#%E7%BC%96%E8%AF%91-wasm\">编译 WASM</a></li>\n<li>\n<p><a href=\"/2018-05-03-Try-Rust-Webassemly/#wasm-%E7%98%A6%E8%BA%AB\">WASM 瘦身</a></p>\n<ul>\n<li><a href=\"/2018-05-03-Try-Rust-Webassemly/#cargotoml-%E4%B8%AD%E4%B8%80%E4%BA%9B%E8%AE%BE%E5%AE%9A\">Cargo.toml 中一些设定</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"/2018-05-03-Try-Rust-Webassemly/#%E4%BE%8B%E5%AD%90\">例子</a></li>\n</ul>","fields":{"slug":"/2018-05-03-Try-Rust-Webassemly/","featureImageSrc":null},"frontmatter":{"title":"Try Rust WebAssembly","date":"2018-05-03","author":null,"tags":["WebAssembly","Rust"],"use_toc":null,"coverImage":null}}},"pageContext":{"type":"posts","next":{"fields":{"slug":"/2018-04-06-Write-Vue-Tests-in-Jest/"},"frontmatter":{"title":"用 Jest 单元测试基于 Vue 的项目","tags":["Test","Vue"]},"fileAbsolutePath":"/Users/bytedance/mydemos/gatsby-hello-friend/content/posts/2018-04-06-Write-Vue-Tests-in-Jest.md"},"previous":{"fields":{"slug":"/2018-07-03-Vuex-Dynamic-Module-Hints/"},"frontmatter":{"title":"Vuex 模块动态注册的一些实践经验","tags":["Vue","Vuex"]},"fileAbsolutePath":"/Users/bytedance/mydemos/gatsby-hello-friend/content/posts/2018-07-03-Vuex-Dynamic-Module-Hints.md"},"slug":"/2018-05-03-Try-Rust-Webassemly/"}},"staticQueryHashes":["1425477374","3128451518"]}