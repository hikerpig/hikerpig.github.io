{"componentChunkName":"component---src-templates-page-js","path":"/2019-03-06-Decode-Video-Using-FFMpeg-In-Browser/","result":{"data":{"site":{"siteMetadata":{"title":"HP goes FE","author":"@hikerpig"}},"markdownRemark":{"id":"e2c9cd2f-30f4-5530-91bb-6f001cda7196","html":"<p>音视频开发入门，可能绕不开 ffmpeg 这个项目，最近看了篇 <a href=\"https://zhuanlan.zhihu.com/p/40786748\">知乎专栏</a>，觉得这个事情很有意思。</p>\n<p>比起直接编辑整个 ffmpeg 项目的 CLI 到前端，更符合实际需求的方式，是先基于 ffmpeg 各种 lib 二次开发出合适的功能，此时结果是可执行的二进制文件，可以用 lldb 或者 gdb 调试。然后再使用 Emscripten 编译到 Webassembly，如此一来可以解决 wasm 不易调试的问题。</p>\n<p>跟着教程实现一个功能：解析出视频任意一帧的图像并绘制到 canvas 上。</p>\n<h2 id=\"web-demo-应用流程\" style=\"position:relative;\"><a href=\"#web-demo-%E5%BA%94%E7%94%A8%E6%B5%81%E7%A8%8B\" aria-label=\"web demo 应用流程 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Web demo 应用流程</h2>\n<p>demo 页的简单流程</p>\n<div class=\"mermaid\">graph TD\n    P1[获取视频 buffer 并写入wasm将要使用的线性内存空间] -- 进入wasm调用 --> A\n\nsubgraph C 程序转成的 wasm\n    A[avcodec 解析视频文件 buffer] --> B[解出指定时间的图像并转成 RGB 格式数据]\n    B --> C[将图像等数据写入内存, 并将指针返给 js 端]\nend\n\n    C  -- 回到 js -->  D[根据指针读出数据, 构建 ImageData, 绘制到 canvas 上]</div>\n<h2 id=\"从源码编译-ffmpeg\" style=\"position:relative;\"><a href=\"#%E4%BB%8E%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91-ffmpeg\" aria-label=\"从源码编译 ffmpeg permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>从源码编译 ffmpeg</h2>\n<p>本文写就的时候使用的是 ffmpeg <code>n4.2-dev</code> 版，将其源码置于项目相对目录 <code>lib/ffmpeg</code> 下。</p>\n<p>ffmpeg 是一个很大的项目，包含的很多功能对于我们的需求来说，都用不上，可以通过 <a href=\"https://github.com/FFmpeg/FFmpeg/blob/master/configure\">configure</a> 配置留下合适的功能集。这个其实就是一个可执行的 sh 脚本，比较复杂的项目，通常在实际编译之前，可以使用 configure 根据参数和环境生成实际编译过程需要的 Makefile。</p>\n<h3 id=\"项目-makefile\" style=\"position:relative;\"><a href=\"#%E9%A1%B9%E7%9B%AE-makefile\" aria-label=\"项目 makefile permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>项目 Makefile</h3>\n<p>参考 <a href=\"https://github.com/Kagami/ffmpeg.js/\">ffmpeg.js</a> 项目的一些配置</p>\n<div class=\"gatsby-highlight\" data-language=\"makefile\"><pre class=\"language-makefile\"><code class=\"language-makefile\">COMMON_FILTERS <span class=\"token operator\">=</span> scale crop overlay\nCOMMON_DEMUXERS <span class=\"token operator\">=</span> matroska ogg avi mov flv mpegps image2 mp3 concat\nCOMMON_DECODERS <span class=\"token operator\">=</span> \\\n\tmpeg2video mpeg4 h264 hevc \\\n\tpng mjpeg \\\n\tmp3 ac3 aac\n\nMUXERS <span class=\"token operator\">=</span> mp4 null image2\nENCODERS <span class=\"token operator\">=</span> mjpeg\n\nFFMPEG_CONFIGURE_ARGS <span class=\"token operator\">=</span> \\\n\t--cc<span class=\"token operator\">=</span>emcc \\\n\t--ar<span class=\"token operator\">=</span>emar \\\n\t--enable-cross-compile \\\n\t--target-os<span class=\"token operator\">=</span>none \\\n\t--cpu<span class=\"token operator\">=</span>generic \\\n\t--arch<span class=\"token operator\">=</span>x86 \\\n\t--disable-runtime-cpudetect \\\n\t--disable-asm \\\n\t--disable-fast-unaligned \\\n\t--disable-pthreads \\\n\t--disable-w32threads \\\n\t--disable-os2threads \\\n\t--disable-debug \\\n\t--disable-stripping \\\n\t\\\n\t--disable-all \\\n\t--enable-avcodec \\\n\t--enable-avformat \\\n\t--enable-avutil \\\n\t--enable-swscale \\\n\t--enable-shared \\\n\t--enable-protocol<span class=\"token operator\">=</span>file \\\n\t<span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>addprefix --enable-decoder<span class=\"token operator\">=</span>,<span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>COMMON_DECODERS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \\\n\t<span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>addprefix --enable-demuxer<span class=\"token operator\">=</span>,<span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>COMMON_DEMUXERS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \\\n\t<span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>addprefix --enable-encoder<span class=\"token operator\">=</span>,<span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>ENCODERS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \\\n\t<span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>addprefix --enable-muxer<span class=\"token operator\">=</span>,<span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>MUXERS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \\\n\t<span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>addprefix --enable-filter<span class=\"token operator\">=</span>,<span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>COMMON_FILTERS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n\n<span class=\"token comment\"># to run ffmpeg configure and emmake</span>\n<span class=\"token symbol\">lib/ffmpeg/libavcodec/libavcodec.a</span><span class=\"token punctuation\">:</span>\n\tcd lib/ffmpeg &amp;&amp; \\\n\tpatch -p1 &lt; ../swscale.c.patch &amp;&amp; \\\n\temconfigure ./configure \\\n\t\t<span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>FFMPEG_CONFIGURE_ARGS<span class=\"token punctuation\">)</span> \\\n\t\t&amp;&amp; \\\n\temmake make</code></pre></div>\n<p>说下 <code>lib/ffmpeg/libavcodec/libavcodec.a</code> 这个目标，分成几步:</p>\n<ul>\n<li><code>emconfigure</code> 是 emsdk 提供的工具，执行完这一步之后，会生成 <code>lib/ffmpeg/Makefile</code></li>\n<li><code>emmake make</code> 便是开始编译了，由于我们在前一步 configure 的时候有 <code>--enable-avcodec</code>，所以用这个 Makefile 编译，会生成 <code>lib/ffmpeg/libavcodec/libavcodec.a</code> 这个静态库文件</li>\n<li>编译原本的 ffmpeg 代码会报错，定位到 <code>libswscale/swscale.c</code> 文件里，为了编译通过，在编译前加了个不影响主要功能的简单的 patch</li>\n</ul>\n<p>运行 <code>make lib/ffmpeg/libavcodec/libavcodec.a</code>，等待大约一两分钟，emscripten 编译 ffmpeg 静态库完成，闪过了一堆 warning 可以优雅地无视掉。接下来就是编写我们的应用接口代码并编译到 WebAssembly 了。</p>\n<h2 id=\"编译和使用\" style=\"position:relative;\"><a href=\"#%E7%BC%96%E8%AF%91%E5%92%8C%E4%BD%BF%E7%94%A8\" aria-label=\"编译和使用 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>编译和使用</h2>\n<h3 id=\"生成-js-和-wasm-文件\" style=\"position:relative;\"><a href=\"#%E7%94%9F%E6%88%90-js-%E5%92%8C-wasm-%E6%96%87%E4%BB%B6\" aria-label=\"生成 js 和 wasm 文件 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>生成 JS 和 WASM 文件</h3>\n<div class=\"gatsby-highlight\" data-language=\"makefile\"><pre class=\"language-makefile\"><code class=\"language-makefile\"><span class=\"token symbol\">dist/vidy-standalone.js</span><span class=\"token punctuation\">:</span>\n    emcc transcoder/web.c transcoder/process.c \\\n                lib/ffmpeg/libavformat/libavformat.a \\\n                lib/ffmpeg/libavcodec/libavcodec.a \\\n                lib/ffmpeg/libswscale/libswscale.a \\\n                lib/ffmpeg/libavutil/libavutil.a \\\n                -s TOTAL_MEMORY<span class=\"token operator\">=</span>33554432 \\\n                -s MODULARIZE<span class=\"token operator\">=</span>1 \\\n                -O1 -s WASM<span class=\"token operator\">=</span>1 -s EXTRA_EXPORTED_RUNTIME_METHODS<span class=\"token operator\">=</span><span class=\"token string\">'[\"ccall\", \"cwrap\"]'</span> -s ALLOW_MEMORY_GROWTH<span class=\"token operator\">=</span>1  \\\n                -Ilib/ffmpeg \\\n                --post-js transcoder/js/post.js \\\n                -o dist/vidy-standalone.js</code></pre></div>\n<p>使用 <code>emcc</code> 编译：</p>\n<ul>\n<li>存放暴露给浏览器的相关接口的 <code>web.c</code></li>\n<li>存放通用的 ffmpeg 方法调用的 <code>process.c</code> </li>\n<li>以及之前生成个几个静态库文件 <code>.a</code></li>\n</ul>\n<p>其中一些参数说明一下：</p>\n<ul>\n<li><code>-s MODULARIZE=1</code> 让 emcc 生成模块工厂函数（而且还是 UMD 格式的），留待之后调用。否则默认情况下生成的 JS 会立刻执行，而且还会污染其所在全局环境（例如添加一个 self.Module 对象）</li>\n</ul>\n<p>一起生成目标文件 <code>dist/vidy-standalone.js</code>，由于传递了 <code>-s WASM=1</code>，还会生成同名的 <code>dist/vidy-standalone.wasm</code> 文件。JS 是一个一千来行的胶水代码，负责 WASM 模块的初始化和调用适配。WASM 文件大概 4.7M。</p>\n<p>查看 <a href=\"%5Bhttps://emscripten.org/docs/tools_reference/emcc.html\">emcc 文档</a> 和 <a href=\"https://github.com/emscripten-core/emscripten/blob/master/src/settings.js\">关于 <code>-s</code> 的全部可选 setting</a>。</p>\n<h3 id=\"使用方法\" style=\"position:relative;\"><a href=\"#%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95\" aria-label=\"使用方法 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>使用方法</h3>\n<h4 id=\"简单的例子\" style=\"position:relative;\"><a href=\"#%E7%AE%80%E5%8D%95%E7%9A%84%E4%BE%8B%E5%AD%90\" aria-label=\"简单的例子 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>简单的例子</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> Module <span class=\"token keyword\">from</span> <span class=\"token string\">'../dist/vidy-standalone'</span>\n\n<span class=\"token keyword\">let</span> vidyModule\n\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'//path/to/dist/vidy-standalone.wasm'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> res<span class=\"token punctuation\">.</span><span class=\"token function\">arrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arrayBuffer</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        vidyModule <span class=\"token operator\">=</span> <span class=\"token function\">Module</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            wasmBinary<span class=\"token operator\">:</span> arrayBuffer\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">decodeVideoFrameImage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'some.mp4'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">decodeVideoFrameImage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">videoPath<span class=\"token punctuation\">,</span> timeStamp</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>videoPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> res<span class=\"token punctuation\">.</span><span class=\"token function\">arrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">videoBuffer</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> imageResult <span class=\"token operator\">=</span> vidyModule<span class=\"token punctuation\">.</span><span class=\"token function\">getImage</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">,</span> <span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span>timeStamp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\">// ...</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"稍微复杂点的例子\" style=\"position:relative;\"><a href=\"#%E7%A8%8D%E5%BE%AE%E5%A4%8D%E6%9D%82%E7%82%B9%E7%9A%84%E4%BE%8B%E5%AD%90\" aria-label=\"稍微复杂点的例子 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>稍微复杂点的例子</h4>\n<p>为了将模块更好地整合到前端工程中，有必要考虑在使用 webpack 的情况下如何引入。</p>\n<p>参考 <a href=\"https://github.com/GoogleChromeLabs/squoosh/\">GoogleChromeLabs/squoosh</a> 项目中的一些经验，首先看下 webpack 配置。webpack 团队在 v4 以后做了很多努力，想要让 WASM 模块的引入和使用与 js 文件一样方便，但实际实用中有很多边边角角 <a href=\"https://github.com/webpack/webpack/issues/6725\">奇怪的问题和报错</a>，而且处理一个好几兆的 wasm 文件拖慢 webpack 冷启动许多，我们可以用一下配置让 webpack 不去读取 WASM 文件。使用 file-loader 也可以简单地配置带哈希的文件名，比起在项目中硬编码 WASM 文件路径，少去一些缓存问题。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// webpack config</span>\n    rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token operator\">...</span>\n      <span class=\"token punctuation\">{</span>\n        test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.wasm$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// This is needed to make webpack NOT process wasm files.</span>\n        type<span class=\"token operator\">:</span> <span class=\"token string\">'javascript/auto'</span><span class=\"token punctuation\">,</span>\n        loader<span class=\"token operator\">:</span> <span class=\"token string\">'file-loader'</span><span class=\"token punctuation\">,</span>\n        options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          name<span class=\"token operator\">:</span> <span class=\"token string\">'[name].[hash:5].[ext]'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token punctuation\">]</span></code></pre></div>\n<p>跟上面简单例子里效果相似的写法可以变成这样:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> Module <span class=\"token keyword\">from</span> <span class=\"token string\">'../dist/vidy-standalone'</span>\n<span class=\"token keyword\">import</span> vidyWasmUrl <span class=\"token keyword\">from</span> <span class=\"token string\">'../dist/vidy-standalone.wasm'</span> <span class=\"token comment\">// 会被 file-loader 处理成一个静态文件的 url</span>\n\n<span class=\"token keyword\">const</span> vidyModule <span class=\"token operator\">=</span> <span class=\"token function\">Module</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">locateFile</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Redirect the request for the wasm binary to whatever webpack gave us.</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">.</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.wasm'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> vidyWasmUrl<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> url<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>emcc 生成的胶水代码里，默认请求的 WASM 文件路径是 <code>vidy-standalone.wasm</code>，但看看 <a href=\"https://github.com/emscripten-core/emscripten/blob/master/emcc.py#L2800\">emcc 这一部分实现</a> 知道，如果给模块工厂函数 Module 传递了 <code>locateFile</code> 函数，就可以改写其内部会去请求的 WASM 文件路径。使用模块工厂函数的话，也不用自己去调用 <code>fetch</code> 了。</p>\n<h2 id=\"一些具体实现的代码\" style=\"position:relative;\"><a href=\"#%E4%B8%80%E4%BA%9B%E5%85%B7%E4%BD%93%E5%AE%9E%E7%8E%B0%E7%9A%84%E4%BB%A3%E7%A0%81\" aria-label=\"一些具体实现的代码 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>一些具体实现的代码</h2>\n<p>首先看看 <code>web.c</code> 里暴露出的方法签名： </p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">EMSCRIPTEN_KEEPALIVE MyImageData <span class=\"token operator\">*</span><span class=\"token function\">seek_video_to</span><span class=\"token punctuation\">(</span>uint8_t <span class=\"token operator\">*</span>buff<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> buff_length<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> time_stamp<span class=\"token punctuation\">)</span></code></pre></div>\n<p>buffer 数组头指针 <code>buff</code>，buffer 长度 <code>buff_length</code>，以及用单精度浮点数表示的需要提取图像的时间。返回数据为我们自定义的结构。</p>\n<h3 id=\"js-将视频数据写入-wasm-线性内存\" style=\"position:relative;\"><a href=\"#js-%E5%B0%86%E8%A7%86%E9%A2%91%E6%95%B0%E6%8D%AE%E5%86%99%E5%85%A5-wasm-%E7%BA%BF%E6%80%A7%E5%86%85%E5%AD%98\" aria-label=\"js 将视频数据写入 wasm 线性内存 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[JS] 将视频数据写入 WASM 线性内存</h3>\n<p>在 <code>post.js</code> 里，添加的一部分代码。</p>\n<ul>\n<li>根据 C 的方法签名，使用 emscripten 的胶水代码工具函数 <code>Module.cwrap</code> 包装一个 JS 的调用方法</li>\n<li>给 emscripten 模块加上了 <code>Module.getImage</code> 方法，供外部调用</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> seek_video_to <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n\nModule<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onRuntimeInitialized</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  seek_video_to <span class=\"token operator\">=</span> Module<span class=\"token punctuation\">.</span><span class=\"token function\">cwrap</span><span class=\"token punctuation\">(</span><span class=\"token string\">'seek_video_to'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'number'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nModule<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getImage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">buffer<span class=\"token punctuation\">,</span> timeStamp</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>seek_video_to<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> errcode<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">let</span> ptr <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> offset <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> before <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> data_arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    offset <span class=\"token operator\">=</span> Module<span class=\"token punctuation\">.</span><span class=\"token function\">_malloc</span><span class=\"token punctuation\">(</span>data_arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Module<span class=\"token punctuation\">.</span><span class=\"token constant\">HEAP8</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>data_arr<span class=\"token punctuation\">,</span> offset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ptr <span class=\"token operator\">=</span> <span class=\"token function\">seek_video_to</span><span class=\"token punctuation\">(</span>offset<span class=\"token punctuation\">,</span> data_arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> timeStamp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'seek_video_to costs'</span><span class=\"token punctuation\">,</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> before<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> e<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">...</span></code></pre></div>\n<h3 id=\"c-程序头部\" style=\"position:relative;\"><a href=\"#c-%E7%A8%8B%E5%BA%8F%E5%A4%B4%E9%83%A8\" aria-label=\"c 程序头部 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[C] 程序头部</h3>\n<p>首先声明一些方便数据读取的全局变量:</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span>\n<span class=\"token punctuation\">{</span>\n    uint8_t <span class=\"token operator\">*</span>ptr<span class=\"token punctuation\">;</span>\n    size_t size<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> BufferData<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * some global variables\n */</span>\nBufferData global_buffer_data<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    uint32_t width<span class=\"token punctuation\">;</span>\n    uint32_t height<span class=\"token punctuation\">;</span>\n    uint8_t <span class=\"token operator\">*</span>data<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> MyImageData<span class=\"token punctuation\">;</span></code></pre></div>\n<p>全局变量 <code>global_buffer_data</code> 留作存放原始视频数据的结构，它所在的内存区域会被 JS 直接写入。</p>\n<h3 id=\"c-avcodec-解析视频文件\" style=\"position:relative;\"><a href=\"#c-avcodec-%E8%A7%A3%E6%9E%90%E8%A7%86%E9%A2%91%E6%96%87%E4%BB%B6\" aria-label=\"c avcodec 解析视频文件 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[C] avcodec 解析视频文件</h3>\n<p>我们需要让 ffmpeg 能够从内存（而不是文件）中读取视频数据。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>avio_ctx_buffer <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 对于普通的mp4文件，这个size只要1MB就够了，但是对于mov/m4v需要和buff一样大</span>\n    size_t avio_ctx_buffer_size <span class=\"token operator\">=</span> buff_length<span class=\"token punctuation\">;</span>\n\n    global_buffer_data<span class=\"token punctuation\">.</span>ptr <span class=\"token operator\">=</span> buff<span class=\"token punctuation\">;</span>         <span class=\"token comment\">/* will be grown as needed by the realloc above */</span>\n    global_buffer_data<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> buff_length<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* no data at this point */</span>\n\n    AVFormatContext <span class=\"token operator\">*</span>pFormatCtx <span class=\"token operator\">=</span> <span class=\"token function\">avformat_alloc_context</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    uint8_t <span class=\"token operator\">*</span>avio_ctx_buffer <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>uint8_t <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">av_malloc</span><span class=\"token punctuation\">(</span>avio_ctx_buffer_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/* 读内存数据 */</span>\n    AVIOContext <span class=\"token operator\">*</span>avio_ctx <span class=\"token operator\">=</span> <span class=\"token function\">avio_alloc_context</span><span class=\"token punctuation\">(</span>avio_ctx_buffer<span class=\"token punctuation\">,</span> avio_ctx_buffer_size<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> read_packet<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    pFormatCtx<span class=\"token operator\">-></span>pb <span class=\"token operator\">=</span> avio_ctx<span class=\"token punctuation\">;</span>\n    pFormatCtx<span class=\"token operator\">-></span>flags <span class=\"token operator\">=</span> AVFMT_FLAG_CUSTOM_IO<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>新建 <code>AVIOContext *avio_ctx</code>，指定目标 buffer 指针，目标 buffer 大小，以及我们提供的读取数据的 <code>read_packet</code> 函数，该 iocontext 需要读下一段数据时， <code>read_packet</code> 函数就将 <code>global_buffer_data</code> 中指定大小的数据写入目标 <code>*buf</code> 位置</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">read_packet</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>opaque<span class=\"token punctuation\">,</span> uint8_t <span class=\"token operator\">*</span>buf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> buf_size<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    buf_size <span class=\"token operator\">=</span> <span class=\"token function\">FFMIN</span><span class=\"token punctuation\">(</span>buf_size<span class=\"token punctuation\">,</span> global_buffer_data<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/* copy internal buffer data to buf */</span>\n    <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> global_buffer_data<span class=\"token punctuation\">.</span>ptr<span class=\"token punctuation\">,</span> buf_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    global_buffer_data<span class=\"token punctuation\">.</span>ptr <span class=\"token operator\">+=</span> buf_size<span class=\"token punctuation\">;</span>\n    global_buffer_data<span class=\"token punctuation\">.</span>size <span class=\"token operator\">-=</span> buf_size<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> buf_size<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"c-获取图片-rgb-数据\" style=\"position:relative;\"><a href=\"#c-%E8%8E%B7%E5%8F%96%E5%9B%BE%E7%89%87-rgb-%E6%95%B0%E6%8D%AE\" aria-label=\"c 获取图片 rgb 数据 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[C] 获取图片 rgb 数据</h3>\n<p>这里内容太多，主要涉及 FFMpeg 的接口和视频编解码的知识，准备另写一篇。</p>\n<h3 id=\"c-将图像等数据写入内存\" style=\"position:relative;\"><a href=\"#c-%E5%B0%86%E5%9B%BE%E5%83%8F%E7%AD%89%E6%95%B0%E6%8D%AE%E5%86%99%E5%85%A5%E5%86%85%E5%AD%98\" aria-label=\"c 将图像等数据写入内存 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[C] 将图像等数据写入内存</h3>\n<p>当拿到包含 RGB 格式图像数据的 <code>AVFrame *pFrameRGB</code> 后，是时候将其中的颜色信息取出，转化为线性存储的，利于 JS 中 Canvas 元素使用的数据格式。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">uint8_t <span class=\"token operator\">*</span><span class=\"token function\">get_image_frame_buffer</span><span class=\"token punctuation\">(</span>AVFrame <span class=\"token operator\">*</span>pFrame<span class=\"token punctuation\">,</span> AVCodecContext <span class=\"token operator\">*</span>pCodecCtx<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> width <span class=\"token operator\">=</span> pCodecCtx<span class=\"token operator\">-></span>width<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> height <span class=\"token operator\">=</span> pCodecCtx<span class=\"token operator\">-></span>height<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> buffer_size <span class=\"token operator\">=</span> height <span class=\"token operator\">*</span> width <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\n    uint8_t <span class=\"token operator\">*</span>buffer <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>uint8_t <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>buffer_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Write pixel data</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> y <span class=\"token operator\">&lt;</span> height<span class=\"token punctuation\">;</span> y<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>buffer <span class=\"token operator\">+</span> y <span class=\"token operator\">*</span> pFrame<span class=\"token operator\">-></span>linesize<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> pFrame<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> y <span class=\"token operator\">*</span> pFrame<span class=\"token operator\">-></span>linesize<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> width <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> buffer<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>此函数返回的 <code>buffer</code> 指针指向的内存区域，会按照 <code>rgbrgb...</code> 的顺序存储图像颜色数据。每个像素需要 3 个存储单元，所以整个的 <code>buffer_size</code> 会是 <code>height * width * 3</code>。</p>\n<p>接下来我们回到 JS 端。</p>\n<h3 id=\"js-根据指针读出数据，构建-imagedata\" style=\"position:relative;\"><a href=\"#js-%E6%A0%B9%E6%8D%AE%E6%8C%87%E9%92%88%E8%AF%BB%E5%87%BA%E6%95%B0%E6%8D%AE%EF%BC%8C%E6%9E%84%E5%BB%BA-imagedata\" aria-label=\"js 根据指针读出数据，构建 imagedata permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[JS] 根据指针读出数据，构建 ImageData</h3>\n<p>WASM 返回的只是一个内存偏移量，\b此时我们手上有整个 WASM 实例的内存区域，得想办法把有用的数据读取出来。</p>\n<p>首先我们知道 <code>MyImageData</code> 结构体宽和高都是用 <code>uint32_t</code>，紧接着存放颜色信息的数组单元类型为 <code>uint8_t</code>。</p>\n<p>Emscripten 的胶水代码有提供 HEAPU (8/16/32/64) 几种步长的 dataviewer，可以按照以下方法读出数字和颜色数组。</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// ...</span>\n  <span class=\"token keyword\">let</span> heap32Start <span class=\"token operator\">=</span> ptr <span class=\"token operator\">/</span> <span class=\"token number\">4</span>\n  <span class=\"token keyword\">let</span> width <span class=\"token operator\">=</span> Module<span class=\"token punctuation\">.</span><span class=\"token constant\">HEAPU32</span><span class=\"token punctuation\">[</span>heap32Start<span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">let</span> height <span class=\"token operator\">=</span> Module<span class=\"token punctuation\">.</span><span class=\"token constant\">HEAPU32</span><span class=\"token punctuation\">[</span>heap32Start <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    imgBufferPtr <span class=\"token operator\">=</span> Module<span class=\"token punctuation\">.</span><span class=\"token constant\">HEAPU32</span><span class=\"token punctuation\">[</span>heap32Start <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    imageBuffer <span class=\"token operator\">=</span> Module<span class=\"token punctuation\">.</span><span class=\"token constant\">HEAP</span><span class=\"token punctuation\">.</span><span class=\"token function\">subarray</span><span class=\"token punctuation\">(</span>imgBufferPtr<span class=\"token punctuation\">,</span> imgBufferPtr <span class=\"token operator\">+</span> width <span class=\"token operator\">*</span> height <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">let</span> imageInfo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">,</span> imageDataArr<span class=\"token operator\">:</span> imageBuffer <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">let</span> imageData <span class=\"token operator\">=</span> <span class=\"token function\">imageInfoToImageData</span><span class=\"token punctuation\">(</span>imageInfo<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// ...</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">imageInfoToImageData</span><span class=\"token punctuation\">(</span>imageInfo<span class=\"token operator\">:</span> VidyImageInfo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">,</span> imageDataArr <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> imageInfo\n  <span class=\"token keyword\">const</span> imageData <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ImageData</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 目前只返回 RGB24 格式的数据, 不处理透明度</span>\n  <span class=\"token keyword\">let</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> imageDataArr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">%</span> <span class=\"token number\">3</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      imageData<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">255</span>\n    <span class=\"token punctuation\">}</span>\n    imageData<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> imageDataArr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n  imageData<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">255</span>\n  <span class=\"token keyword\">return</span> imageData\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>绘制到 canvas 上就很简单了</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">canvas<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> width\ncanvas<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> height\n<span class=\"token keyword\">let</span> ctx <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2d'</span><span class=\"token punctuation\">)</span>\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">drawImage</span><span class=\"token punctuation\">(</span>imageData<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"总结\" style=\"position:relative;\"><a href=\"#%E6%80%BB%E7%BB%93\" aria-label=\"总结 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>总结</h2>\n<p>跟着别人的文章思路，小小修改，跑通了一个 demo，大致熟悉一下 C 项目使用 Emscripten 转化为前端可用模块的方案。</p>\n<p>不是很熟悉 C 语言，同时在 JS 和 C 端手动管理内存虽然对于入门者来说很容易操作，但稍显繁琐。</p>\n<p>Emscripten 多用于翻译现有的 C/C++ 库代码，对于 Web API 和前端生态的支持，明显没有隔壁 Mozilla 的 Rust 社区积极。不过音视频技术实现，的确是 C 的传统强项领域，若想少造轮子，还是要好好学习的。</p>\n<h2 id=\"参考\" style=\"position:relative;\"><a href=\"#%E5%8F%82%E8%80%83\" aria-label=\"参考 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>参考</h2>\n<p> <a href=\"https://zhuanlan.zhihu.com/p/40786748\">https://zhuanlan.zhihu.com/p/40786748</a> </p>","excerpt":"音视频开发入门，可能绕不开 ffmpeg 这个项目，最近看了篇 知乎专栏，觉得这个事情很有意思。 比起直接编辑整个 ffmpeg 项目的 CLI 到前端，更符合实际需求的方式，是先基于 ffmpeg 各种 lib…","tableOfContents":"<ul>\n<li><a href=\"/2019-03-06-Decode-Video-Using-FFMpeg-In-Browser/#web-demo-%E5%BA%94%E7%94%A8%E6%B5%81%E7%A8%8B\">Web demo 应用流程</a></li>\n<li>\n<p><a href=\"/2019-03-06-Decode-Video-Using-FFMpeg-In-Browser/#%E4%BB%8E%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91-ffmpeg\">从源码编译 ffmpeg</a></p>\n<ul>\n<li><a href=\"/2019-03-06-Decode-Video-Using-FFMpeg-In-Browser/#%E9%A1%B9%E7%9B%AE-makefile\">项目 Makefile</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/2019-03-06-Decode-Video-Using-FFMpeg-In-Browser/#%E7%BC%96%E8%AF%91%E5%92%8C%E4%BD%BF%E7%94%A8\">编译和使用</a></p>\n<ul>\n<li><a href=\"/2019-03-06-Decode-Video-Using-FFMpeg-In-Browser/#%E7%94%9F%E6%88%90-js-%E5%92%8C-wasm-%E6%96%87%E4%BB%B6\">生成 JS 和 WASM 文件</a></li>\n<li>\n<p><a href=\"/2019-03-06-Decode-Video-Using-FFMpeg-In-Browser/#%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95\">使用方法</a></p>\n<ul>\n<li><a href=\"/2019-03-06-Decode-Video-Using-FFMpeg-In-Browser/#%E7%AE%80%E5%8D%95%E7%9A%84%E4%BE%8B%E5%AD%90\">简单的例子</a></li>\n<li><a href=\"/2019-03-06-Decode-Video-Using-FFMpeg-In-Browser/#%E7%A8%8D%E5%BE%AE%E5%A4%8D%E6%9D%82%E7%82%B9%E7%9A%84%E4%BE%8B%E5%AD%90\">稍微复杂点的例子</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/2019-03-06-Decode-Video-Using-FFMpeg-In-Browser/#%E4%B8%80%E4%BA%9B%E5%85%B7%E4%BD%93%E5%AE%9E%E7%8E%B0%E7%9A%84%E4%BB%A3%E7%A0%81\">一些具体实现的代码</a></p>\n<ul>\n<li><a href=\"/2019-03-06-Decode-Video-Using-FFMpeg-In-Browser/#js-%E5%B0%86%E8%A7%86%E9%A2%91%E6%95%B0%E6%8D%AE%E5%86%99%E5%85%A5-wasm-%E7%BA%BF%E6%80%A7%E5%86%85%E5%AD%98\">JS 将视频数据写入 WASM 线性内存</a></li>\n<li><a href=\"/2019-03-06-Decode-Video-Using-FFMpeg-In-Browser/#c-%E7%A8%8B%E5%BA%8F%E5%A4%B4%E9%83%A8\">C 程序头部</a></li>\n<li><a href=\"/2019-03-06-Decode-Video-Using-FFMpeg-In-Browser/#c-avcodec-%E8%A7%A3%E6%9E%90%E8%A7%86%E9%A2%91%E6%96%87%E4%BB%B6\">C avcodec 解析视频文件</a></li>\n<li><a href=\"/2019-03-06-Decode-Video-Using-FFMpeg-In-Browser/#c-%E8%8E%B7%E5%8F%96%E5%9B%BE%E7%89%87-rgb-%E6%95%B0%E6%8D%AE\">C 获取图片 rgb 数据</a></li>\n<li><a href=\"/2019-03-06-Decode-Video-Using-FFMpeg-In-Browser/#c-%E5%B0%86%E5%9B%BE%E5%83%8F%E7%AD%89%E6%95%B0%E6%8D%AE%E5%86%99%E5%85%A5%E5%86%85%E5%AD%98\">C 将图像等数据写入内存</a></li>\n<li><a href=\"/2019-03-06-Decode-Video-Using-FFMpeg-In-Browser/#js-%E6%A0%B9%E6%8D%AE%E6%8C%87%E9%92%88%E8%AF%BB%E5%87%BA%E6%95%B0%E6%8D%AE%EF%BC%8C%E6%9E%84%E5%BB%BA-imagedata\">JS 根据指针读出数据，构建 ImageData</a></li>\n</ul>\n</li>\n<li><a href=\"/2019-03-06-Decode-Video-Using-FFMpeg-In-Browser/#%E6%80%BB%E7%BB%93\">总结</a></li>\n<li><a href=\"/2019-03-06-Decode-Video-Using-FFMpeg-In-Browser/#%E5%8F%82%E8%80%83\">参考</a></li>\n</ul>","fields":{"slug":"/2019-03-06-Decode-Video-Using-FFMpeg-In-Browser/","featureImageSrc":null},"frontmatter":{"title":"Decode Video Using ffmpeg In Browser","date":"2019-03-06","author":null,"tags":["Webassembly","Avtech","Emscripten","ffmpeg"],"use_toc":true,"coverImage":null}}},"pageContext":{"type":"posts","next":{"fields":{"slug":"/2019-02-14-Setup-CI-in-docker/"},"frontmatter":{"title":"在 docker 环境中从 gitlab 拉取源码","tags":["docker","前端","git"]},"fileAbsolutePath":"/Users/bytedance/mydemos/gatsby-hello-friend/content/posts/2019-02-14-Setup-CI-in-docker.md"},"previous":{"fields":{"slug":"/2019-03-13-Handy-Video-Analyze-Tool/"},"frontmatter":{"title":"Handy Video Analyze Tool","tags":["video"]},"fileAbsolutePath":"/Users/bytedance/mydemos/gatsby-hello-friend/content/posts/2019-03-13-Handy-Video-Analyze-Tool.md"},"slug":"/2019-03-06-Decode-Video-Using-FFMpeg-In-Browser/"}},"staticQueryHashes":["1425477374","3128451518"]}