{"componentChunkName":"component---src-templates-page-js","path":"/2015-04-16-Align-your-assignment-sentence-using-Python-in-Vim/","result":{"data":{"site":{"siteMetadata":{"title":"HP goes FE","author":"@hikerpig"}},"markdownRemark":{"id":"2e6caab5-7c20-53fa-937b-fe2b47a45ebd","html":"<p>JSer们，不管是前后端，文件头的dependency部分堆积了一群犬牙交错的require语句的时候，内心有没有过一个冲动把它们全都捋一遍全对齐了！各种foramtter给平日的眼净心静贡献了不少力量，不过我印象中ST,VIM,Webstorm好像都没有这么个插件，干脆自己写一个吧。</p>\n<h3 id=\"需求\" style=\"position:relative;\"><a href=\"#%E9%9C%80%E6%B1%82\" aria-label=\"需求 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>需求</h3>\n<ul>\n<li>以等号对齐require语句</li>\n</ul>\n<h3 id=\"附加需求\" style=\"position:relative;\"><a href=\"#%E9%99%84%E5%8A%A0%E9%9C%80%E6%B1%82\" aria-label=\"附加需求 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>附加需求</h3>\n<ul>\n<li>以等号或冒号对齐语句</li>\n</ul>\n<p>平时VIM用的比较多，先下手这个。</p>\n<p>VIM有自己强大的DSL插件语言vimscript， 不过各种东西的学习曲线真的是... ( %>_&#x3C;% )，折腾了一下发现最关键的正则模块我没搞清楚。</p>\n<p>想想这个需求很简单，也不需要跟编辑器做很多交互，所以还是用一个顺手的语言实现吧。</p>\n<p>VIM具有lua, tcl, perl, ruby, python的编程接口，我就决定用python了，具体接口内容可以看文档:</p>\n<div class=\"gatsby-highlight\" data-language=\"vim\"><pre class=\"language-vim\"><code class=\"language-vim\"><span class=\"token punctuation\">:</span><span class=\"token keyword\">help</span> if_pyth<span class=\"token operator\">.</span>txt</code></pre></div>\n<p>比较关键的几个对象是:</p>\n<ul>\n<li><code>vim.current.buffer</code>  当前缓冲区(也可以理解是存在内存里的当前编辑文件内容)</li>\n<li><code>vim.current.buffer.mark</code>  获取当前缓冲区的某个mark信息, 下面我使用的mark('&#x3C;')和mark('>')是比较特殊的,上一次visual selection的起止位置</li>\n<li><code>vim.current.window.cursor</code> 当前窗口下输入光标所在位置</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">if</span> exists<span class=\"token punctuation\">(</span><span class=\"token string\">\"g:loaded_require_formatter\"</span><span class=\"token punctuation\">)</span>\n  finish\nendif\nlet g<span class=\"token punctuation\">:</span>loaded_require_formatter <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n\"Function<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">:</span><span class=\"token builtin\">format</span>\n\"Desc<span class=\"token punctuation\">:</span> align the require statement\n\"\nfunc! s<span class=\"token punctuation\">:</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\npython <span class=\"token operator\">&lt;&lt;</span> EOF\n\n<span class=\"token keyword\">import</span> vim\n<span class=\"token keyword\">import</span> re\n\n<span class=\"token comment\"># prepare</span>\n<span class=\"token builtin\">buffer</span> <span class=\"token operator\">=</span> vim<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token builtin\">buffer</span>\nrequire_pattern <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">r'(?P&lt;left>\\s*[\\w\\d_]+\\s?)=\\s*require(?P&lt;right>[\\w\\d\\\"\\'\\s\\(\\)\\-\\/]+)'</span><span class=\"token punctuation\">)</span>\nassign_pattern <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">r'(?P&lt;left>\\s*[\\w\\d_]+\\s?)[=:]\\s*(?P&lt;right>[\\w\\d\\\"\\'\\s\\(\\)\\-\\/]+)'</span><span class=\"token punctuation\">)</span>\ng_pattern <span class=\"token operator\">=</span> require_pattern\ng_matches <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\ng_seperator <span class=\"token operator\">=</span> <span class=\"token string\">'='</span>\n\nvst <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\nvend <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\nstart_mark <span class=\"token operator\">=</span> <span class=\"token builtin\">buffer</span><span class=\"token punctuation\">.</span>mark<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;'</span><span class=\"token punctuation\">)</span>\nend_mark <span class=\"token operator\">=</span> <span class=\"token builtin\">buffer</span><span class=\"token punctuation\">.</span>mark<span class=\"token punctuation\">(</span><span class=\"token string\">'>'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> start_mark<span class=\"token punctuation\">:</span>\n  vst <span class=\"token operator\">=</span> start_mark<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">if</span> end_mark<span class=\"token punctuation\">:</span>\n  vst <span class=\"token operator\">=</span> end_mark<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\ncursor <span class=\"token operator\">=</span> vim<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span>window<span class=\"token punctuation\">.</span>cursor\ncend <span class=\"token operator\">=</span> cursor<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\nlines <span class=\"token operator\">=</span> <span class=\"token builtin\">buffer</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\ng_start_line <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">if</span> vst <span class=\"token keyword\">and</span> vend<span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">if</span> vend <span class=\"token operator\">==</span> cend<span class=\"token punctuation\">:</span>\n    lines <span class=\"token operator\">=</span> <span class=\"token builtin\">buffer</span><span class=\"token punctuation\">[</span>vst<span class=\"token punctuation\">:</span>vend<span class=\"token punctuation\">]</span>\n    g_start_line <span class=\"token operator\">=</span> vst\n    g_pattern <span class=\"token operator\">=</span> assign_pattern\n    g_seperator <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[=:]'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">#print 'vstart is', vst</span>\n    <span class=\"token comment\">#print 'vend is', vend</span>\n    <span class=\"token comment\">#print lines</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_formated_line</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">,</span> left_len<span class=\"token punctuation\">,</span> seperator<span class=\"token operator\">=</span><span class=\"token string\">'='</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    :text: {str}\n    :left_len: {int}\n    :returns: {str}\n\n    \"\"\"</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">hasattr</span><span class=\"token punctuation\">(</span>seperator<span class=\"token punctuation\">,</span> <span class=\"token string\">'match'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      match <span class=\"token operator\">=</span> seperator<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> match<span class=\"token punctuation\">:</span>\n        epos <span class=\"token operator\">=</span> match<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> text\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n      epos <span class=\"token operator\">=</span> text<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span>seperator<span class=\"token punctuation\">)</span>\n    left_str <span class=\"token operator\">=</span> text<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>epos<span class=\"token punctuation\">]</span>\n    remained <span class=\"token operator\">=</span> text<span class=\"token punctuation\">[</span>epos<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n    short_of_len <span class=\"token operator\">=</span> left_len <span class=\"token operator\">-</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>left_str<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> short_of_len <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        to_append <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> short_of_len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            to_append<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>\n        to_append <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>to_append<span class=\"token punctuation\">)</span>\n        text <span class=\"token operator\">=</span> left_str <span class=\"token operator\">+</span> to_append <span class=\"token operator\">+</span> remained\n\n    <span class=\"token keyword\">return</span> text\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span>lines<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    max_left_len <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    matched_linenos <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> line <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>lines<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        matches <span class=\"token operator\">=</span> g_pattern<span class=\"token punctuation\">.</span>match<span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> matches<span class=\"token punctuation\">:</span>\n            matched_linenos<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n            g_matches<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>matches<span class=\"token punctuation\">)</span>\n            gp_dict <span class=\"token operator\">=</span> matches<span class=\"token punctuation\">.</span>groupdict<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            left <span class=\"token operator\">=</span> gp_dict<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'left'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> left<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">:</span>\n              left <span class=\"token operator\">+=</span> <span class=\"token string\">' '</span>\n            left_len <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span>\n            max_left_len <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>max_left_len<span class=\"token punctuation\">,</span> left_len<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> matched_linenos<span class=\"token punctuation\">:</span>\n        line <span class=\"token operator\">=</span> lines<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n        fl <span class=\"token operator\">=</span> get_formated_line<span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">,</span> max_left_len<span class=\"token punctuation\">,</span> seperator<span class=\"token operator\">=</span>g_seperator<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">#print \"formed_line is \", fl</span>\n\n        <span class=\"token comment\"># replace the line</span>\n        real_lineno <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> g_start_line\n        <span class=\"token keyword\">del</span> <span class=\"token builtin\">buffer</span><span class=\"token punctuation\">[</span>real_lineno<span class=\"token punctuation\">]</span>\n        <span class=\"token builtin\">buffer</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>fl<span class=\"token punctuation\">,</span> real_lineno<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># start</span>\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n  start<span class=\"token punctuation\">(</span>lines<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> exp<span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">print</span> exp\n\nEOF\nendfunc\n\n\" change this <span class=\"token builtin\">map</span> <span class=\"token keyword\">if</span> it conflicts <span class=\"token keyword\">with</span> others\n<span class=\"token builtin\">map</span> <span class=\"token operator\">&lt;</span>C<span class=\"token operator\">-</span>e<span class=\"token operator\">></span> <span class=\"token punctuation\">:</span>echo <span class=\"token operator\">&lt;</span>SID<span class=\"token operator\">></span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span>CR<span class=\"token operator\">></span>\n\n\" 处于visual模式的时候会报<span class=\"token builtin\">range</span> <span class=\"token keyword\">not</span> allowed的错<span class=\"token punctuation\">,</span>\n<span class=\"token string\">\" vmap的时候先退出v模式\"</span>\nvmap <span class=\"token operator\">&lt;</span>C<span class=\"token operator\">-</span>e<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>Esc<span class=\"token operator\">></span><span class=\"token punctuation\">:</span>echo <span class=\"token operator\">&lt;</span>SID<span class=\"token operator\">></span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span>CR<span class=\"token operator\">></span></code></pre></div>\n<p>这样在normal和visual模式下都可以轻松对齐了。</p>\n<h2 id=\"参考文章\" style=\"position:relative;\"><a href=\"#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0\" aria-label=\"参考文章 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>参考文章</h2>\n<ul>\n<li><a href=\"http://hi.baidu.com/bluebanboom/item/439c23626237072769105b29\">Python in Vim</a></li>\n</ul>","excerpt":"JSer们，不管是前后端，文件头的dependency部分堆积了一群犬牙交错的require语句的时候，内心有没有过一个冲动把它们全都捋一遍全对齐了！各种foramtter给平日的眼净心静贡献了不少力量，不过我印象中ST,VIM,Webstorm…","tableOfContents":"<ul>\n<li>\n<ul>\n<li><a href=\"/2015-04-16-Align-your-assignment-sentence-using-Python-in-Vim/#%E9%9C%80%E6%B1%82\">需求</a></li>\n<li><a href=\"/2015-04-16-Align-your-assignment-sentence-using-Python-in-Vim/#%E9%99%84%E5%8A%A0%E9%9C%80%E6%B1%82\">附加需求</a></li>\n</ul>\n</li>\n<li><a href=\"/2015-04-16-Align-your-assignment-sentence-using-Python-in-Vim/#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0\">参考文章</a></li>\n</ul>","fields":{"slug":"/2015-04-16-Align-your-assignment-sentence-using-Python-in-Vim/","featureImageSrc":null},"frontmatter":{"title":"使用python编写vim脚本 对齐赋值语句","date":"2015-04-16","author":null,"tags":["Vim"],"use_toc":false,"coverImage":null}}},"pageContext":{"type":"posts","next":{"fields":{"slug":"/2015-02-05-show-scss-code-outline-with-Tagbar/"},"frontmatter":{"title":"用Tagbar在VIM中查看scss文件代码结构","tags":["Vim","CSS"]},"fileAbsolutePath":"/Users/bytedance/mydemos/gatsby-hello-friend/content/posts/2015-02-05-show-scss-code-outline-with-Tagbar.md"},"previous":{"fields":{"slug":"/2015-07-11-Test-FileReader-methods/"},"frontmatter":{"title":"Test FileReader methods","tags":["Test"]},"fileAbsolutePath":"/Users/bytedance/mydemos/gatsby-hello-friend/content/posts/2015-07-11-Test-FileReader-methods.md"},"slug":"/2015-04-16-Align-your-assignment-sentence-using-Python-in-Vim/"}},"staticQueryHashes":["1425477374","3128451518"]}