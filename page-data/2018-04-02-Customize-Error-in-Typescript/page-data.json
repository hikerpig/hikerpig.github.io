{"componentChunkName":"component---src-templates-page-js","path":"/2018-04-02-Customize-Error-in-Typescript/","result":{"data":{"site":{"siteMetadata":{"title":"HP goes FE","author":"@hikerpig"}},"markdownRemark":{"id":"78fef76f-2109-5c87-8693-25314d8e78d9","html":"<p>通过 Typescript class 继承 Error 实现自定义错误类型并编译到 ES5 时，遇到了一个坑。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyError</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Error</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>compilerOptions.target 设为 \"es5\"。</p>\n<p>但是运行起来：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> err <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nerr <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Error</span> <span class=\"token comment\">// true</span>\nerr <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">MyError</span>  <span class=\"token comment\">// 结果竟然是 false</span></code></pre></div>\n<h2 id=\"原因\" style=\"position:relative;\"><a href=\"#%E5%8E%9F%E5%9B%A0\" aria-label=\"原因 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>原因</h2>\n<p>使用 Babel/Typescript 编译出的代码有类似的问题</p>\n<p>Typescript 2.7.2 编译出的代码</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">var</span> __extends <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>__extends<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> extendStatics <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span>setPrototypeOf <span class=\"token operator\">||</span>\n        <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> __proto__<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\"><span class=\"token builtin\">Array</span></span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> d<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n        <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> p <span class=\"token keyword\">in</span> b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> d<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> b<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">extendStatics</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">function</span> <span class=\"token function\">__</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">constructor</span> <span class=\"token operator\">=</span> d<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        d<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> b <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>__<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">__</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> MyError <span class=\"token operator\">=</span> <span class=\"token comment\">/** @class */</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>_super<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">__extends</span><span class=\"token punctuation\">(</span>MyError<span class=\"token punctuation\">,</span> _super<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">MyError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 问题关键在这里</span>\n        <span class=\"token keyword\">return</span> _super <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">_super</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> MyError<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>Error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>原因在于，Error 是一个特殊的存在，即是一个构造函数，也是一个普通函数。以下两种调用皆可返回 error object。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>那么在调用以下函数时，_super 为 Error，返回的即是 <code>Error(this, arguments)</code>，而不是 <code>this</code> 。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"> _super <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">_super</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"在-typescript-中\" style=\"position:relative;\"><a href=\"#%E5%9C%A8-typescript-%E4%B8%AD\" aria-label=\"在 typescript 中 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>在 Typescript 中</h2>\n<p>翻了翻文档，Typescript 2.1 的一些 <a href=\"https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\">breaking change</a> 导致对于一些原生对象 (Error/Array/Map) 的继承无法正常工作，应该就是由 generated code 的改变造成的。官方给出的一个建议是：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FooError</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Error</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span>m<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 在 super 之后立刻调用，改变实例的 prototype.</span>\n    Object<span class=\"token punctuation\">.</span><span class=\"token function\">setPrototypeOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> FooError<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>但是这个写法其实相当的傻，因为对于每一个子类的构建函数来说，在改变原型之前，是无法拿到正确的子类实例'this.constructor' 的，所以 <code>Object.setPrototypeOf</code> 需要出现在所有子类的构建函数中。</p>\n<h2 id=\"解决方案\" style=\"position:relative;\"><a href=\"#%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88\" aria-label=\"解决方案 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>解决方案</h2>\n<p>只好把原型继承拿回来了，最终在 target 为 es5 及以下的解决方案：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ExtensibleError</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Error</span> <span class=\"token punctuation\">{</span>\n  message<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span>message<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">Error</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>message <span class=\"token operator\">=</span> message <span class=\"token operator\">||</span> <span class=\"token string\">''</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">constructor</span><span class=\"token punctuation\">.</span>name\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> Error<span class=\"token punctuation\">.</span>captureStackTrace <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      Error<span class=\"token punctuation\">.</span><span class=\"token function\">captureStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">constructor</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nExtensibleError<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>Error<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span></code></pre></div>\n<p>构建一个中间的辅助类，并不直接采用 class 继承 Error，而只实现 Error 接口，采用原型继承，此类的示例可经过 <code>instanceOf</code> 的检验。通过 <code>Error.captureStackTrace</code> 在初始化此类实例时能够捕获调用栈。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyError</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ExtensibleError</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> err <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nerr <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">ExtensibleError</span>  <span class=\"token comment\">// true</span>\nerr <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">MyError</span>  <span class=\"token comment\">// true</span>\nerr <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Error</span> <span class=\"token comment\">// true</span></code></pre></div>\n<h3 id=\"如果编译目标为-es6-以上呢？\" style=\"position:relative;\"><a href=\"#%E5%A6%82%E6%9E%9C%E7%BC%96%E8%AF%91%E7%9B%AE%E6%A0%87%E4%B8%BA-es6-%E4%BB%A5%E4%B8%8A%E5%91%A2%EF%BC%9F\" aria-label=\"如果编译目标为 es6 以上呢？ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>如果编译目标为 ES6 以上呢？</h3>\n<p>此时编译器就不需要去帮你转化 class 的实现了，会把你的代码原样输出:</p>\n<p>** 但是！** 之前的解决方案在 nodejs 中运行会报错：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">ExtensibleError.prototype = Object.create(Error.prototype);\n                          ^\nTypeError: Cannot assign to read only property &#39;prototype&#39; of function &#39;class ExtensibleError...</code></pre></div>\n<p>因为使用 <code>class</code> 关键字声明的 <code>ExtensibleError</code> 是一个叫做类构造器（class constructor）的特殊函数，它的 prototype 是只读的，试图去改变它的话，只有报错（nodejs）和不生效两种可能。</p>\n<p>以下的代码在现在的 chrome(V8) 和 firefox(SpiderMonkey) 引擎中执行结果都是一样。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ExtensibleError</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">ExtensibleError</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Error</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> e <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ExtensibleError</span><span class=\"token punctuation\">;</span>\ne <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Error</span> <span class=\"token comment\">// false</span></code></pre></div>\n<p>如果 target 是 ES6 以上的，简简单单写 <code>class ExtensibleError extends Error {}</code> 就行了。</p>\n<p>同时我们的解决方案为了在不同编译 target 下都能正常工作，可以加入一个运行时的检测。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/** 检测当前 runtime 是否支持 es6 class */</span>\n<span class=\"token keyword\">let</span> isClassSupported <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  isClassSupported <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'class'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isClassSupported<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">ExtensibleError</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Error</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>参考</p>\n<ul>\n<li>[Error 继承踩坑记][ 踩坑经验 ]</li>\n<li><a href=\"https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\">breaking change</a></li>\n<li><a href=\"https://stackoverflow.com/questions/12915412/how-do-i-extend-a-host-object-e-g-error-in-typescript\">so 上的一个答案</a></li>\n</ul>","excerpt":"通过 Typescript class 继承 Error 实现自定义错误类型并编译到 ES5 时，遇到了一个坑。 compilerOptions.target 设为 \"es5\"。 但是运行起来： 原因 使用 Babel/Typescript…","tableOfContents":"<ul>\n<li><a href=\"/2018-04-02-Customize-Error-in-Typescript/#%E5%8E%9F%E5%9B%A0\">原因</a></li>\n<li><a href=\"/2018-04-02-Customize-Error-in-Typescript/#%E5%9C%A8-typescript-%E4%B8%AD\">在 Typescript 中</a></li>\n<li>\n<p><a href=\"/2018-04-02-Customize-Error-in-Typescript/#%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88\">解决方案</a></p>\n<ul>\n<li><a href=\"/2018-04-02-Customize-Error-in-Typescript/#%E5%A6%82%E6%9E%9C%E7%BC%96%E8%AF%91%E7%9B%AE%E6%A0%87%E4%B8%BA-es6-%E4%BB%A5%E4%B8%8A%E5%91%A2%EF%BC%9F\">如果编译目标为 ES6 以上呢？</a></li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/2018-04-02-Customize-Error-in-Typescript/","featureImageSrc":null},"frontmatter":{"title":"在 Typescript 中继承 Error 对象","date":"2018-04-02","author":null,"tags":["Typescript","Javascript"],"use_toc":null,"coverImage":null}}},"pageContext":{"type":"posts","next":{"fields":{"slug":"/2018-01-21-typed-vue-mixins/"},"frontmatter":{"title":"在 Typescript 中使用可被复用的 Vue Mixin","tags":["Typescript","Vue"]},"fileAbsolutePath":"/Users/bytedance/mydemos/gatsby-hello-friend/content/posts/2018-01-21-typed-vue-mixins.md"},"previous":{"fields":{"slug":"/2018-04-06-Write-Vue-Tests-in-Jest/"},"frontmatter":{"title":"用 Jest 单元测试基于 Vue 的项目","tags":["Test","Vue"]},"fileAbsolutePath":"/Users/bytedance/mydemos/gatsby-hello-friend/content/posts/2018-04-06-Write-Vue-Tests-in-Jest.md"},"slug":"/2018-04-02-Customize-Error-in-Typescript/"}},"staticQueryHashes":["1425477374","3128451518"]}