{"componentChunkName":"component---src-templates-page-js","path":"/2019-06-17-typescript-powered-vuex/","result":{"data":{"site":{"siteMetadata":{"title":"HP goes FE","author":"@hikerpig"}},"markdownRemark":{"id":"1e23905c-c77d-5a06-a990-151bb0dccc55","html":"<h1 id=\"碰到的问题\" style=\"position:relative;\"><a href=\"#%E7%A2%B0%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98\" aria-label=\"碰到的问题 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>碰到的问题</h1>\n<h2 id=\"如履针毡的状态管理和业务逻辑调用\" style=\"position:relative;\"><a href=\"#%E5%A6%82%E5%B1%A5%E9%92%88%E6%AF%A1%E7%9A%84%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E5%92%8C%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91%E8%B0%83%E7%94%A8\" aria-label=\"如履针毡的状态管理和业务逻辑调用 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>如履针毡的状态管理和业务逻辑调用</h2>\n<p>Vuex 使用了统一的 <code>dispatch</code>/<code>commit</code> 方法去触发 Action 和 Mutation, 如果使用嵌套的 module, Vuex 还会解析命名空间，以找到正确的 Action/Mutation 函数。</p>\n<p>对于组件来说很友好，但是对于项目维护来说可能就稍显痛苦。虽然对状态的更改都从视图逻辑里分离出来放在了 store 文件夹下，一目了然，但是对于触发 Action 的组件来说，维持与 store 部分的函数签名和接口统一，就不得不靠全局搜索了（由此催发了一些 Vuex 下的最佳实践，例如动作名称都用 CAPITAL<em>SNAKE</em>CASE 命名法，或是抽取出 mutation-types.js 文件）。</p>\n<p>随着项目的推进，一旦 Action 有变动（增减参数数量或是改变类型等等），项目里有5个地方用到了它，而你粗心地只改了 4 个地方，在一个犄角旮旯的平时不会用到也没有测试覆盖的地方，一个炸弹默默地就冒了出来。</p>\n<p>在 Javascript 能力的限制下，只好靠命名规范和小心翼翼（不断搜索和确认修改）来规避的问题。其实借助 Typescript 强大的类型推断能力，这种心智负担是完全可以避免的。</p>\n<h1 id=\"解决方案\" style=\"position:relative;\"><a href=\"#%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88\" aria-label=\"解决方案 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>解决方案</h1>\n<p>vuex 的 d.ts 文件提供了一些很有用的类型，不过里面有好多 any, 我们其实可以在其之上再细化一下类型限制。</p>\n<h2 id=\"关键代码\" style=\"position:relative;\"><a href=\"#%E5%85%B3%E9%94%AE%E4%BB%A3%E7%A0%81\" aria-label=\"关键代码 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>关键代码</h2>\n<p>这个文件导出了一些类型，以及两个需要传入类型的高阶函数 <code>makeDispatcher</code> 和 <code>makeMutator</code>，具体使用可以看再之后的示例。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// vuex-util.ts</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ActionContext<span class=\"token punctuation\">,</span> Store<span class=\"token punctuation\">,</span> Module <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex'</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">DictOf<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span>key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">ActionDescriptor</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">ModuleActions<span class=\"token operator\">&lt;</span>Context<span class=\"token punctuation\">,</span> Descriptor <span class=\"token keyword\">extends</span> DictOf<span class=\"token operator\">&lt;</span>ActionDescriptor<span class=\"token operator\">>></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span><span class=\"token constant\">K</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> Descriptor<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>ctx<span class=\"token operator\">:</span> Context<span class=\"token punctuation\">,</span> payload<span class=\"token operator\">:</span> Descriptor<span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Descriptor<span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">ModuleMutations<span class=\"token operator\">&lt;</span>State<span class=\"token punctuation\">,</span> PayloadTree<span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span><span class=\"token constant\">K</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> PayloadTree<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>state<span class=\"token operator\">:</span> State<span class=\"token punctuation\">,</span> payload<span class=\"token operator\">:</span> PayloadTree<span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">any</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">isStore</span><span class=\"token punctuation\">(</span>context<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'strict'</span> <span class=\"token keyword\">in</span> context<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">makeDispatcher</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Context <span class=\"token keyword\">extends</span> ActionContext<span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> Descriptor <span class=\"token keyword\">extends</span> DictOf<span class=\"token operator\">&lt;</span>ActionDescriptor<span class=\"token operator\">>></span></span></span><span class=\"token punctuation\">(</span>ns<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token keyword\">keyof</span> Descriptor<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n    context<span class=\"token operator\">:</span> Store<span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span> <span class=\"token operator\">|</span> Context<span class=\"token punctuation\">,</span>\n    action<span class=\"token operator\">:</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">,</span>\n    payload<span class=\"token operator\">:</span> Descriptor<span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> _context<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> context\n    <span class=\"token keyword\">let</span> actionName <span class=\"token operator\">=</span> action <span class=\"token keyword\">as</span> <span class=\"token builtin\">string</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ns <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isStore</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      actionName <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>ns<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>action<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> _context<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span>actionName<span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\">/**\n * 当此模块为 namespaced 的时候, `$store.commit(mutation)` 和在 action handler 内的 `ctx.commit(mutation)` 是不一样的\n */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">makeMutator</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Context <span class=\"token keyword\">extends</span> ActionContext<span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> MutationPayloadTree<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>ns<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token keyword\">keyof</span> MutationPayloadTree<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n    context<span class=\"token operator\">:</span> Store<span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span> <span class=\"token operator\">|</span> Context<span class=\"token punctuation\">,</span>\n    mutation<span class=\"token operator\">:</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">,</span>\n    payload<span class=\"token operator\">:</span> MutationPayloadTree<span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> mutationName <span class=\"token operator\">=</span> mutation <span class=\"token keyword\">as</span> <span class=\"token builtin\">string</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ns <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isStore</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      mutationName <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>ns<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>mutation<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span>mutationName<span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"使用示例-一个-todo-app\" style=\"position:relative;\"><a href=\"#%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B-%E4%B8%80%E4%B8%AA-todo-app\" aria-label=\"使用示例 一个 todo app permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>使用示例, 一个 Todo App</h2>\n<h3 id=\"导出-vuex-module\" style=\"position:relative;\"><a href=\"#%E5%AF%BC%E5%87%BA-vuex-module\" aria-label=\"导出 vuex module permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>导出 Vuex Module</h3>\n<p>首先列一下最后导出的 Vuex Module 声明:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ActionContext<span class=\"token punctuation\">,</span> Module <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">VUEX_NS</span> <span class=\"token operator\">=</span> <span class=\"token string\">'todo'</span>\n\n<span class=\"token comment\">/** 此对象接收类型变量, 分别代表 module state 和 rootState 类型 */</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">TodoContext</span> <span class=\"token operator\">=</span> ActionContext<span class=\"token operator\">&lt;</span>TodosState<span class=\"token punctuation\">,</span> GlobalState<span class=\"token operator\">></span>\n\n<span class=\"token comment\">// ...</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  namespaced<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  state<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  actions<span class=\"token operator\">:</span> <span class=\"token constant\">ACTIONS</span><span class=\"token punctuation\">,</span>\n  mutations<span class=\"token operator\">:</span> <span class=\"token constant\">MUTATIONS</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> Module<span class=\"token operator\">&lt;</span>TodosState<span class=\"token punctuation\">,</span> GlobalState<span class=\"token operator\">></span></code></pre></div>\n<h3 id=\"简单的-actions-和-mutations\" style=\"position:relative;\"><a href=\"#%E7%AE%80%E5%8D%95%E7%9A%84-actions-%E5%92%8C-mutations\" aria-label=\"简单的 actions 和 mutations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>简单的 ACTIONS 和 MUTATIONS</h3>\n<p>声明 ACTIONS，非常简单地从 localStorage 里取出数据，然后调用 <code>SET_TODOS</code> mutation:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">ActionDescriptors</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">GET_USER_TODOS</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">ACTIONS</span><span class=\"token operator\">:</span> ModuleActions<span class=\"token operator\">&lt;</span>TodoContext<span class=\"token punctuation\">,</span> ActionDescriptors<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">GET_USER_TODOS</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> todos <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'todoItems'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    ctx<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SET_TODOS'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> todos <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>接下来实现 MUTAIONS，先声明好所有 Mutation 需要的参数，并使用工具类型 <code>ModuleMutations</code> 标注即将给 Vuex Module 传递的 mutations 对象：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">MutationPayloads</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">SET_TODOS</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> todos<span class=\"token operator\">:</span> TodoItem<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">MUTATIONS</span><span class=\"token operator\">:</span> ModuleMutations<span class=\"token operator\">&lt;</span>TodosState<span class=\"token punctuation\">,</span> MutationPayloads<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>此时，TS 编译器会提示错误，是因为 <code>ModuleMutations</code> 这个工具类型要求包含第二个类型参数中所有的 key，一个空 Object 没有实现 <code>MutationPayloads</code> 所要求的 <code>SET_TODOS</code> 方法，因此会抛出 TS Error。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"> <span class=\"token keyword\">const</span>  <span class=\"token constant\">MUTATIONS</span><span class=\"token operator\">:</span>  ModuleMutations<span class=\"token operator\">&lt;</span>TodosState<span class=\"token punctuation\">,</span>  MutationPayloads<span class=\"token operator\">></span> \n\n<span class=\"token string\">'MUTATIONS'</span> <span class=\"token keyword\">is</span> declared but its value <span class=\"token keyword\">is</span> <span class=\"token builtin\">never</span> read<span class=\"token punctuation\">.</span><span class=\"token function\">ts</span><span class=\"token punctuation\">(</span><span class=\"token number\">6133</span><span class=\"token punctuation\">)</span>\n\nProperty <span class=\"token string\">'SET_TODOS'</span> <span class=\"token keyword\">is</span> missing <span class=\"token keyword\">in</span> <span class=\"token keyword\">type</span> <span class=\"token string\">'{}'</span> but required <span class=\"token keyword\">in</span> <span class=\"token keyword\">type</span> <span class=\"token string\">'ModuleMutations&lt;TodosState, MutationPayloads>'</span><span class=\"token punctuation\">.</span><span class=\"token function\">ts</span><span class=\"token punctuation\">(</span><span class=\"token number\">2741</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>接下来可以看看顺滑的编辑器提示体验：</p>\n<p><img src=\"https://i.loli.net/2019/06/18/5d08ee57943b421476.gif\" alt=\"实现 MUTATIONS\"></p>\n<p>声明好 <code>MutationPayloads</code> 以后，可以借助一个工具函数生成一个新的类似于 <code>commit</code> 的函数：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">/**\n * 一个带有类型变量的函数，使用示例 todoItemMutate(actionContext, 'mutationName', mutationPayload)\n */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> todoItemMutate <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">makeMutator</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>TodoContext<span class=\"token punctuation\">,</span> MutationPayloads<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token constant\">VUEX_NS</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>让我们来改一改 <code>GET_USER_TODOS</code> 里提交 mutation 的方式，同时享受到代码提示：</p>\n<p><img src=\"https://i.loli.net/2019/06/18/5d08f24166d5812315.gif\" alt=\"调用 mutator\"></p>\n<p>好的，现在可以使用另一个工具函数，生成一个新的带有类型限制的类似于 <code>dispatch</code> 的函数，并在别处调用：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">/**\n * 一个带有类型变量的函数，使用示例 todoItemDispatch(actionContext, 'actionName', actionName)\n */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> todoItemDispatch <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">makeDispatcher</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>TodoContext<span class=\"token punctuation\">,</span> ActionDescriptors<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token constant\">VUEX_NS</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">...</span>\n\n<span class=\"token function\">todoItemDispatch</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">,</span> <span class=\"token string\">'GET_USER_TODOS'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"然后，需求改了！\" style=\"position:relative;\"><a href=\"#%E7%84%B6%E5%90%8E%EF%BC%8C%E9%9C%80%E6%B1%82%E6%94%B9%E4%BA%86%EF%BC%81\" aria-label=\"然后，需求改了！ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>然后，需求改了！</h3>\n<p>此时你决定 TodoApp 需要能支持多用户，每个用户有自己的记录。那么 ACTIONS 接口说明需要更改：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">type ActionDescriptors = {\n  GET_USER_TODOS: [{ userName: string }, void]\n}</code></pre></div>\n<p>此时编译器会报错，在上一节最后的 <code>todoItemDispatch</code> 调用处：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">Argument <span class=\"token keyword\">of</span> <span class=\"token keyword\">type</span> <span class=\"token string\">'{}'</span> <span class=\"token keyword\">is</span> not assignable to parameter <span class=\"token keyword\">of</span> <span class=\"token keyword\">type</span> <span class=\"token string\">'{ userName: string; }'</span><span class=\"token punctuation\">.</span>\n  Property <span class=\"token string\">'userName'</span> <span class=\"token keyword\">is</span> missing <span class=\"token keyword\">in</span> <span class=\"token keyword\">type</span> <span class=\"token string\">'{}'</span> but required <span class=\"token keyword\">in</span> <span class=\"token keyword\">type</span> <span class=\"token string\">'{ userName: string; }'</span><span class=\"token punctuation\">.</span><span class=\"token function\">ts</span><span class=\"token punctuation\">(</span><span class=\"token number\">2345</span><span class=\"token punctuation\">)</span>\ntodo<span class=\"token punctuation\">.</span><span class=\"token function\">ts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token string\">'userName'</span> <span class=\"token keyword\">is</span> declared here<span class=\"token punctuation\">.</span></code></pre></div>\n<p>好的，现在开心地来到出错地方，改一改:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token function\">todoItemDispatch</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">,</span> <span class=\"token string\">'GET_USER_TODOS'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> userName<span class=\"token operator\">:</span> <span class=\"token string\">'hikerpig'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>没有全局搜索，不用做无谓的参数检查单元测试。</p>\n<h1 id=\"总结\" style=\"position:relative;\"><a href=\"#%E6%80%BB%E7%BB%93\" aria-label=\"总结 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>总结</h1>\n<h2 id=\"优点\" style=\"position:relative;\"><a href=\"#%E4%BC%98%E7%82%B9\" aria-label=\"优点 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>优点</h2>\n<ul>\n<li>优化开发时的体验</li>\n<li>不改变原先 actions 和 mutations 成员函数实现的方式，也不像 vuex-typescript 引入了一些额外的 class</li>\n</ul>\n<h2 id=\"缺点\" style=\"position:relative;\"><a href=\"#%E7%BC%BA%E7%82%B9\" aria-label=\"缺点 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>缺点</h2>\n<ul>\n<li>接口描述的类型需要提前单独声明，没法直接使用函数的签名</li>\n<li>没法把所有类型增强合并为一个统一的 <code>dispath</code> 函数，其他文件里的代码若想享受这个类型增强，必须显式地 import <code>todoItemDispatch</code>/<code>todoItemMutate</code> 方法，略微麻烦</li>\n</ul>","excerpt":"碰到的问题 如履针毡的状态管理和业务逻辑调用 Vuex 使用了统一的 dispatch/commit 方法去触发 Action 和 Mutation, 如果使用嵌套的 module, Vuex 还会解析命名空间，以找到正确的 Action/Mutation…","tableOfContents":"<ul>\n<li>\n<p><a href=\"/2019-06-17-typescript-powered-vuex/#%E7%A2%B0%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98\">碰到的问题</a></p>\n<ul>\n<li><a href=\"/2019-06-17-typescript-powered-vuex/#%E5%A6%82%E5%B1%A5%E9%92%88%E6%AF%A1%E7%9A%84%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E5%92%8C%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91%E8%B0%83%E7%94%A8\">如履针毡的状态管理和业务逻辑调用</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/2019-06-17-typescript-powered-vuex/#%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88\">解决方案</a></p>\n<ul>\n<li><a href=\"/2019-06-17-typescript-powered-vuex/#%E5%85%B3%E9%94%AE%E4%BB%A3%E7%A0%81\">关键代码</a></li>\n<li>\n<p><a href=\"/2019-06-17-typescript-powered-vuex/#%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B-%E4%B8%80%E4%B8%AA-todo-app\">使用示例, 一个 Todo App</a></p>\n<ul>\n<li><a href=\"/2019-06-17-typescript-powered-vuex/#%E5%AF%BC%E5%87%BA-vuex-module\">导出 Vuex Module</a></li>\n<li><a href=\"/2019-06-17-typescript-powered-vuex/#%E7%AE%80%E5%8D%95%E7%9A%84-actions-%E5%92%8C-mutations\">简单的 ACTIONS 和 MUTATIONS</a></li>\n<li><a href=\"/2019-06-17-typescript-powered-vuex/#%E7%84%B6%E5%90%8E%EF%BC%8C%E9%9C%80%E6%B1%82%E6%94%B9%E4%BA%86%EF%BC%81\">然后，需求改了！</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/2019-06-17-typescript-powered-vuex/#%E6%80%BB%E7%BB%93\">总结</a></p>\n<ul>\n<li><a href=\"/2019-06-17-typescript-powered-vuex/#%E4%BC%98%E7%82%B9\">优点</a></li>\n<li><a href=\"/2019-06-17-typescript-powered-vuex/#%E7%BC%BA%E7%82%B9\">缺点</a></li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/2019-06-17-typescript-powered-vuex/","featureImageSrc":null},"frontmatter":{"title":"使用 Typescript 加强 Vuex 使用体验","date":"2019-06-17","author":null,"tags":["Vuex","Typescript"],"use_toc":true,"coverImage":null}}},"pageContext":{"type":"posts","next":{"fields":{"slug":"/2019-05-13-Fastblur-implemetation-with-rust/"},"frontmatter":{"title":"图像近似高斯模糊的快速实现，以及 WebAssembly 模块的导出","tags":["图像处理","Rust","WebAssembly"]},"fileAbsolutePath":"/Users/bytedance/mydemos/gatsby-hello-friend/content/posts/2019-05-13-Fastblur-implemetation-with-rust.md"},"previous":{"fields":{"slug":"/2019-08-20-Run-Image-Optimize-With-Cli/"},"frontmatter":{"title":"命令行下的图片压缩工具","tags":["图片","工具"]},"fileAbsolutePath":"/Users/bytedance/mydemos/gatsby-hello-friend/content/posts/2019-08-20-Run-Image-Optimize-With-Cli.md"},"slug":"/2019-06-17-typescript-powered-vuex/"}},"staticQueryHashes":["1425477374","3128451518"]}